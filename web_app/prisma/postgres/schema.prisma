generator client {
  provider = "prisma-client-js"
  output   = "../../node_modules/@prisma-db-postgres/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

enum Role {
  ADMIN
  SUPERADMIN
  MEMBER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  password      String?
  role          Role      @default(ADMIN)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  spaces        Space[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  @@unique([email, token])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("password_reset_tokens")
}

enum CollectionType {
  TEXT
  VIDEO
  TEXT_AND_VIDEO
}

model Space {
  id                        String                      @id @default(cuid())
  name                      String
  logo                      String?
  headerTitle               String
  headerSubtitle            String
  questions                 Question[]
  collectionType            CollectionType
  collectStar               Boolean
  isAnalysisEnabled         Boolean                     @default(false)
  // themeId        String         @unique
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  createdById               String
  createdBy                 User                        @relation(fields: [createdById], references: [id])
  thankyouSpace             ThankYouSpace?
  isPublished               Boolean                     @default(false)
  feedbacks                 Feedback[]
  DailyMetrics              DailyMetrics[]
  // theme          Theme          @relation(fields: [themeId], references: [id])
  RequestTestimonialMetrics RequestTestimonialMetrics[]
  WallOfLoveMetrics         WallOfLoveMetrics[]
}

model Question {
  id      String @id @default(cuid())
  spaceId String
  title   String
  order   Int

  space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)
}

model Theme {
  id              String   @id @default(cuid())
  name            String
  primaryColor    String
  secondaryColor  String
  tertiaryColor   String
  quaternaryColor String
  quinaryColor    String
  senaryColor     String
  septenaryColor  String
  octonaryColor   String
  nonaryColor     String
  denaryColor     String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  // space           Space?
}

model ThankYouSpace {
  id        String   @id @default(cuid())
  spaceId   String   @unique
  title     String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)
}

enum FeedbackType {
  TEXT
  VIDEO
  TEXT_AND_VIDEO
}

enum SentimentType {
  POSITIVE
  NEGATIVE
  NEUTRAL
}

enum AnalysisStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

model Feedback {
  id              String         @id @default(cuid())
  answer          String?
  name            String
  email           String
  rating          Int
  permission      Boolean
  spaceId         String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  feedbackType    FeedbackType
  addToWallOfLove Boolean        @default(false)
  videoUrl        String?
  imageUrl        String?
  isSpam          Boolean        @default(false)
  sentiment       SentimentType  @default(NEUTRAL)
  analysisStatus  AnalysisStatus @default(PENDING)

  space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)
}

// Date registry for metrics tracking
model MetricsDate {
  id                        String                      @id @default(cuid())
  date                      DateTime                    @unique @db.Date
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  requestTestimonialMetrics RequestTestimonialMetrics[]
  wallOfLoveMetrics         WallOfLoveMetrics[]

  @@index([date])
}

// Metrics for Request Testimonial page
model RequestTestimonialMetrics {
  id               String   @id @default(cuid())
  spaceId          String
  dateId           String
  pageViews        Int      @default(0)
  visitors         Int      @default(0)
  completedActions Int      @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now())

  space Space       @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  date  MetricsDate @relation(fields: [dateId], references: [id], onDelete: Cascade)

  @@unique([spaceId, dateId])
  @@index([spaceId])
  @@index([dateId])
}

// Metrics for Wall of Love page
model WallOfLoveMetrics {
  id                    String   @id @default(cuid())
  spaceId               String
  dateId                String
  pageViews             Int      @default(0)
  visitors              Int      @default(0)
  timeSpentOnWallOfLove Int      @default(0)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @default(now())

  space Space       @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  date  MetricsDate @relation(fields: [dateId], references: [id], onDelete: Cascade)

  @@unique([spaceId, dateId])
  @@index([spaceId])
  @@index([dateId])
}

// Deprecating old DailyMetrics model - will need migration 
// to move data from here to the new models
model DailyMetrics {
  id                    String   @id @default(cuid())
  spaceId               String
  date                  DateTime @db.Date
  pageViews             Int      @default(0)
  visitors              Int      @default(0)
  completedActions      Int      @default(0)
  timeSpentOnWallOfLove Int      @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  @@unique([spaceId, date])
  @@index([date])
  @@index([spaceId, date])
}
