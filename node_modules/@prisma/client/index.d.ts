
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model VerificationToken
 * 
 */
export type VerificationToken = $Result.DefaultSelection<Prisma.$VerificationTokenPayload>
/**
 * Model PasswordResetToken
 * 
 */
export type PasswordResetToken = $Result.DefaultSelection<Prisma.$PasswordResetTokenPayload>
/**
 * Model Space
 * 
 */
export type Space = $Result.DefaultSelection<Prisma.$SpacePayload>
/**
 * Model Question
 * 
 */
export type Question = $Result.DefaultSelection<Prisma.$QuestionPayload>
/**
 * Model Theme
 * 
 */
export type Theme = $Result.DefaultSelection<Prisma.$ThemePayload>
/**
 * Model ThankYouSpace
 * 
 */
export type ThankYouSpace = $Result.DefaultSelection<Prisma.$ThankYouSpacePayload>
/**
 * Model Feedback
 * 
 */
export type Feedback = $Result.DefaultSelection<Prisma.$FeedbackPayload>
/**
 * Model MetricsDate
 * 
 */
export type MetricsDate = $Result.DefaultSelection<Prisma.$MetricsDatePayload>
/**
 * Model RequestTestimonialMetrics
 * 
 */
export type RequestTestimonialMetrics = $Result.DefaultSelection<Prisma.$RequestTestimonialMetricsPayload>
/**
 * Model WallOfLoveMetrics
 * 
 */
export type WallOfLoveMetrics = $Result.DefaultSelection<Prisma.$WallOfLoveMetricsPayload>
/**
 * Model DailyMetrics
 * 
 */
export type DailyMetrics = $Result.DefaultSelection<Prisma.$DailyMetricsPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  ADMIN: 'ADMIN',
  SUPERADMIN: 'SUPERADMIN',
  MEMBER: 'MEMBER'
};

export type Role = (typeof Role)[keyof typeof Role]


export const CollectionType: {
  TEXT: 'TEXT',
  VIDEO: 'VIDEO',
  TEXT_AND_VIDEO: 'TEXT_AND_VIDEO'
};

export type CollectionType = (typeof CollectionType)[keyof typeof CollectionType]


export const FeedbackType: {
  TEXT: 'TEXT',
  VIDEO: 'VIDEO',
  TEXT_AND_VIDEO: 'TEXT_AND_VIDEO'
};

export type FeedbackType = (typeof FeedbackType)[keyof typeof FeedbackType]


export const SentimentType: {
  POSITIVE: 'POSITIVE',
  NEGATIVE: 'NEGATIVE',
  NEUTRAL: 'NEUTRAL'
};

export type SentimentType = (typeof SentimentType)[keyof typeof SentimentType]


export const AnalysisStatus: {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED'
};

export type AnalysisStatus = (typeof AnalysisStatus)[keyof typeof AnalysisStatus]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type CollectionType = $Enums.CollectionType

export const CollectionType: typeof $Enums.CollectionType

export type FeedbackType = $Enums.FeedbackType

export const FeedbackType: typeof $Enums.FeedbackType

export type SentimentType = $Enums.SentimentType

export const SentimentType: typeof $Enums.SentimentType

export type AnalysisStatus = $Enums.AnalysisStatus

export const AnalysisStatus: typeof $Enums.AnalysisStatus

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.verificationToken`: Exposes CRUD operations for the **VerificationToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VerificationTokens
    * const verificationTokens = await prisma.verificationToken.findMany()
    * ```
    */
  get verificationToken(): Prisma.VerificationTokenDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.passwordResetToken`: Exposes CRUD operations for the **PasswordResetToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PasswordResetTokens
    * const passwordResetTokens = await prisma.passwordResetToken.findMany()
    * ```
    */
  get passwordResetToken(): Prisma.PasswordResetTokenDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.space`: Exposes CRUD operations for the **Space** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Spaces
    * const spaces = await prisma.space.findMany()
    * ```
    */
  get space(): Prisma.SpaceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.question`: Exposes CRUD operations for the **Question** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Questions
    * const questions = await prisma.question.findMany()
    * ```
    */
  get question(): Prisma.QuestionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.theme`: Exposes CRUD operations for the **Theme** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Themes
    * const themes = await prisma.theme.findMany()
    * ```
    */
  get theme(): Prisma.ThemeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.thankYouSpace`: Exposes CRUD operations for the **ThankYouSpace** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ThankYouSpaces
    * const thankYouSpaces = await prisma.thankYouSpace.findMany()
    * ```
    */
  get thankYouSpace(): Prisma.ThankYouSpaceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.feedback`: Exposes CRUD operations for the **Feedback** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Feedbacks
    * const feedbacks = await prisma.feedback.findMany()
    * ```
    */
  get feedback(): Prisma.FeedbackDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.metricsDate`: Exposes CRUD operations for the **MetricsDate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MetricsDates
    * const metricsDates = await prisma.metricsDate.findMany()
    * ```
    */
  get metricsDate(): Prisma.MetricsDateDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.requestTestimonialMetrics`: Exposes CRUD operations for the **RequestTestimonialMetrics** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RequestTestimonialMetrics
    * const requestTestimonialMetrics = await prisma.requestTestimonialMetrics.findMany()
    * ```
    */
  get requestTestimonialMetrics(): Prisma.RequestTestimonialMetricsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.wallOfLoveMetrics`: Exposes CRUD operations for the **WallOfLoveMetrics** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WallOfLoveMetrics
    * const wallOfLoveMetrics = await prisma.wallOfLoveMetrics.findMany()
    * ```
    */
  get wallOfLoveMetrics(): Prisma.WallOfLoveMetricsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.dailyMetrics`: Exposes CRUD operations for the **DailyMetrics** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DailyMetrics
    * const dailyMetrics = await prisma.dailyMetrics.findMany()
    * ```
    */
  get dailyMetrics(): Prisma.DailyMetricsDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.7.0
   * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Account: 'Account',
    VerificationToken: 'VerificationToken',
    PasswordResetToken: 'PasswordResetToken',
    Space: 'Space',
    Question: 'Question',
    Theme: 'Theme',
    ThankYouSpace: 'ThankYouSpace',
    Feedback: 'Feedback',
    MetricsDate: 'MetricsDate',
    RequestTestimonialMetrics: 'RequestTestimonialMetrics',
    WallOfLoveMetrics: 'WallOfLoveMetrics',
    DailyMetrics: 'DailyMetrics'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "account" | "verificationToken" | "passwordResetToken" | "space" | "question" | "theme" | "thankYouSpace" | "feedback" | "metricsDate" | "requestTestimonialMetrics" | "wallOfLoveMetrics" | "dailyMetrics"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AccountUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      VerificationToken: {
        payload: Prisma.$VerificationTokenPayload<ExtArgs>
        fields: Prisma.VerificationTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VerificationTokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VerificationTokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          findFirst: {
            args: Prisma.VerificationTokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VerificationTokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          findMany: {
            args: Prisma.VerificationTokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          create: {
            args: Prisma.VerificationTokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          createMany: {
            args: Prisma.VerificationTokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VerificationTokenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          delete: {
            args: Prisma.VerificationTokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          update: {
            args: Prisma.VerificationTokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          deleteMany: {
            args: Prisma.VerificationTokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VerificationTokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VerificationTokenUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          upsert: {
            args: Prisma.VerificationTokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          aggregate: {
            args: Prisma.VerificationTokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVerificationToken>
          }
          groupBy: {
            args: Prisma.VerificationTokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<VerificationTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.VerificationTokenCountArgs<ExtArgs>
            result: $Utils.Optional<VerificationTokenCountAggregateOutputType> | number
          }
        }
      }
      PasswordResetToken: {
        payload: Prisma.$PasswordResetTokenPayload<ExtArgs>
        fields: Prisma.PasswordResetTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PasswordResetTokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PasswordResetTokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
          }
          findFirst: {
            args: Prisma.PasswordResetTokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PasswordResetTokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
          }
          findMany: {
            args: Prisma.PasswordResetTokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>[]
          }
          create: {
            args: Prisma.PasswordResetTokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
          }
          createMany: {
            args: Prisma.PasswordResetTokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PasswordResetTokenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>[]
          }
          delete: {
            args: Prisma.PasswordResetTokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
          }
          update: {
            args: Prisma.PasswordResetTokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
          }
          deleteMany: {
            args: Prisma.PasswordResetTokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PasswordResetTokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PasswordResetTokenUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>[]
          }
          upsert: {
            args: Prisma.PasswordResetTokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
          }
          aggregate: {
            args: Prisma.PasswordResetTokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePasswordResetToken>
          }
          groupBy: {
            args: Prisma.PasswordResetTokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<PasswordResetTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.PasswordResetTokenCountArgs<ExtArgs>
            result: $Utils.Optional<PasswordResetTokenCountAggregateOutputType> | number
          }
        }
      }
      Space: {
        payload: Prisma.$SpacePayload<ExtArgs>
        fields: Prisma.SpaceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SpaceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpacePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SpaceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpacePayload>
          }
          findFirst: {
            args: Prisma.SpaceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpacePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SpaceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpacePayload>
          }
          findMany: {
            args: Prisma.SpaceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpacePayload>[]
          }
          create: {
            args: Prisma.SpaceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpacePayload>
          }
          createMany: {
            args: Prisma.SpaceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SpaceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpacePayload>[]
          }
          delete: {
            args: Prisma.SpaceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpacePayload>
          }
          update: {
            args: Prisma.SpaceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpacePayload>
          }
          deleteMany: {
            args: Prisma.SpaceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SpaceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SpaceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpacePayload>[]
          }
          upsert: {
            args: Prisma.SpaceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpacePayload>
          }
          aggregate: {
            args: Prisma.SpaceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSpace>
          }
          groupBy: {
            args: Prisma.SpaceGroupByArgs<ExtArgs>
            result: $Utils.Optional<SpaceGroupByOutputType>[]
          }
          count: {
            args: Prisma.SpaceCountArgs<ExtArgs>
            result: $Utils.Optional<SpaceCountAggregateOutputType> | number
          }
        }
      }
      Question: {
        payload: Prisma.$QuestionPayload<ExtArgs>
        fields: Prisma.QuestionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuestionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuestionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          findFirst: {
            args: Prisma.QuestionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuestionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          findMany: {
            args: Prisma.QuestionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>[]
          }
          create: {
            args: Prisma.QuestionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          createMany: {
            args: Prisma.QuestionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuestionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>[]
          }
          delete: {
            args: Prisma.QuestionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          update: {
            args: Prisma.QuestionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          deleteMany: {
            args: Prisma.QuestionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuestionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.QuestionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>[]
          }
          upsert: {
            args: Prisma.QuestionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          aggregate: {
            args: Prisma.QuestionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuestion>
          }
          groupBy: {
            args: Prisma.QuestionGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuestionGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuestionCountArgs<ExtArgs>
            result: $Utils.Optional<QuestionCountAggregateOutputType> | number
          }
        }
      }
      Theme: {
        payload: Prisma.$ThemePayload<ExtArgs>
        fields: Prisma.ThemeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ThemeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ThemeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePayload>
          }
          findFirst: {
            args: Prisma.ThemeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ThemeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePayload>
          }
          findMany: {
            args: Prisma.ThemeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePayload>[]
          }
          create: {
            args: Prisma.ThemeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePayload>
          }
          createMany: {
            args: Prisma.ThemeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ThemeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePayload>[]
          }
          delete: {
            args: Prisma.ThemeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePayload>
          }
          update: {
            args: Prisma.ThemeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePayload>
          }
          deleteMany: {
            args: Prisma.ThemeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ThemeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ThemeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePayload>[]
          }
          upsert: {
            args: Prisma.ThemeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePayload>
          }
          aggregate: {
            args: Prisma.ThemeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTheme>
          }
          groupBy: {
            args: Prisma.ThemeGroupByArgs<ExtArgs>
            result: $Utils.Optional<ThemeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ThemeCountArgs<ExtArgs>
            result: $Utils.Optional<ThemeCountAggregateOutputType> | number
          }
        }
      }
      ThankYouSpace: {
        payload: Prisma.$ThankYouSpacePayload<ExtArgs>
        fields: Prisma.ThankYouSpaceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ThankYouSpaceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThankYouSpacePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ThankYouSpaceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThankYouSpacePayload>
          }
          findFirst: {
            args: Prisma.ThankYouSpaceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThankYouSpacePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ThankYouSpaceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThankYouSpacePayload>
          }
          findMany: {
            args: Prisma.ThankYouSpaceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThankYouSpacePayload>[]
          }
          create: {
            args: Prisma.ThankYouSpaceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThankYouSpacePayload>
          }
          createMany: {
            args: Prisma.ThankYouSpaceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ThankYouSpaceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThankYouSpacePayload>[]
          }
          delete: {
            args: Prisma.ThankYouSpaceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThankYouSpacePayload>
          }
          update: {
            args: Prisma.ThankYouSpaceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThankYouSpacePayload>
          }
          deleteMany: {
            args: Prisma.ThankYouSpaceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ThankYouSpaceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ThankYouSpaceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThankYouSpacePayload>[]
          }
          upsert: {
            args: Prisma.ThankYouSpaceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThankYouSpacePayload>
          }
          aggregate: {
            args: Prisma.ThankYouSpaceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateThankYouSpace>
          }
          groupBy: {
            args: Prisma.ThankYouSpaceGroupByArgs<ExtArgs>
            result: $Utils.Optional<ThankYouSpaceGroupByOutputType>[]
          }
          count: {
            args: Prisma.ThankYouSpaceCountArgs<ExtArgs>
            result: $Utils.Optional<ThankYouSpaceCountAggregateOutputType> | number
          }
        }
      }
      Feedback: {
        payload: Prisma.$FeedbackPayload<ExtArgs>
        fields: Prisma.FeedbackFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FeedbackFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FeedbackFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          findFirst: {
            args: Prisma.FeedbackFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FeedbackFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          findMany: {
            args: Prisma.FeedbackFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>[]
          }
          create: {
            args: Prisma.FeedbackCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          createMany: {
            args: Prisma.FeedbackCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FeedbackCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>[]
          }
          delete: {
            args: Prisma.FeedbackDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          update: {
            args: Prisma.FeedbackUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          deleteMany: {
            args: Prisma.FeedbackDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FeedbackUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FeedbackUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>[]
          }
          upsert: {
            args: Prisma.FeedbackUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          aggregate: {
            args: Prisma.FeedbackAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFeedback>
          }
          groupBy: {
            args: Prisma.FeedbackGroupByArgs<ExtArgs>
            result: $Utils.Optional<FeedbackGroupByOutputType>[]
          }
          count: {
            args: Prisma.FeedbackCountArgs<ExtArgs>
            result: $Utils.Optional<FeedbackCountAggregateOutputType> | number
          }
        }
      }
      MetricsDate: {
        payload: Prisma.$MetricsDatePayload<ExtArgs>
        fields: Prisma.MetricsDateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MetricsDateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricsDatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MetricsDateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricsDatePayload>
          }
          findFirst: {
            args: Prisma.MetricsDateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricsDatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MetricsDateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricsDatePayload>
          }
          findMany: {
            args: Prisma.MetricsDateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricsDatePayload>[]
          }
          create: {
            args: Prisma.MetricsDateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricsDatePayload>
          }
          createMany: {
            args: Prisma.MetricsDateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MetricsDateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricsDatePayload>[]
          }
          delete: {
            args: Prisma.MetricsDateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricsDatePayload>
          }
          update: {
            args: Prisma.MetricsDateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricsDatePayload>
          }
          deleteMany: {
            args: Prisma.MetricsDateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MetricsDateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MetricsDateUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricsDatePayload>[]
          }
          upsert: {
            args: Prisma.MetricsDateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricsDatePayload>
          }
          aggregate: {
            args: Prisma.MetricsDateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMetricsDate>
          }
          groupBy: {
            args: Prisma.MetricsDateGroupByArgs<ExtArgs>
            result: $Utils.Optional<MetricsDateGroupByOutputType>[]
          }
          count: {
            args: Prisma.MetricsDateCountArgs<ExtArgs>
            result: $Utils.Optional<MetricsDateCountAggregateOutputType> | number
          }
        }
      }
      RequestTestimonialMetrics: {
        payload: Prisma.$RequestTestimonialMetricsPayload<ExtArgs>
        fields: Prisma.RequestTestimonialMetricsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RequestTestimonialMetricsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestTestimonialMetricsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RequestTestimonialMetricsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestTestimonialMetricsPayload>
          }
          findFirst: {
            args: Prisma.RequestTestimonialMetricsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestTestimonialMetricsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RequestTestimonialMetricsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestTestimonialMetricsPayload>
          }
          findMany: {
            args: Prisma.RequestTestimonialMetricsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestTestimonialMetricsPayload>[]
          }
          create: {
            args: Prisma.RequestTestimonialMetricsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestTestimonialMetricsPayload>
          }
          createMany: {
            args: Prisma.RequestTestimonialMetricsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RequestTestimonialMetricsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestTestimonialMetricsPayload>[]
          }
          delete: {
            args: Prisma.RequestTestimonialMetricsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestTestimonialMetricsPayload>
          }
          update: {
            args: Prisma.RequestTestimonialMetricsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestTestimonialMetricsPayload>
          }
          deleteMany: {
            args: Prisma.RequestTestimonialMetricsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RequestTestimonialMetricsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RequestTestimonialMetricsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestTestimonialMetricsPayload>[]
          }
          upsert: {
            args: Prisma.RequestTestimonialMetricsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestTestimonialMetricsPayload>
          }
          aggregate: {
            args: Prisma.RequestTestimonialMetricsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRequestTestimonialMetrics>
          }
          groupBy: {
            args: Prisma.RequestTestimonialMetricsGroupByArgs<ExtArgs>
            result: $Utils.Optional<RequestTestimonialMetricsGroupByOutputType>[]
          }
          count: {
            args: Prisma.RequestTestimonialMetricsCountArgs<ExtArgs>
            result: $Utils.Optional<RequestTestimonialMetricsCountAggregateOutputType> | number
          }
        }
      }
      WallOfLoveMetrics: {
        payload: Prisma.$WallOfLoveMetricsPayload<ExtArgs>
        fields: Prisma.WallOfLoveMetricsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WallOfLoveMetricsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WallOfLoveMetricsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WallOfLoveMetricsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WallOfLoveMetricsPayload>
          }
          findFirst: {
            args: Prisma.WallOfLoveMetricsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WallOfLoveMetricsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WallOfLoveMetricsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WallOfLoveMetricsPayload>
          }
          findMany: {
            args: Prisma.WallOfLoveMetricsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WallOfLoveMetricsPayload>[]
          }
          create: {
            args: Prisma.WallOfLoveMetricsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WallOfLoveMetricsPayload>
          }
          createMany: {
            args: Prisma.WallOfLoveMetricsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WallOfLoveMetricsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WallOfLoveMetricsPayload>[]
          }
          delete: {
            args: Prisma.WallOfLoveMetricsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WallOfLoveMetricsPayload>
          }
          update: {
            args: Prisma.WallOfLoveMetricsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WallOfLoveMetricsPayload>
          }
          deleteMany: {
            args: Prisma.WallOfLoveMetricsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WallOfLoveMetricsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WallOfLoveMetricsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WallOfLoveMetricsPayload>[]
          }
          upsert: {
            args: Prisma.WallOfLoveMetricsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WallOfLoveMetricsPayload>
          }
          aggregate: {
            args: Prisma.WallOfLoveMetricsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWallOfLoveMetrics>
          }
          groupBy: {
            args: Prisma.WallOfLoveMetricsGroupByArgs<ExtArgs>
            result: $Utils.Optional<WallOfLoveMetricsGroupByOutputType>[]
          }
          count: {
            args: Prisma.WallOfLoveMetricsCountArgs<ExtArgs>
            result: $Utils.Optional<WallOfLoveMetricsCountAggregateOutputType> | number
          }
        }
      }
      DailyMetrics: {
        payload: Prisma.$DailyMetricsPayload<ExtArgs>
        fields: Prisma.DailyMetricsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DailyMetricsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyMetricsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DailyMetricsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyMetricsPayload>
          }
          findFirst: {
            args: Prisma.DailyMetricsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyMetricsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DailyMetricsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyMetricsPayload>
          }
          findMany: {
            args: Prisma.DailyMetricsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyMetricsPayload>[]
          }
          create: {
            args: Prisma.DailyMetricsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyMetricsPayload>
          }
          createMany: {
            args: Prisma.DailyMetricsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DailyMetricsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyMetricsPayload>[]
          }
          delete: {
            args: Prisma.DailyMetricsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyMetricsPayload>
          }
          update: {
            args: Prisma.DailyMetricsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyMetricsPayload>
          }
          deleteMany: {
            args: Prisma.DailyMetricsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DailyMetricsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DailyMetricsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyMetricsPayload>[]
          }
          upsert: {
            args: Prisma.DailyMetricsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyMetricsPayload>
          }
          aggregate: {
            args: Prisma.DailyMetricsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDailyMetrics>
          }
          groupBy: {
            args: Prisma.DailyMetricsGroupByArgs<ExtArgs>
            result: $Utils.Optional<DailyMetricsGroupByOutputType>[]
          }
          count: {
            args: Prisma.DailyMetricsCountArgs<ExtArgs>
            result: $Utils.Optional<DailyMetricsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    account?: AccountOmit
    verificationToken?: VerificationTokenOmit
    passwordResetToken?: PasswordResetTokenOmit
    space?: SpaceOmit
    question?: QuestionOmit
    theme?: ThemeOmit
    thankYouSpace?: ThankYouSpaceOmit
    feedback?: FeedbackOmit
    metricsDate?: MetricsDateOmit
    requestTestimonialMetrics?: RequestTestimonialMetricsOmit
    wallOfLoveMetrics?: WallOfLoveMetricsOmit
    dailyMetrics?: DailyMetricsOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    accounts: number
    spaces: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | UserCountOutputTypeCountAccountsArgs
    spaces?: boolean | UserCountOutputTypeCountSpacesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSpacesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SpaceWhereInput
  }


  /**
   * Count Type SpaceCountOutputType
   */

  export type SpaceCountOutputType = {
    questions: number
    feedbacks: number
    DailyMetrics: number
    RequestTestimonialMetrics: number
    WallOfLoveMetrics: number
  }

  export type SpaceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questions?: boolean | SpaceCountOutputTypeCountQuestionsArgs
    feedbacks?: boolean | SpaceCountOutputTypeCountFeedbacksArgs
    DailyMetrics?: boolean | SpaceCountOutputTypeCountDailyMetricsArgs
    RequestTestimonialMetrics?: boolean | SpaceCountOutputTypeCountRequestTestimonialMetricsArgs
    WallOfLoveMetrics?: boolean | SpaceCountOutputTypeCountWallOfLoveMetricsArgs
  }

  // Custom InputTypes
  /**
   * SpaceCountOutputType without action
   */
  export type SpaceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpaceCountOutputType
     */
    select?: SpaceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SpaceCountOutputType without action
   */
  export type SpaceCountOutputTypeCountQuestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionWhereInput
  }

  /**
   * SpaceCountOutputType without action
   */
  export type SpaceCountOutputTypeCountFeedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
  }

  /**
   * SpaceCountOutputType without action
   */
  export type SpaceCountOutputTypeCountDailyMetricsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DailyMetricsWhereInput
  }

  /**
   * SpaceCountOutputType without action
   */
  export type SpaceCountOutputTypeCountRequestTestimonialMetricsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RequestTestimonialMetricsWhereInput
  }

  /**
   * SpaceCountOutputType without action
   */
  export type SpaceCountOutputTypeCountWallOfLoveMetricsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WallOfLoveMetricsWhereInput
  }


  /**
   * Count Type MetricsDateCountOutputType
   */

  export type MetricsDateCountOutputType = {
    requestTestimonialMetrics: number
    wallOfLoveMetrics: number
  }

  export type MetricsDateCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    requestTestimonialMetrics?: boolean | MetricsDateCountOutputTypeCountRequestTestimonialMetricsArgs
    wallOfLoveMetrics?: boolean | MetricsDateCountOutputTypeCountWallOfLoveMetricsArgs
  }

  // Custom InputTypes
  /**
   * MetricsDateCountOutputType without action
   */
  export type MetricsDateCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricsDateCountOutputType
     */
    select?: MetricsDateCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MetricsDateCountOutputType without action
   */
  export type MetricsDateCountOutputTypeCountRequestTestimonialMetricsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RequestTestimonialMetricsWhereInput
  }

  /**
   * MetricsDateCountOutputType without action
   */
  export type MetricsDateCountOutputTypeCountWallOfLoveMetricsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WallOfLoveMetricsWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
    password: string | null
    role: $Enums.Role | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
    password: string | null
    role: $Enums.Role | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    emailVerified: number
    image: number
    password: number
    role: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    password?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    password?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    password?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string | null
    email: string
    emailVerified: Date | null
    image: string | null
    password: string | null
    role: $Enums.Role
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    accounts?: boolean | User$accountsArgs<ExtArgs>
    spaces?: boolean | User$spacesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "emailVerified" | "image" | "password" | "role" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | User$accountsArgs<ExtArgs>
    spaces?: boolean | User$spacesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      accounts: Prisma.$AccountPayload<ExtArgs>[]
      spaces: Prisma.$SpacePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string | null
      email: string
      emailVerified: Date | null
      image: string | null
      password: string | null
      role: $Enums.Role
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    accounts<T extends User$accountsArgs<ExtArgs> = {}>(args?: Subset<T, User$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    spaces<T extends User$spacesArgs<ExtArgs> = {}>(args?: Subset<T, User$spacesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpacePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly emailVerified: FieldRef<"User", 'DateTime'>
    readonly image: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.accounts
   */
  export type User$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * User.spaces
   */
  export type User$spacesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Space
     */
    select?: SpaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Space
     */
    omit?: SpaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpaceInclude<ExtArgs> | null
    where?: SpaceWhereInput
    orderBy?: SpaceOrderByWithRelationInput | SpaceOrderByWithRelationInput[]
    cursor?: SpaceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SpaceScalarFieldEnum | SpaceScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountSumAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountMinAggregateOutputType = {
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountMaxAggregateOutputType = {
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountCountAggregateOutputType = {
    userId: number
    type: number
    provider: number
    providerAccountId: number
    refresh_token: number
    access_token: number
    expires_at: number
    token_type: number
    scope: number
    id_token: number
    session_state: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    expires_at?: true
  }

  export type AccountSumAggregateInputType = {
    expires_at?: true
  }

  export type AccountMinAggregateInputType = {
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountMaxAggregateInputType = {
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountCountAggregateInputType = {
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    createdAt: Date
    updatedAt: Date
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AccountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"userId" | "type" | "provider" | "providerAccountId" | "refresh_token" | "access_token" | "expires_at" | "token_type" | "scope" | "id_token" | "session_state" | "createdAt" | "updatedAt", ExtArgs["result"]["account"]>
  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: string
      type: string
      provider: string
      providerAccountId: string
      refresh_token: string | null
      access_token: string | null
      expires_at: number | null
      token_type: string | null
      scope: string | null
      id_token: string | null
      session_state: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["account"]>
    composites: {}
  }

  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountFindUniqueArgs>(args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Account that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountFindFirstArgs>(args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const accountWithUserIdOnly = await prisma.account.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends AccountFindManyArgs>(args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
     */
    create<T extends AccountCreateArgs>(args: SelectSubset<T, AccountCreateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Accounts.
     * @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountCreateManyArgs>(args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Accounts and returns the data saved in the database.
     * @param {AccountCreateManyAndReturnArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Accounts and only return the `userId`
     * const accountWithUserIdOnly = await prisma.account.createManyAndReturn({
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AccountCreateManyAndReturnArgs>(args?: SelectSubset<T, AccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
     */
    delete<T extends AccountDeleteArgs>(args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountUpdateArgs>(args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountDeleteManyArgs>(args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountUpdateManyArgs>(args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts and returns the data updated in the database.
     * @param {AccountUpdateManyAndReturnArgs} args - Arguments to update many Accounts.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Accounts and only return the `userId`
     * const accountWithUserIdOnly = await prisma.account.updateManyAndReturn({
     *   select: { userId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AccountUpdateManyAndReturnArgs>(args: SelectSubset<T, AccountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
     */
    upsert<T extends AccountUpsertArgs>(args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Account model
   */
  interface AccountFieldRefs {
    readonly userId: FieldRef<"Account", 'String'>
    readonly type: FieldRef<"Account", 'String'>
    readonly provider: FieldRef<"Account", 'String'>
    readonly providerAccountId: FieldRef<"Account", 'String'>
    readonly refresh_token: FieldRef<"Account", 'String'>
    readonly access_token: FieldRef<"Account", 'String'>
    readonly expires_at: FieldRef<"Account", 'Int'>
    readonly token_type: FieldRef<"Account", 'String'>
    readonly scope: FieldRef<"Account", 'String'>
    readonly id_token: FieldRef<"Account", 'String'>
    readonly session_state: FieldRef<"Account", 'String'>
    readonly createdAt: FieldRef<"Account", 'DateTime'>
    readonly updatedAt: FieldRef<"Account", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }

  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Account createManyAndReturn
   */
  export type AccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
  }

  /**
   * Account updateManyAndReturn
   */
  export type AccountUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }

  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to delete.
     */
    limit?: number
  }

  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
  }


  /**
   * Model VerificationToken
   */

  export type AggregateVerificationToken = {
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  export type VerificationTokenMinAggregateOutputType = {
    id: string | null
    email: string | null
    token: string | null
    expires: Date | null
    createdAt: Date | null
  }

  export type VerificationTokenMaxAggregateOutputType = {
    id: string | null
    email: string | null
    token: string | null
    expires: Date | null
    createdAt: Date | null
  }

  export type VerificationTokenCountAggregateOutputType = {
    id: number
    email: number
    token: number
    expires: number
    createdAt: number
    _all: number
  }


  export type VerificationTokenMinAggregateInputType = {
    id?: true
    email?: true
    token?: true
    expires?: true
    createdAt?: true
  }

  export type VerificationTokenMaxAggregateInputType = {
    id?: true
    email?: true
    token?: true
    expires?: true
    createdAt?: true
  }

  export type VerificationTokenCountAggregateInputType = {
    id?: true
    email?: true
    token?: true
    expires?: true
    createdAt?: true
    _all?: true
  }

  export type VerificationTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationToken to aggregate.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VerificationTokens
    **/
    _count?: true | VerificationTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerificationTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type GetVerificationTokenAggregateType<T extends VerificationTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateVerificationToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerificationToken[P]>
      : GetScalarType<T[P], AggregateVerificationToken[P]>
  }




  export type VerificationTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VerificationTokenWhereInput
    orderBy?: VerificationTokenOrderByWithAggregationInput | VerificationTokenOrderByWithAggregationInput[]
    by: VerificationTokenScalarFieldEnum[] | VerificationTokenScalarFieldEnum
    having?: VerificationTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerificationTokenCountAggregateInputType | true
    _min?: VerificationTokenMinAggregateInputType
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type VerificationTokenGroupByOutputType = {
    id: string
    email: string
    token: string
    expires: Date
    createdAt: Date
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  type GetVerificationTokenGroupByPayload<T extends VerificationTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VerificationTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerificationTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
            : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
        }
      >
    >


  export type VerificationTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    token?: boolean
    expires?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    token?: boolean
    expires?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    token?: boolean
    expires?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectScalar = {
    id?: boolean
    email?: boolean
    token?: boolean
    expires?: boolean
    createdAt?: boolean
  }

  export type VerificationTokenOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "token" | "expires" | "createdAt", ExtArgs["result"]["verificationToken"]>

  export type $VerificationTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VerificationToken"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      token: string
      expires: Date
      createdAt: Date
    }, ExtArgs["result"]["verificationToken"]>
    composites: {}
  }

  type VerificationTokenGetPayload<S extends boolean | null | undefined | VerificationTokenDefaultArgs> = $Result.GetResult<Prisma.$VerificationTokenPayload, S>

  type VerificationTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VerificationTokenFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VerificationTokenCountAggregateInputType | true
    }

  export interface VerificationTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VerificationToken'], meta: { name: 'VerificationToken' } }
    /**
     * Find zero or one VerificationToken that matches the filter.
     * @param {VerificationTokenFindUniqueArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VerificationTokenFindUniqueArgs>(args: SelectSubset<T, VerificationTokenFindUniqueArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one VerificationToken that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VerificationTokenFindUniqueOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VerificationTokenFindUniqueOrThrowArgs>(args: SelectSubset<T, VerificationTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VerificationToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VerificationTokenFindFirstArgs>(args?: SelectSubset<T, VerificationTokenFindFirstArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VerificationToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VerificationTokenFindFirstOrThrowArgs>(args?: SelectSubset<T, VerificationTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more VerificationTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany()
     * 
     * // Get first 10 VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const verificationTokenWithIdOnly = await prisma.verificationToken.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VerificationTokenFindManyArgs>(args?: SelectSubset<T, VerificationTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a VerificationToken.
     * @param {VerificationTokenCreateArgs} args - Arguments to create a VerificationToken.
     * @example
     * // Create one VerificationToken
     * const VerificationToken = await prisma.verificationToken.create({
     *   data: {
     *     // ... data to create a VerificationToken
     *   }
     * })
     * 
     */
    create<T extends VerificationTokenCreateArgs>(args: SelectSubset<T, VerificationTokenCreateArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many VerificationTokens.
     * @param {VerificationTokenCreateManyArgs} args - Arguments to create many VerificationTokens.
     * @example
     * // Create many VerificationTokens
     * const verificationToken = await prisma.verificationToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VerificationTokenCreateManyArgs>(args?: SelectSubset<T, VerificationTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VerificationTokens and returns the data saved in the database.
     * @param {VerificationTokenCreateManyAndReturnArgs} args - Arguments to create many VerificationTokens.
     * @example
     * // Create many VerificationTokens
     * const verificationToken = await prisma.verificationToken.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VerificationTokens and only return the `id`
     * const verificationTokenWithIdOnly = await prisma.verificationToken.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VerificationTokenCreateManyAndReturnArgs>(args?: SelectSubset<T, VerificationTokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a VerificationToken.
     * @param {VerificationTokenDeleteArgs} args - Arguments to delete one VerificationToken.
     * @example
     * // Delete one VerificationToken
     * const VerificationToken = await prisma.verificationToken.delete({
     *   where: {
     *     // ... filter to delete one VerificationToken
     *   }
     * })
     * 
     */
    delete<T extends VerificationTokenDeleteArgs>(args: SelectSubset<T, VerificationTokenDeleteArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one VerificationToken.
     * @param {VerificationTokenUpdateArgs} args - Arguments to update one VerificationToken.
     * @example
     * // Update one VerificationToken
     * const verificationToken = await prisma.verificationToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VerificationTokenUpdateArgs>(args: SelectSubset<T, VerificationTokenUpdateArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more VerificationTokens.
     * @param {VerificationTokenDeleteManyArgs} args - Arguments to filter VerificationTokens to delete.
     * @example
     * // Delete a few VerificationTokens
     * const { count } = await prisma.verificationToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VerificationTokenDeleteManyArgs>(args?: SelectSubset<T, VerificationTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VerificationTokens
     * const verificationToken = await prisma.verificationToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VerificationTokenUpdateManyArgs>(args: SelectSubset<T, VerificationTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationTokens and returns the data updated in the database.
     * @param {VerificationTokenUpdateManyAndReturnArgs} args - Arguments to update many VerificationTokens.
     * @example
     * // Update many VerificationTokens
     * const verificationToken = await prisma.verificationToken.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more VerificationTokens and only return the `id`
     * const verificationTokenWithIdOnly = await prisma.verificationToken.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VerificationTokenUpdateManyAndReturnArgs>(args: SelectSubset<T, VerificationTokenUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one VerificationToken.
     * @param {VerificationTokenUpsertArgs} args - Arguments to update or create a VerificationToken.
     * @example
     * // Update or create a VerificationToken
     * const verificationToken = await prisma.verificationToken.upsert({
     *   create: {
     *     // ... data to create a VerificationToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VerificationToken we want to update
     *   }
     * })
     */
    upsert<T extends VerificationTokenUpsertArgs>(args: SelectSubset<T, VerificationTokenUpsertArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenCountArgs} args - Arguments to filter VerificationTokens to count.
     * @example
     * // Count the number of VerificationTokens
     * const count = await prisma.verificationToken.count({
     *   where: {
     *     // ... the filter for the VerificationTokens we want to count
     *   }
     * })
    **/
    count<T extends VerificationTokenCountArgs>(
      args?: Subset<T, VerificationTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerificationTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerificationTokenAggregateArgs>(args: Subset<T, VerificationTokenAggregateArgs>): Prisma.PrismaPromise<GetVerificationTokenAggregateType<T>>

    /**
     * Group by VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VerificationTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificationTokenGroupByArgs['orderBy'] }
        : { orderBy?: VerificationTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VerificationTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificationTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VerificationToken model
   */
  readonly fields: VerificationTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VerificationToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VerificationTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VerificationToken model
   */
  interface VerificationTokenFieldRefs {
    readonly id: FieldRef<"VerificationToken", 'String'>
    readonly email: FieldRef<"VerificationToken", 'String'>
    readonly token: FieldRef<"VerificationToken", 'String'>
    readonly expires: FieldRef<"VerificationToken", 'DateTime'>
    readonly createdAt: FieldRef<"VerificationToken", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * VerificationToken findUnique
   */
  export type VerificationTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken findUniqueOrThrow
   */
  export type VerificationTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken findFirst
   */
  export type VerificationTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken findFirstOrThrow
   */
  export type VerificationTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken findMany
   */
  export type VerificationTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationTokens to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken create
   */
  export type VerificationTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data needed to create a VerificationToken.
     */
    data: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
  }

  /**
   * VerificationToken createMany
   */
  export type VerificationTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VerificationTokens.
     */
    data: VerificationTokenCreateManyInput | VerificationTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VerificationToken createManyAndReturn
   */
  export type VerificationTokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data used to create many VerificationTokens.
     */
    data: VerificationTokenCreateManyInput | VerificationTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VerificationToken update
   */
  export type VerificationTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data needed to update a VerificationToken.
     */
    data: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
    /**
     * Choose, which VerificationToken to update.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken updateMany
   */
  export type VerificationTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VerificationTokens.
     */
    data: XOR<VerificationTokenUpdateManyMutationInput, VerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which VerificationTokens to update
     */
    where?: VerificationTokenWhereInput
    /**
     * Limit how many VerificationTokens to update.
     */
    limit?: number
  }

  /**
   * VerificationToken updateManyAndReturn
   */
  export type VerificationTokenUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data used to update VerificationTokens.
     */
    data: XOR<VerificationTokenUpdateManyMutationInput, VerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which VerificationTokens to update
     */
    where?: VerificationTokenWhereInput
    /**
     * Limit how many VerificationTokens to update.
     */
    limit?: number
  }

  /**
   * VerificationToken upsert
   */
  export type VerificationTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The filter to search for the VerificationToken to update in case it exists.
     */
    where: VerificationTokenWhereUniqueInput
    /**
     * In case the VerificationToken found by the `where` argument doesn't exist, create a new VerificationToken with this data.
     */
    create: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
    /**
     * In case the VerificationToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
  }

  /**
   * VerificationToken delete
   */
  export type VerificationTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter which VerificationToken to delete.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken deleteMany
   */
  export type VerificationTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationTokens to delete
     */
    where?: VerificationTokenWhereInput
    /**
     * Limit how many VerificationTokens to delete.
     */
    limit?: number
  }

  /**
   * VerificationToken without action
   */
  export type VerificationTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
  }


  /**
   * Model PasswordResetToken
   */

  export type AggregatePasswordResetToken = {
    _count: PasswordResetTokenCountAggregateOutputType | null
    _min: PasswordResetTokenMinAggregateOutputType | null
    _max: PasswordResetTokenMaxAggregateOutputType | null
  }

  export type PasswordResetTokenMinAggregateOutputType = {
    id: string | null
    email: string | null
    token: string | null
    expires: Date | null
  }

  export type PasswordResetTokenMaxAggregateOutputType = {
    id: string | null
    email: string | null
    token: string | null
    expires: Date | null
  }

  export type PasswordResetTokenCountAggregateOutputType = {
    id: number
    email: number
    token: number
    expires: number
    _all: number
  }


  export type PasswordResetTokenMinAggregateInputType = {
    id?: true
    email?: true
    token?: true
    expires?: true
  }

  export type PasswordResetTokenMaxAggregateInputType = {
    id?: true
    email?: true
    token?: true
    expires?: true
  }

  export type PasswordResetTokenCountAggregateInputType = {
    id?: true
    email?: true
    token?: true
    expires?: true
    _all?: true
  }

  export type PasswordResetTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PasswordResetToken to aggregate.
     */
    where?: PasswordResetTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResetTokens to fetch.
     */
    orderBy?: PasswordResetTokenOrderByWithRelationInput | PasswordResetTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PasswordResetTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResetTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResetTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PasswordResetTokens
    **/
    _count?: true | PasswordResetTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PasswordResetTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PasswordResetTokenMaxAggregateInputType
  }

  export type GetPasswordResetTokenAggregateType<T extends PasswordResetTokenAggregateArgs> = {
        [P in keyof T & keyof AggregatePasswordResetToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePasswordResetToken[P]>
      : GetScalarType<T[P], AggregatePasswordResetToken[P]>
  }




  export type PasswordResetTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PasswordResetTokenWhereInput
    orderBy?: PasswordResetTokenOrderByWithAggregationInput | PasswordResetTokenOrderByWithAggregationInput[]
    by: PasswordResetTokenScalarFieldEnum[] | PasswordResetTokenScalarFieldEnum
    having?: PasswordResetTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PasswordResetTokenCountAggregateInputType | true
    _min?: PasswordResetTokenMinAggregateInputType
    _max?: PasswordResetTokenMaxAggregateInputType
  }

  export type PasswordResetTokenGroupByOutputType = {
    id: string
    email: string
    token: string
    expires: Date
    _count: PasswordResetTokenCountAggregateOutputType | null
    _min: PasswordResetTokenMinAggregateOutputType | null
    _max: PasswordResetTokenMaxAggregateOutputType | null
  }

  type GetPasswordResetTokenGroupByPayload<T extends PasswordResetTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PasswordResetTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PasswordResetTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PasswordResetTokenGroupByOutputType[P]>
            : GetScalarType<T[P], PasswordResetTokenGroupByOutputType[P]>
        }
      >
    >


  export type PasswordResetTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["passwordResetToken"]>

  export type PasswordResetTokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["passwordResetToken"]>

  export type PasswordResetTokenSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["passwordResetToken"]>

  export type PasswordResetTokenSelectScalar = {
    id?: boolean
    email?: boolean
    token?: boolean
    expires?: boolean
  }

  export type PasswordResetTokenOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "token" | "expires", ExtArgs["result"]["passwordResetToken"]>

  export type $PasswordResetTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PasswordResetToken"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      token: string
      expires: Date
    }, ExtArgs["result"]["passwordResetToken"]>
    composites: {}
  }

  type PasswordResetTokenGetPayload<S extends boolean | null | undefined | PasswordResetTokenDefaultArgs> = $Result.GetResult<Prisma.$PasswordResetTokenPayload, S>

  type PasswordResetTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PasswordResetTokenFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PasswordResetTokenCountAggregateInputType | true
    }

  export interface PasswordResetTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PasswordResetToken'], meta: { name: 'PasswordResetToken' } }
    /**
     * Find zero or one PasswordResetToken that matches the filter.
     * @param {PasswordResetTokenFindUniqueArgs} args - Arguments to find a PasswordResetToken
     * @example
     * // Get one PasswordResetToken
     * const passwordResetToken = await prisma.passwordResetToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PasswordResetTokenFindUniqueArgs>(args: SelectSubset<T, PasswordResetTokenFindUniqueArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PasswordResetToken that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PasswordResetTokenFindUniqueOrThrowArgs} args - Arguments to find a PasswordResetToken
     * @example
     * // Get one PasswordResetToken
     * const passwordResetToken = await prisma.passwordResetToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PasswordResetTokenFindUniqueOrThrowArgs>(args: SelectSubset<T, PasswordResetTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PasswordResetToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetTokenFindFirstArgs} args - Arguments to find a PasswordResetToken
     * @example
     * // Get one PasswordResetToken
     * const passwordResetToken = await prisma.passwordResetToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PasswordResetTokenFindFirstArgs>(args?: SelectSubset<T, PasswordResetTokenFindFirstArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PasswordResetToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetTokenFindFirstOrThrowArgs} args - Arguments to find a PasswordResetToken
     * @example
     * // Get one PasswordResetToken
     * const passwordResetToken = await prisma.passwordResetToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PasswordResetTokenFindFirstOrThrowArgs>(args?: SelectSubset<T, PasswordResetTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PasswordResetTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PasswordResetTokens
     * const passwordResetTokens = await prisma.passwordResetToken.findMany()
     * 
     * // Get first 10 PasswordResetTokens
     * const passwordResetTokens = await prisma.passwordResetToken.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const passwordResetTokenWithIdOnly = await prisma.passwordResetToken.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PasswordResetTokenFindManyArgs>(args?: SelectSubset<T, PasswordResetTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PasswordResetToken.
     * @param {PasswordResetTokenCreateArgs} args - Arguments to create a PasswordResetToken.
     * @example
     * // Create one PasswordResetToken
     * const PasswordResetToken = await prisma.passwordResetToken.create({
     *   data: {
     *     // ... data to create a PasswordResetToken
     *   }
     * })
     * 
     */
    create<T extends PasswordResetTokenCreateArgs>(args: SelectSubset<T, PasswordResetTokenCreateArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PasswordResetTokens.
     * @param {PasswordResetTokenCreateManyArgs} args - Arguments to create many PasswordResetTokens.
     * @example
     * // Create many PasswordResetTokens
     * const passwordResetToken = await prisma.passwordResetToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PasswordResetTokenCreateManyArgs>(args?: SelectSubset<T, PasswordResetTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PasswordResetTokens and returns the data saved in the database.
     * @param {PasswordResetTokenCreateManyAndReturnArgs} args - Arguments to create many PasswordResetTokens.
     * @example
     * // Create many PasswordResetTokens
     * const passwordResetToken = await prisma.passwordResetToken.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PasswordResetTokens and only return the `id`
     * const passwordResetTokenWithIdOnly = await prisma.passwordResetToken.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PasswordResetTokenCreateManyAndReturnArgs>(args?: SelectSubset<T, PasswordResetTokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PasswordResetToken.
     * @param {PasswordResetTokenDeleteArgs} args - Arguments to delete one PasswordResetToken.
     * @example
     * // Delete one PasswordResetToken
     * const PasswordResetToken = await prisma.passwordResetToken.delete({
     *   where: {
     *     // ... filter to delete one PasswordResetToken
     *   }
     * })
     * 
     */
    delete<T extends PasswordResetTokenDeleteArgs>(args: SelectSubset<T, PasswordResetTokenDeleteArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PasswordResetToken.
     * @param {PasswordResetTokenUpdateArgs} args - Arguments to update one PasswordResetToken.
     * @example
     * // Update one PasswordResetToken
     * const passwordResetToken = await prisma.passwordResetToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PasswordResetTokenUpdateArgs>(args: SelectSubset<T, PasswordResetTokenUpdateArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PasswordResetTokens.
     * @param {PasswordResetTokenDeleteManyArgs} args - Arguments to filter PasswordResetTokens to delete.
     * @example
     * // Delete a few PasswordResetTokens
     * const { count } = await prisma.passwordResetToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PasswordResetTokenDeleteManyArgs>(args?: SelectSubset<T, PasswordResetTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PasswordResetTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PasswordResetTokens
     * const passwordResetToken = await prisma.passwordResetToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PasswordResetTokenUpdateManyArgs>(args: SelectSubset<T, PasswordResetTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PasswordResetTokens and returns the data updated in the database.
     * @param {PasswordResetTokenUpdateManyAndReturnArgs} args - Arguments to update many PasswordResetTokens.
     * @example
     * // Update many PasswordResetTokens
     * const passwordResetToken = await prisma.passwordResetToken.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PasswordResetTokens and only return the `id`
     * const passwordResetTokenWithIdOnly = await prisma.passwordResetToken.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PasswordResetTokenUpdateManyAndReturnArgs>(args: SelectSubset<T, PasswordResetTokenUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PasswordResetToken.
     * @param {PasswordResetTokenUpsertArgs} args - Arguments to update or create a PasswordResetToken.
     * @example
     * // Update or create a PasswordResetToken
     * const passwordResetToken = await prisma.passwordResetToken.upsert({
     *   create: {
     *     // ... data to create a PasswordResetToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PasswordResetToken we want to update
     *   }
     * })
     */
    upsert<T extends PasswordResetTokenUpsertArgs>(args: SelectSubset<T, PasswordResetTokenUpsertArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PasswordResetTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetTokenCountArgs} args - Arguments to filter PasswordResetTokens to count.
     * @example
     * // Count the number of PasswordResetTokens
     * const count = await prisma.passwordResetToken.count({
     *   where: {
     *     // ... the filter for the PasswordResetTokens we want to count
     *   }
     * })
    **/
    count<T extends PasswordResetTokenCountArgs>(
      args?: Subset<T, PasswordResetTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PasswordResetTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PasswordResetToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PasswordResetTokenAggregateArgs>(args: Subset<T, PasswordResetTokenAggregateArgs>): Prisma.PrismaPromise<GetPasswordResetTokenAggregateType<T>>

    /**
     * Group by PasswordResetToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PasswordResetTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PasswordResetTokenGroupByArgs['orderBy'] }
        : { orderBy?: PasswordResetTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PasswordResetTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPasswordResetTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PasswordResetToken model
   */
  readonly fields: PasswordResetTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PasswordResetToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PasswordResetTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PasswordResetToken model
   */
  interface PasswordResetTokenFieldRefs {
    readonly id: FieldRef<"PasswordResetToken", 'String'>
    readonly email: FieldRef<"PasswordResetToken", 'String'>
    readonly token: FieldRef<"PasswordResetToken", 'String'>
    readonly expires: FieldRef<"PasswordResetToken", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PasswordResetToken findUnique
   */
  export type PasswordResetTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Filter, which PasswordResetToken to fetch.
     */
    where: PasswordResetTokenWhereUniqueInput
  }

  /**
   * PasswordResetToken findUniqueOrThrow
   */
  export type PasswordResetTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Filter, which PasswordResetToken to fetch.
     */
    where: PasswordResetTokenWhereUniqueInput
  }

  /**
   * PasswordResetToken findFirst
   */
  export type PasswordResetTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Filter, which PasswordResetToken to fetch.
     */
    where?: PasswordResetTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResetTokens to fetch.
     */
    orderBy?: PasswordResetTokenOrderByWithRelationInput | PasswordResetTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PasswordResetTokens.
     */
    cursor?: PasswordResetTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResetTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResetTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PasswordResetTokens.
     */
    distinct?: PasswordResetTokenScalarFieldEnum | PasswordResetTokenScalarFieldEnum[]
  }

  /**
   * PasswordResetToken findFirstOrThrow
   */
  export type PasswordResetTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Filter, which PasswordResetToken to fetch.
     */
    where?: PasswordResetTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResetTokens to fetch.
     */
    orderBy?: PasswordResetTokenOrderByWithRelationInput | PasswordResetTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PasswordResetTokens.
     */
    cursor?: PasswordResetTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResetTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResetTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PasswordResetTokens.
     */
    distinct?: PasswordResetTokenScalarFieldEnum | PasswordResetTokenScalarFieldEnum[]
  }

  /**
   * PasswordResetToken findMany
   */
  export type PasswordResetTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Filter, which PasswordResetTokens to fetch.
     */
    where?: PasswordResetTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResetTokens to fetch.
     */
    orderBy?: PasswordResetTokenOrderByWithRelationInput | PasswordResetTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PasswordResetTokens.
     */
    cursor?: PasswordResetTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResetTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResetTokens.
     */
    skip?: number
    distinct?: PasswordResetTokenScalarFieldEnum | PasswordResetTokenScalarFieldEnum[]
  }

  /**
   * PasswordResetToken create
   */
  export type PasswordResetTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * The data needed to create a PasswordResetToken.
     */
    data: XOR<PasswordResetTokenCreateInput, PasswordResetTokenUncheckedCreateInput>
  }

  /**
   * PasswordResetToken createMany
   */
  export type PasswordResetTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PasswordResetTokens.
     */
    data: PasswordResetTokenCreateManyInput | PasswordResetTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PasswordResetToken createManyAndReturn
   */
  export type PasswordResetTokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * The data used to create many PasswordResetTokens.
     */
    data: PasswordResetTokenCreateManyInput | PasswordResetTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PasswordResetToken update
   */
  export type PasswordResetTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * The data needed to update a PasswordResetToken.
     */
    data: XOR<PasswordResetTokenUpdateInput, PasswordResetTokenUncheckedUpdateInput>
    /**
     * Choose, which PasswordResetToken to update.
     */
    where: PasswordResetTokenWhereUniqueInput
  }

  /**
   * PasswordResetToken updateMany
   */
  export type PasswordResetTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PasswordResetTokens.
     */
    data: XOR<PasswordResetTokenUpdateManyMutationInput, PasswordResetTokenUncheckedUpdateManyInput>
    /**
     * Filter which PasswordResetTokens to update
     */
    where?: PasswordResetTokenWhereInput
    /**
     * Limit how many PasswordResetTokens to update.
     */
    limit?: number
  }

  /**
   * PasswordResetToken updateManyAndReturn
   */
  export type PasswordResetTokenUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * The data used to update PasswordResetTokens.
     */
    data: XOR<PasswordResetTokenUpdateManyMutationInput, PasswordResetTokenUncheckedUpdateManyInput>
    /**
     * Filter which PasswordResetTokens to update
     */
    where?: PasswordResetTokenWhereInput
    /**
     * Limit how many PasswordResetTokens to update.
     */
    limit?: number
  }

  /**
   * PasswordResetToken upsert
   */
  export type PasswordResetTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * The filter to search for the PasswordResetToken to update in case it exists.
     */
    where: PasswordResetTokenWhereUniqueInput
    /**
     * In case the PasswordResetToken found by the `where` argument doesn't exist, create a new PasswordResetToken with this data.
     */
    create: XOR<PasswordResetTokenCreateInput, PasswordResetTokenUncheckedCreateInput>
    /**
     * In case the PasswordResetToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PasswordResetTokenUpdateInput, PasswordResetTokenUncheckedUpdateInput>
  }

  /**
   * PasswordResetToken delete
   */
  export type PasswordResetTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Filter which PasswordResetToken to delete.
     */
    where: PasswordResetTokenWhereUniqueInput
  }

  /**
   * PasswordResetToken deleteMany
   */
  export type PasswordResetTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PasswordResetTokens to delete
     */
    where?: PasswordResetTokenWhereInput
    /**
     * Limit how many PasswordResetTokens to delete.
     */
    limit?: number
  }

  /**
   * PasswordResetToken without action
   */
  export type PasswordResetTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
  }


  /**
   * Model Space
   */

  export type AggregateSpace = {
    _count: SpaceCountAggregateOutputType | null
    _min: SpaceMinAggregateOutputType | null
    _max: SpaceMaxAggregateOutputType | null
  }

  export type SpaceMinAggregateOutputType = {
    id: string | null
    name: string | null
    logo: string | null
    headerTitle: string | null
    headerSubtitle: string | null
    collectionType: $Enums.CollectionType | null
    collectStar: boolean | null
    isAnalysisEnabled: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    isPublished: boolean | null
  }

  export type SpaceMaxAggregateOutputType = {
    id: string | null
    name: string | null
    logo: string | null
    headerTitle: string | null
    headerSubtitle: string | null
    collectionType: $Enums.CollectionType | null
    collectStar: boolean | null
    isAnalysisEnabled: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    isPublished: boolean | null
  }

  export type SpaceCountAggregateOutputType = {
    id: number
    name: number
    logo: number
    headerTitle: number
    headerSubtitle: number
    collectionType: number
    collectStar: number
    isAnalysisEnabled: number
    createdAt: number
    updatedAt: number
    createdById: number
    isPublished: number
    _all: number
  }


  export type SpaceMinAggregateInputType = {
    id?: true
    name?: true
    logo?: true
    headerTitle?: true
    headerSubtitle?: true
    collectionType?: true
    collectStar?: true
    isAnalysisEnabled?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    isPublished?: true
  }

  export type SpaceMaxAggregateInputType = {
    id?: true
    name?: true
    logo?: true
    headerTitle?: true
    headerSubtitle?: true
    collectionType?: true
    collectStar?: true
    isAnalysisEnabled?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    isPublished?: true
  }

  export type SpaceCountAggregateInputType = {
    id?: true
    name?: true
    logo?: true
    headerTitle?: true
    headerSubtitle?: true
    collectionType?: true
    collectStar?: true
    isAnalysisEnabled?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    isPublished?: true
    _all?: true
  }

  export type SpaceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Space to aggregate.
     */
    where?: SpaceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Spaces to fetch.
     */
    orderBy?: SpaceOrderByWithRelationInput | SpaceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SpaceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Spaces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Spaces.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Spaces
    **/
    _count?: true | SpaceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SpaceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SpaceMaxAggregateInputType
  }

  export type GetSpaceAggregateType<T extends SpaceAggregateArgs> = {
        [P in keyof T & keyof AggregateSpace]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSpace[P]>
      : GetScalarType<T[P], AggregateSpace[P]>
  }




  export type SpaceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SpaceWhereInput
    orderBy?: SpaceOrderByWithAggregationInput | SpaceOrderByWithAggregationInput[]
    by: SpaceScalarFieldEnum[] | SpaceScalarFieldEnum
    having?: SpaceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SpaceCountAggregateInputType | true
    _min?: SpaceMinAggregateInputType
    _max?: SpaceMaxAggregateInputType
  }

  export type SpaceGroupByOutputType = {
    id: string
    name: string
    logo: string | null
    headerTitle: string
    headerSubtitle: string
    collectionType: $Enums.CollectionType
    collectStar: boolean
    isAnalysisEnabled: boolean
    createdAt: Date
    updatedAt: Date
    createdById: string
    isPublished: boolean
    _count: SpaceCountAggregateOutputType | null
    _min: SpaceMinAggregateOutputType | null
    _max: SpaceMaxAggregateOutputType | null
  }

  type GetSpaceGroupByPayload<T extends SpaceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SpaceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SpaceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SpaceGroupByOutputType[P]>
            : GetScalarType<T[P], SpaceGroupByOutputType[P]>
        }
      >
    >


  export type SpaceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    logo?: boolean
    headerTitle?: boolean
    headerSubtitle?: boolean
    collectionType?: boolean
    collectStar?: boolean
    isAnalysisEnabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    isPublished?: boolean
    questions?: boolean | Space$questionsArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    thankyouSpace?: boolean | Space$thankyouSpaceArgs<ExtArgs>
    feedbacks?: boolean | Space$feedbacksArgs<ExtArgs>
    DailyMetrics?: boolean | Space$DailyMetricsArgs<ExtArgs>
    RequestTestimonialMetrics?: boolean | Space$RequestTestimonialMetricsArgs<ExtArgs>
    WallOfLoveMetrics?: boolean | Space$WallOfLoveMetricsArgs<ExtArgs>
    _count?: boolean | SpaceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["space"]>

  export type SpaceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    logo?: boolean
    headerTitle?: boolean
    headerSubtitle?: boolean
    collectionType?: boolean
    collectStar?: boolean
    isAnalysisEnabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    isPublished?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["space"]>

  export type SpaceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    logo?: boolean
    headerTitle?: boolean
    headerSubtitle?: boolean
    collectionType?: boolean
    collectStar?: boolean
    isAnalysisEnabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    isPublished?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["space"]>

  export type SpaceSelectScalar = {
    id?: boolean
    name?: boolean
    logo?: boolean
    headerTitle?: boolean
    headerSubtitle?: boolean
    collectionType?: boolean
    collectStar?: boolean
    isAnalysisEnabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    isPublished?: boolean
  }

  export type SpaceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "logo" | "headerTitle" | "headerSubtitle" | "collectionType" | "collectStar" | "isAnalysisEnabled" | "createdAt" | "updatedAt" | "createdById" | "isPublished", ExtArgs["result"]["space"]>
  export type SpaceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questions?: boolean | Space$questionsArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    thankyouSpace?: boolean | Space$thankyouSpaceArgs<ExtArgs>
    feedbacks?: boolean | Space$feedbacksArgs<ExtArgs>
    DailyMetrics?: boolean | Space$DailyMetricsArgs<ExtArgs>
    RequestTestimonialMetrics?: boolean | Space$RequestTestimonialMetricsArgs<ExtArgs>
    WallOfLoveMetrics?: boolean | Space$WallOfLoveMetricsArgs<ExtArgs>
    _count?: boolean | SpaceCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SpaceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SpaceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SpacePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Space"
    objects: {
      questions: Prisma.$QuestionPayload<ExtArgs>[]
      createdBy: Prisma.$UserPayload<ExtArgs>
      thankyouSpace: Prisma.$ThankYouSpacePayload<ExtArgs> | null
      feedbacks: Prisma.$FeedbackPayload<ExtArgs>[]
      DailyMetrics: Prisma.$DailyMetricsPayload<ExtArgs>[]
      RequestTestimonialMetrics: Prisma.$RequestTestimonialMetricsPayload<ExtArgs>[]
      WallOfLoveMetrics: Prisma.$WallOfLoveMetricsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      logo: string | null
      headerTitle: string
      headerSubtitle: string
      collectionType: $Enums.CollectionType
      collectStar: boolean
      isAnalysisEnabled: boolean
      createdAt: Date
      updatedAt: Date
      createdById: string
      isPublished: boolean
    }, ExtArgs["result"]["space"]>
    composites: {}
  }

  type SpaceGetPayload<S extends boolean | null | undefined | SpaceDefaultArgs> = $Result.GetResult<Prisma.$SpacePayload, S>

  type SpaceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SpaceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SpaceCountAggregateInputType | true
    }

  export interface SpaceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Space'], meta: { name: 'Space' } }
    /**
     * Find zero or one Space that matches the filter.
     * @param {SpaceFindUniqueArgs} args - Arguments to find a Space
     * @example
     * // Get one Space
     * const space = await prisma.space.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SpaceFindUniqueArgs>(args: SelectSubset<T, SpaceFindUniqueArgs<ExtArgs>>): Prisma__SpaceClient<$Result.GetResult<Prisma.$SpacePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Space that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SpaceFindUniqueOrThrowArgs} args - Arguments to find a Space
     * @example
     * // Get one Space
     * const space = await prisma.space.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SpaceFindUniqueOrThrowArgs>(args: SelectSubset<T, SpaceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SpaceClient<$Result.GetResult<Prisma.$SpacePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Space that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpaceFindFirstArgs} args - Arguments to find a Space
     * @example
     * // Get one Space
     * const space = await prisma.space.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SpaceFindFirstArgs>(args?: SelectSubset<T, SpaceFindFirstArgs<ExtArgs>>): Prisma__SpaceClient<$Result.GetResult<Prisma.$SpacePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Space that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpaceFindFirstOrThrowArgs} args - Arguments to find a Space
     * @example
     * // Get one Space
     * const space = await prisma.space.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SpaceFindFirstOrThrowArgs>(args?: SelectSubset<T, SpaceFindFirstOrThrowArgs<ExtArgs>>): Prisma__SpaceClient<$Result.GetResult<Prisma.$SpacePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Spaces that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpaceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Spaces
     * const spaces = await prisma.space.findMany()
     * 
     * // Get first 10 Spaces
     * const spaces = await prisma.space.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const spaceWithIdOnly = await prisma.space.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SpaceFindManyArgs>(args?: SelectSubset<T, SpaceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpacePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Space.
     * @param {SpaceCreateArgs} args - Arguments to create a Space.
     * @example
     * // Create one Space
     * const Space = await prisma.space.create({
     *   data: {
     *     // ... data to create a Space
     *   }
     * })
     * 
     */
    create<T extends SpaceCreateArgs>(args: SelectSubset<T, SpaceCreateArgs<ExtArgs>>): Prisma__SpaceClient<$Result.GetResult<Prisma.$SpacePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Spaces.
     * @param {SpaceCreateManyArgs} args - Arguments to create many Spaces.
     * @example
     * // Create many Spaces
     * const space = await prisma.space.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SpaceCreateManyArgs>(args?: SelectSubset<T, SpaceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Spaces and returns the data saved in the database.
     * @param {SpaceCreateManyAndReturnArgs} args - Arguments to create many Spaces.
     * @example
     * // Create many Spaces
     * const space = await prisma.space.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Spaces and only return the `id`
     * const spaceWithIdOnly = await prisma.space.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SpaceCreateManyAndReturnArgs>(args?: SelectSubset<T, SpaceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpacePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Space.
     * @param {SpaceDeleteArgs} args - Arguments to delete one Space.
     * @example
     * // Delete one Space
     * const Space = await prisma.space.delete({
     *   where: {
     *     // ... filter to delete one Space
     *   }
     * })
     * 
     */
    delete<T extends SpaceDeleteArgs>(args: SelectSubset<T, SpaceDeleteArgs<ExtArgs>>): Prisma__SpaceClient<$Result.GetResult<Prisma.$SpacePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Space.
     * @param {SpaceUpdateArgs} args - Arguments to update one Space.
     * @example
     * // Update one Space
     * const space = await prisma.space.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SpaceUpdateArgs>(args: SelectSubset<T, SpaceUpdateArgs<ExtArgs>>): Prisma__SpaceClient<$Result.GetResult<Prisma.$SpacePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Spaces.
     * @param {SpaceDeleteManyArgs} args - Arguments to filter Spaces to delete.
     * @example
     * // Delete a few Spaces
     * const { count } = await prisma.space.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SpaceDeleteManyArgs>(args?: SelectSubset<T, SpaceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Spaces.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpaceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Spaces
     * const space = await prisma.space.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SpaceUpdateManyArgs>(args: SelectSubset<T, SpaceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Spaces and returns the data updated in the database.
     * @param {SpaceUpdateManyAndReturnArgs} args - Arguments to update many Spaces.
     * @example
     * // Update many Spaces
     * const space = await prisma.space.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Spaces and only return the `id`
     * const spaceWithIdOnly = await prisma.space.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SpaceUpdateManyAndReturnArgs>(args: SelectSubset<T, SpaceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpacePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Space.
     * @param {SpaceUpsertArgs} args - Arguments to update or create a Space.
     * @example
     * // Update or create a Space
     * const space = await prisma.space.upsert({
     *   create: {
     *     // ... data to create a Space
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Space we want to update
     *   }
     * })
     */
    upsert<T extends SpaceUpsertArgs>(args: SelectSubset<T, SpaceUpsertArgs<ExtArgs>>): Prisma__SpaceClient<$Result.GetResult<Prisma.$SpacePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Spaces.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpaceCountArgs} args - Arguments to filter Spaces to count.
     * @example
     * // Count the number of Spaces
     * const count = await prisma.space.count({
     *   where: {
     *     // ... the filter for the Spaces we want to count
     *   }
     * })
    **/
    count<T extends SpaceCountArgs>(
      args?: Subset<T, SpaceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SpaceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Space.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpaceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SpaceAggregateArgs>(args: Subset<T, SpaceAggregateArgs>): Prisma.PrismaPromise<GetSpaceAggregateType<T>>

    /**
     * Group by Space.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpaceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SpaceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SpaceGroupByArgs['orderBy'] }
        : { orderBy?: SpaceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SpaceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSpaceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Space model
   */
  readonly fields: SpaceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Space.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SpaceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    questions<T extends Space$questionsArgs<ExtArgs> = {}>(args?: Subset<T, Space$questionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    thankyouSpace<T extends Space$thankyouSpaceArgs<ExtArgs> = {}>(args?: Subset<T, Space$thankyouSpaceArgs<ExtArgs>>): Prisma__ThankYouSpaceClient<$Result.GetResult<Prisma.$ThankYouSpacePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    feedbacks<T extends Space$feedbacksArgs<ExtArgs> = {}>(args?: Subset<T, Space$feedbacksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    DailyMetrics<T extends Space$DailyMetricsArgs<ExtArgs> = {}>(args?: Subset<T, Space$DailyMetricsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DailyMetricsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    RequestTestimonialMetrics<T extends Space$RequestTestimonialMetricsArgs<ExtArgs> = {}>(args?: Subset<T, Space$RequestTestimonialMetricsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestTestimonialMetricsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    WallOfLoveMetrics<T extends Space$WallOfLoveMetricsArgs<ExtArgs> = {}>(args?: Subset<T, Space$WallOfLoveMetricsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WallOfLoveMetricsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Space model
   */
  interface SpaceFieldRefs {
    readonly id: FieldRef<"Space", 'String'>
    readonly name: FieldRef<"Space", 'String'>
    readonly logo: FieldRef<"Space", 'String'>
    readonly headerTitle: FieldRef<"Space", 'String'>
    readonly headerSubtitle: FieldRef<"Space", 'String'>
    readonly collectionType: FieldRef<"Space", 'CollectionType'>
    readonly collectStar: FieldRef<"Space", 'Boolean'>
    readonly isAnalysisEnabled: FieldRef<"Space", 'Boolean'>
    readonly createdAt: FieldRef<"Space", 'DateTime'>
    readonly updatedAt: FieldRef<"Space", 'DateTime'>
    readonly createdById: FieldRef<"Space", 'String'>
    readonly isPublished: FieldRef<"Space", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Space findUnique
   */
  export type SpaceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Space
     */
    select?: SpaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Space
     */
    omit?: SpaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpaceInclude<ExtArgs> | null
    /**
     * Filter, which Space to fetch.
     */
    where: SpaceWhereUniqueInput
  }

  /**
   * Space findUniqueOrThrow
   */
  export type SpaceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Space
     */
    select?: SpaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Space
     */
    omit?: SpaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpaceInclude<ExtArgs> | null
    /**
     * Filter, which Space to fetch.
     */
    where: SpaceWhereUniqueInput
  }

  /**
   * Space findFirst
   */
  export type SpaceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Space
     */
    select?: SpaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Space
     */
    omit?: SpaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpaceInclude<ExtArgs> | null
    /**
     * Filter, which Space to fetch.
     */
    where?: SpaceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Spaces to fetch.
     */
    orderBy?: SpaceOrderByWithRelationInput | SpaceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Spaces.
     */
    cursor?: SpaceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Spaces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Spaces.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Spaces.
     */
    distinct?: SpaceScalarFieldEnum | SpaceScalarFieldEnum[]
  }

  /**
   * Space findFirstOrThrow
   */
  export type SpaceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Space
     */
    select?: SpaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Space
     */
    omit?: SpaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpaceInclude<ExtArgs> | null
    /**
     * Filter, which Space to fetch.
     */
    where?: SpaceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Spaces to fetch.
     */
    orderBy?: SpaceOrderByWithRelationInput | SpaceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Spaces.
     */
    cursor?: SpaceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Spaces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Spaces.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Spaces.
     */
    distinct?: SpaceScalarFieldEnum | SpaceScalarFieldEnum[]
  }

  /**
   * Space findMany
   */
  export type SpaceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Space
     */
    select?: SpaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Space
     */
    omit?: SpaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpaceInclude<ExtArgs> | null
    /**
     * Filter, which Spaces to fetch.
     */
    where?: SpaceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Spaces to fetch.
     */
    orderBy?: SpaceOrderByWithRelationInput | SpaceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Spaces.
     */
    cursor?: SpaceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Spaces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Spaces.
     */
    skip?: number
    distinct?: SpaceScalarFieldEnum | SpaceScalarFieldEnum[]
  }

  /**
   * Space create
   */
  export type SpaceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Space
     */
    select?: SpaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Space
     */
    omit?: SpaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpaceInclude<ExtArgs> | null
    /**
     * The data needed to create a Space.
     */
    data: XOR<SpaceCreateInput, SpaceUncheckedCreateInput>
  }

  /**
   * Space createMany
   */
  export type SpaceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Spaces.
     */
    data: SpaceCreateManyInput | SpaceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Space createManyAndReturn
   */
  export type SpaceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Space
     */
    select?: SpaceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Space
     */
    omit?: SpaceOmit<ExtArgs> | null
    /**
     * The data used to create many Spaces.
     */
    data: SpaceCreateManyInput | SpaceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpaceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Space update
   */
  export type SpaceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Space
     */
    select?: SpaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Space
     */
    omit?: SpaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpaceInclude<ExtArgs> | null
    /**
     * The data needed to update a Space.
     */
    data: XOR<SpaceUpdateInput, SpaceUncheckedUpdateInput>
    /**
     * Choose, which Space to update.
     */
    where: SpaceWhereUniqueInput
  }

  /**
   * Space updateMany
   */
  export type SpaceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Spaces.
     */
    data: XOR<SpaceUpdateManyMutationInput, SpaceUncheckedUpdateManyInput>
    /**
     * Filter which Spaces to update
     */
    where?: SpaceWhereInput
    /**
     * Limit how many Spaces to update.
     */
    limit?: number
  }

  /**
   * Space updateManyAndReturn
   */
  export type SpaceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Space
     */
    select?: SpaceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Space
     */
    omit?: SpaceOmit<ExtArgs> | null
    /**
     * The data used to update Spaces.
     */
    data: XOR<SpaceUpdateManyMutationInput, SpaceUncheckedUpdateManyInput>
    /**
     * Filter which Spaces to update
     */
    where?: SpaceWhereInput
    /**
     * Limit how many Spaces to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpaceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Space upsert
   */
  export type SpaceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Space
     */
    select?: SpaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Space
     */
    omit?: SpaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpaceInclude<ExtArgs> | null
    /**
     * The filter to search for the Space to update in case it exists.
     */
    where: SpaceWhereUniqueInput
    /**
     * In case the Space found by the `where` argument doesn't exist, create a new Space with this data.
     */
    create: XOR<SpaceCreateInput, SpaceUncheckedCreateInput>
    /**
     * In case the Space was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SpaceUpdateInput, SpaceUncheckedUpdateInput>
  }

  /**
   * Space delete
   */
  export type SpaceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Space
     */
    select?: SpaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Space
     */
    omit?: SpaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpaceInclude<ExtArgs> | null
    /**
     * Filter which Space to delete.
     */
    where: SpaceWhereUniqueInput
  }

  /**
   * Space deleteMany
   */
  export type SpaceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Spaces to delete
     */
    where?: SpaceWhereInput
    /**
     * Limit how many Spaces to delete.
     */
    limit?: number
  }

  /**
   * Space.questions
   */
  export type Space$questionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    where?: QuestionWhereInput
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    cursor?: QuestionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Space.thankyouSpace
   */
  export type Space$thankyouSpaceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThankYouSpace
     */
    select?: ThankYouSpaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ThankYouSpace
     */
    omit?: ThankYouSpaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThankYouSpaceInclude<ExtArgs> | null
    where?: ThankYouSpaceWhereInput
  }

  /**
   * Space.feedbacks
   */
  export type Space$feedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    cursor?: FeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Space.DailyMetrics
   */
  export type Space$DailyMetricsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyMetrics
     */
    select?: DailyMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyMetrics
     */
    omit?: DailyMetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyMetricsInclude<ExtArgs> | null
    where?: DailyMetricsWhereInput
    orderBy?: DailyMetricsOrderByWithRelationInput | DailyMetricsOrderByWithRelationInput[]
    cursor?: DailyMetricsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DailyMetricsScalarFieldEnum | DailyMetricsScalarFieldEnum[]
  }

  /**
   * Space.RequestTestimonialMetrics
   */
  export type Space$RequestTestimonialMetricsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestTestimonialMetrics
     */
    select?: RequestTestimonialMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestTestimonialMetrics
     */
    omit?: RequestTestimonialMetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestTestimonialMetricsInclude<ExtArgs> | null
    where?: RequestTestimonialMetricsWhereInput
    orderBy?: RequestTestimonialMetricsOrderByWithRelationInput | RequestTestimonialMetricsOrderByWithRelationInput[]
    cursor?: RequestTestimonialMetricsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RequestTestimonialMetricsScalarFieldEnum | RequestTestimonialMetricsScalarFieldEnum[]
  }

  /**
   * Space.WallOfLoveMetrics
   */
  export type Space$WallOfLoveMetricsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WallOfLoveMetrics
     */
    select?: WallOfLoveMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WallOfLoveMetrics
     */
    omit?: WallOfLoveMetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WallOfLoveMetricsInclude<ExtArgs> | null
    where?: WallOfLoveMetricsWhereInput
    orderBy?: WallOfLoveMetricsOrderByWithRelationInput | WallOfLoveMetricsOrderByWithRelationInput[]
    cursor?: WallOfLoveMetricsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WallOfLoveMetricsScalarFieldEnum | WallOfLoveMetricsScalarFieldEnum[]
  }

  /**
   * Space without action
   */
  export type SpaceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Space
     */
    select?: SpaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Space
     */
    omit?: SpaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpaceInclude<ExtArgs> | null
  }


  /**
   * Model Question
   */

  export type AggregateQuestion = {
    _count: QuestionCountAggregateOutputType | null
    _avg: QuestionAvgAggregateOutputType | null
    _sum: QuestionSumAggregateOutputType | null
    _min: QuestionMinAggregateOutputType | null
    _max: QuestionMaxAggregateOutputType | null
  }

  export type QuestionAvgAggregateOutputType = {
    order: number | null
  }

  export type QuestionSumAggregateOutputType = {
    order: number | null
  }

  export type QuestionMinAggregateOutputType = {
    id: string | null
    spaceId: string | null
    title: string | null
    order: number | null
  }

  export type QuestionMaxAggregateOutputType = {
    id: string | null
    spaceId: string | null
    title: string | null
    order: number | null
  }

  export type QuestionCountAggregateOutputType = {
    id: number
    spaceId: number
    title: number
    order: number
    _all: number
  }


  export type QuestionAvgAggregateInputType = {
    order?: true
  }

  export type QuestionSumAggregateInputType = {
    order?: true
  }

  export type QuestionMinAggregateInputType = {
    id?: true
    spaceId?: true
    title?: true
    order?: true
  }

  export type QuestionMaxAggregateInputType = {
    id?: true
    spaceId?: true
    title?: true
    order?: true
  }

  export type QuestionCountAggregateInputType = {
    id?: true
    spaceId?: true
    title?: true
    order?: true
    _all?: true
  }

  export type QuestionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Question to aggregate.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Questions
    **/
    _count?: true | QuestionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuestionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuestionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionMaxAggregateInputType
  }

  export type GetQuestionAggregateType<T extends QuestionAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestion[P]>
      : GetScalarType<T[P], AggregateQuestion[P]>
  }




  export type QuestionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionWhereInput
    orderBy?: QuestionOrderByWithAggregationInput | QuestionOrderByWithAggregationInput[]
    by: QuestionScalarFieldEnum[] | QuestionScalarFieldEnum
    having?: QuestionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionCountAggregateInputType | true
    _avg?: QuestionAvgAggregateInputType
    _sum?: QuestionSumAggregateInputType
    _min?: QuestionMinAggregateInputType
    _max?: QuestionMaxAggregateInputType
  }

  export type QuestionGroupByOutputType = {
    id: string
    spaceId: string
    title: string
    order: number
    _count: QuestionCountAggregateOutputType | null
    _avg: QuestionAvgAggregateOutputType | null
    _sum: QuestionSumAggregateOutputType | null
    _min: QuestionMinAggregateOutputType | null
    _max: QuestionMaxAggregateOutputType | null
  }

  type GetQuestionGroupByPayload<T extends QuestionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionGroupByOutputType[P]>
        }
      >
    >


  export type QuestionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    spaceId?: boolean
    title?: boolean
    order?: boolean
    space?: boolean | SpaceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["question"]>

  export type QuestionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    spaceId?: boolean
    title?: boolean
    order?: boolean
    space?: boolean | SpaceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["question"]>

  export type QuestionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    spaceId?: boolean
    title?: boolean
    order?: boolean
    space?: boolean | SpaceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["question"]>

  export type QuestionSelectScalar = {
    id?: boolean
    spaceId?: boolean
    title?: boolean
    order?: boolean
  }

  export type QuestionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "spaceId" | "title" | "order", ExtArgs["result"]["question"]>
  export type QuestionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    space?: boolean | SpaceDefaultArgs<ExtArgs>
  }
  export type QuestionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    space?: boolean | SpaceDefaultArgs<ExtArgs>
  }
  export type QuestionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    space?: boolean | SpaceDefaultArgs<ExtArgs>
  }

  export type $QuestionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Question"
    objects: {
      space: Prisma.$SpacePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      spaceId: string
      title: string
      order: number
    }, ExtArgs["result"]["question"]>
    composites: {}
  }

  type QuestionGetPayload<S extends boolean | null | undefined | QuestionDefaultArgs> = $Result.GetResult<Prisma.$QuestionPayload, S>

  type QuestionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<QuestionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: QuestionCountAggregateInputType | true
    }

  export interface QuestionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Question'], meta: { name: 'Question' } }
    /**
     * Find zero or one Question that matches the filter.
     * @param {QuestionFindUniqueArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuestionFindUniqueArgs>(args: SelectSubset<T, QuestionFindUniqueArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Question that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {QuestionFindUniqueOrThrowArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuestionFindUniqueOrThrowArgs>(args: SelectSubset<T, QuestionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Question that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindFirstArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuestionFindFirstArgs>(args?: SelectSubset<T, QuestionFindFirstArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Question that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindFirstOrThrowArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuestionFindFirstOrThrowArgs>(args?: SelectSubset<T, QuestionFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Questions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Questions
     * const questions = await prisma.question.findMany()
     * 
     * // Get first 10 Questions
     * const questions = await prisma.question.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const questionWithIdOnly = await prisma.question.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QuestionFindManyArgs>(args?: SelectSubset<T, QuestionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Question.
     * @param {QuestionCreateArgs} args - Arguments to create a Question.
     * @example
     * // Create one Question
     * const Question = await prisma.question.create({
     *   data: {
     *     // ... data to create a Question
     *   }
     * })
     * 
     */
    create<T extends QuestionCreateArgs>(args: SelectSubset<T, QuestionCreateArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Questions.
     * @param {QuestionCreateManyArgs} args - Arguments to create many Questions.
     * @example
     * // Create many Questions
     * const question = await prisma.question.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuestionCreateManyArgs>(args?: SelectSubset<T, QuestionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Questions and returns the data saved in the database.
     * @param {QuestionCreateManyAndReturnArgs} args - Arguments to create many Questions.
     * @example
     * // Create many Questions
     * const question = await prisma.question.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Questions and only return the `id`
     * const questionWithIdOnly = await prisma.question.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QuestionCreateManyAndReturnArgs>(args?: SelectSubset<T, QuestionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Question.
     * @param {QuestionDeleteArgs} args - Arguments to delete one Question.
     * @example
     * // Delete one Question
     * const Question = await prisma.question.delete({
     *   where: {
     *     // ... filter to delete one Question
     *   }
     * })
     * 
     */
    delete<T extends QuestionDeleteArgs>(args: SelectSubset<T, QuestionDeleteArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Question.
     * @param {QuestionUpdateArgs} args - Arguments to update one Question.
     * @example
     * // Update one Question
     * const question = await prisma.question.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuestionUpdateArgs>(args: SelectSubset<T, QuestionUpdateArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Questions.
     * @param {QuestionDeleteManyArgs} args - Arguments to filter Questions to delete.
     * @example
     * // Delete a few Questions
     * const { count } = await prisma.question.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuestionDeleteManyArgs>(args?: SelectSubset<T, QuestionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Questions
     * const question = await prisma.question.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuestionUpdateManyArgs>(args: SelectSubset<T, QuestionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Questions and returns the data updated in the database.
     * @param {QuestionUpdateManyAndReturnArgs} args - Arguments to update many Questions.
     * @example
     * // Update many Questions
     * const question = await prisma.question.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Questions and only return the `id`
     * const questionWithIdOnly = await prisma.question.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends QuestionUpdateManyAndReturnArgs>(args: SelectSubset<T, QuestionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Question.
     * @param {QuestionUpsertArgs} args - Arguments to update or create a Question.
     * @example
     * // Update or create a Question
     * const question = await prisma.question.upsert({
     *   create: {
     *     // ... data to create a Question
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Question we want to update
     *   }
     * })
     */
    upsert<T extends QuestionUpsertArgs>(args: SelectSubset<T, QuestionUpsertArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionCountArgs} args - Arguments to filter Questions to count.
     * @example
     * // Count the number of Questions
     * const count = await prisma.question.count({
     *   where: {
     *     // ... the filter for the Questions we want to count
     *   }
     * })
    **/
    count<T extends QuestionCountArgs>(
      args?: Subset<T, QuestionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionAggregateArgs>(args: Subset<T, QuestionAggregateArgs>): Prisma.PrismaPromise<GetQuestionAggregateType<T>>

    /**
     * Group by Question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuestionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuestionGroupByArgs['orderBy'] }
        : { orderBy?: QuestionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuestionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Question model
   */
  readonly fields: QuestionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Question.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuestionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    space<T extends SpaceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SpaceDefaultArgs<ExtArgs>>): Prisma__SpaceClient<$Result.GetResult<Prisma.$SpacePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Question model
   */
  interface QuestionFieldRefs {
    readonly id: FieldRef<"Question", 'String'>
    readonly spaceId: FieldRef<"Question", 'String'>
    readonly title: FieldRef<"Question", 'String'>
    readonly order: FieldRef<"Question", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Question findUnique
   */
  export type QuestionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question findUniqueOrThrow
   */
  export type QuestionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question findFirst
   */
  export type QuestionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Questions.
     */
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Question findFirstOrThrow
   */
  export type QuestionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Questions.
     */
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Question findMany
   */
  export type QuestionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Questions to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Question create
   */
  export type QuestionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * The data needed to create a Question.
     */
    data: XOR<QuestionCreateInput, QuestionUncheckedCreateInput>
  }

  /**
   * Question createMany
   */
  export type QuestionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Questions.
     */
    data: QuestionCreateManyInput | QuestionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Question createManyAndReturn
   */
  export type QuestionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * The data used to create many Questions.
     */
    data: QuestionCreateManyInput | QuestionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Question update
   */
  export type QuestionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * The data needed to update a Question.
     */
    data: XOR<QuestionUpdateInput, QuestionUncheckedUpdateInput>
    /**
     * Choose, which Question to update.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question updateMany
   */
  export type QuestionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Questions.
     */
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyInput>
    /**
     * Filter which Questions to update
     */
    where?: QuestionWhereInput
    /**
     * Limit how many Questions to update.
     */
    limit?: number
  }

  /**
   * Question updateManyAndReturn
   */
  export type QuestionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * The data used to update Questions.
     */
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyInput>
    /**
     * Filter which Questions to update
     */
    where?: QuestionWhereInput
    /**
     * Limit how many Questions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Question upsert
   */
  export type QuestionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * The filter to search for the Question to update in case it exists.
     */
    where: QuestionWhereUniqueInput
    /**
     * In case the Question found by the `where` argument doesn't exist, create a new Question with this data.
     */
    create: XOR<QuestionCreateInput, QuestionUncheckedCreateInput>
    /**
     * In case the Question was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuestionUpdateInput, QuestionUncheckedUpdateInput>
  }

  /**
   * Question delete
   */
  export type QuestionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter which Question to delete.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question deleteMany
   */
  export type QuestionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Questions to delete
     */
    where?: QuestionWhereInput
    /**
     * Limit how many Questions to delete.
     */
    limit?: number
  }

  /**
   * Question without action
   */
  export type QuestionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
  }


  /**
   * Model Theme
   */

  export type AggregateTheme = {
    _count: ThemeCountAggregateOutputType | null
    _min: ThemeMinAggregateOutputType | null
    _max: ThemeMaxAggregateOutputType | null
  }

  export type ThemeMinAggregateOutputType = {
    id: string | null
    name: string | null
    primaryColor: string | null
    secondaryColor: string | null
    tertiaryColor: string | null
    quaternaryColor: string | null
    quinaryColor: string | null
    senaryColor: string | null
    septenaryColor: string | null
    octonaryColor: string | null
    nonaryColor: string | null
    denaryColor: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ThemeMaxAggregateOutputType = {
    id: string | null
    name: string | null
    primaryColor: string | null
    secondaryColor: string | null
    tertiaryColor: string | null
    quaternaryColor: string | null
    quinaryColor: string | null
    senaryColor: string | null
    septenaryColor: string | null
    octonaryColor: string | null
    nonaryColor: string | null
    denaryColor: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ThemeCountAggregateOutputType = {
    id: number
    name: number
    primaryColor: number
    secondaryColor: number
    tertiaryColor: number
    quaternaryColor: number
    quinaryColor: number
    senaryColor: number
    septenaryColor: number
    octonaryColor: number
    nonaryColor: number
    denaryColor: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ThemeMinAggregateInputType = {
    id?: true
    name?: true
    primaryColor?: true
    secondaryColor?: true
    tertiaryColor?: true
    quaternaryColor?: true
    quinaryColor?: true
    senaryColor?: true
    septenaryColor?: true
    octonaryColor?: true
    nonaryColor?: true
    denaryColor?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ThemeMaxAggregateInputType = {
    id?: true
    name?: true
    primaryColor?: true
    secondaryColor?: true
    tertiaryColor?: true
    quaternaryColor?: true
    quinaryColor?: true
    senaryColor?: true
    septenaryColor?: true
    octonaryColor?: true
    nonaryColor?: true
    denaryColor?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ThemeCountAggregateInputType = {
    id?: true
    name?: true
    primaryColor?: true
    secondaryColor?: true
    tertiaryColor?: true
    quaternaryColor?: true
    quinaryColor?: true
    senaryColor?: true
    septenaryColor?: true
    octonaryColor?: true
    nonaryColor?: true
    denaryColor?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ThemeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Theme to aggregate.
     */
    where?: ThemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Themes to fetch.
     */
    orderBy?: ThemeOrderByWithRelationInput | ThemeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ThemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Themes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Themes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Themes
    **/
    _count?: true | ThemeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ThemeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ThemeMaxAggregateInputType
  }

  export type GetThemeAggregateType<T extends ThemeAggregateArgs> = {
        [P in keyof T & keyof AggregateTheme]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTheme[P]>
      : GetScalarType<T[P], AggregateTheme[P]>
  }




  export type ThemeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ThemeWhereInput
    orderBy?: ThemeOrderByWithAggregationInput | ThemeOrderByWithAggregationInput[]
    by: ThemeScalarFieldEnum[] | ThemeScalarFieldEnum
    having?: ThemeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ThemeCountAggregateInputType | true
    _min?: ThemeMinAggregateInputType
    _max?: ThemeMaxAggregateInputType
  }

  export type ThemeGroupByOutputType = {
    id: string
    name: string
    primaryColor: string
    secondaryColor: string
    tertiaryColor: string
    quaternaryColor: string
    quinaryColor: string
    senaryColor: string
    septenaryColor: string
    octonaryColor: string
    nonaryColor: string
    denaryColor: string
    createdAt: Date
    updatedAt: Date
    _count: ThemeCountAggregateOutputType | null
    _min: ThemeMinAggregateOutputType | null
    _max: ThemeMaxAggregateOutputType | null
  }

  type GetThemeGroupByPayload<T extends ThemeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ThemeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ThemeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ThemeGroupByOutputType[P]>
            : GetScalarType<T[P], ThemeGroupByOutputType[P]>
        }
      >
    >


  export type ThemeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    primaryColor?: boolean
    secondaryColor?: boolean
    tertiaryColor?: boolean
    quaternaryColor?: boolean
    quinaryColor?: boolean
    senaryColor?: boolean
    septenaryColor?: boolean
    octonaryColor?: boolean
    nonaryColor?: boolean
    denaryColor?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["theme"]>

  export type ThemeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    primaryColor?: boolean
    secondaryColor?: boolean
    tertiaryColor?: boolean
    quaternaryColor?: boolean
    quinaryColor?: boolean
    senaryColor?: boolean
    septenaryColor?: boolean
    octonaryColor?: boolean
    nonaryColor?: boolean
    denaryColor?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["theme"]>

  export type ThemeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    primaryColor?: boolean
    secondaryColor?: boolean
    tertiaryColor?: boolean
    quaternaryColor?: boolean
    quinaryColor?: boolean
    senaryColor?: boolean
    septenaryColor?: boolean
    octonaryColor?: boolean
    nonaryColor?: boolean
    denaryColor?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["theme"]>

  export type ThemeSelectScalar = {
    id?: boolean
    name?: boolean
    primaryColor?: boolean
    secondaryColor?: boolean
    tertiaryColor?: boolean
    quaternaryColor?: boolean
    quinaryColor?: boolean
    senaryColor?: boolean
    septenaryColor?: boolean
    octonaryColor?: boolean
    nonaryColor?: boolean
    denaryColor?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ThemeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "primaryColor" | "secondaryColor" | "tertiaryColor" | "quaternaryColor" | "quinaryColor" | "senaryColor" | "septenaryColor" | "octonaryColor" | "nonaryColor" | "denaryColor" | "createdAt" | "updatedAt", ExtArgs["result"]["theme"]>

  export type $ThemePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Theme"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      primaryColor: string
      secondaryColor: string
      tertiaryColor: string
      quaternaryColor: string
      quinaryColor: string
      senaryColor: string
      septenaryColor: string
      octonaryColor: string
      nonaryColor: string
      denaryColor: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["theme"]>
    composites: {}
  }

  type ThemeGetPayload<S extends boolean | null | undefined | ThemeDefaultArgs> = $Result.GetResult<Prisma.$ThemePayload, S>

  type ThemeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ThemeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ThemeCountAggregateInputType | true
    }

  export interface ThemeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Theme'], meta: { name: 'Theme' } }
    /**
     * Find zero or one Theme that matches the filter.
     * @param {ThemeFindUniqueArgs} args - Arguments to find a Theme
     * @example
     * // Get one Theme
     * const theme = await prisma.theme.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ThemeFindUniqueArgs>(args: SelectSubset<T, ThemeFindUniqueArgs<ExtArgs>>): Prisma__ThemeClient<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Theme that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ThemeFindUniqueOrThrowArgs} args - Arguments to find a Theme
     * @example
     * // Get one Theme
     * const theme = await prisma.theme.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ThemeFindUniqueOrThrowArgs>(args: SelectSubset<T, ThemeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ThemeClient<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Theme that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeFindFirstArgs} args - Arguments to find a Theme
     * @example
     * // Get one Theme
     * const theme = await prisma.theme.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ThemeFindFirstArgs>(args?: SelectSubset<T, ThemeFindFirstArgs<ExtArgs>>): Prisma__ThemeClient<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Theme that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeFindFirstOrThrowArgs} args - Arguments to find a Theme
     * @example
     * // Get one Theme
     * const theme = await prisma.theme.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ThemeFindFirstOrThrowArgs>(args?: SelectSubset<T, ThemeFindFirstOrThrowArgs<ExtArgs>>): Prisma__ThemeClient<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Themes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Themes
     * const themes = await prisma.theme.findMany()
     * 
     * // Get first 10 Themes
     * const themes = await prisma.theme.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const themeWithIdOnly = await prisma.theme.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ThemeFindManyArgs>(args?: SelectSubset<T, ThemeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Theme.
     * @param {ThemeCreateArgs} args - Arguments to create a Theme.
     * @example
     * // Create one Theme
     * const Theme = await prisma.theme.create({
     *   data: {
     *     // ... data to create a Theme
     *   }
     * })
     * 
     */
    create<T extends ThemeCreateArgs>(args: SelectSubset<T, ThemeCreateArgs<ExtArgs>>): Prisma__ThemeClient<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Themes.
     * @param {ThemeCreateManyArgs} args - Arguments to create many Themes.
     * @example
     * // Create many Themes
     * const theme = await prisma.theme.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ThemeCreateManyArgs>(args?: SelectSubset<T, ThemeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Themes and returns the data saved in the database.
     * @param {ThemeCreateManyAndReturnArgs} args - Arguments to create many Themes.
     * @example
     * // Create many Themes
     * const theme = await prisma.theme.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Themes and only return the `id`
     * const themeWithIdOnly = await prisma.theme.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ThemeCreateManyAndReturnArgs>(args?: SelectSubset<T, ThemeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Theme.
     * @param {ThemeDeleteArgs} args - Arguments to delete one Theme.
     * @example
     * // Delete one Theme
     * const Theme = await prisma.theme.delete({
     *   where: {
     *     // ... filter to delete one Theme
     *   }
     * })
     * 
     */
    delete<T extends ThemeDeleteArgs>(args: SelectSubset<T, ThemeDeleteArgs<ExtArgs>>): Prisma__ThemeClient<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Theme.
     * @param {ThemeUpdateArgs} args - Arguments to update one Theme.
     * @example
     * // Update one Theme
     * const theme = await prisma.theme.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ThemeUpdateArgs>(args: SelectSubset<T, ThemeUpdateArgs<ExtArgs>>): Prisma__ThemeClient<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Themes.
     * @param {ThemeDeleteManyArgs} args - Arguments to filter Themes to delete.
     * @example
     * // Delete a few Themes
     * const { count } = await prisma.theme.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ThemeDeleteManyArgs>(args?: SelectSubset<T, ThemeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Themes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Themes
     * const theme = await prisma.theme.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ThemeUpdateManyArgs>(args: SelectSubset<T, ThemeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Themes and returns the data updated in the database.
     * @param {ThemeUpdateManyAndReturnArgs} args - Arguments to update many Themes.
     * @example
     * // Update many Themes
     * const theme = await prisma.theme.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Themes and only return the `id`
     * const themeWithIdOnly = await prisma.theme.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ThemeUpdateManyAndReturnArgs>(args: SelectSubset<T, ThemeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Theme.
     * @param {ThemeUpsertArgs} args - Arguments to update or create a Theme.
     * @example
     * // Update or create a Theme
     * const theme = await prisma.theme.upsert({
     *   create: {
     *     // ... data to create a Theme
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Theme we want to update
     *   }
     * })
     */
    upsert<T extends ThemeUpsertArgs>(args: SelectSubset<T, ThemeUpsertArgs<ExtArgs>>): Prisma__ThemeClient<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Themes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeCountArgs} args - Arguments to filter Themes to count.
     * @example
     * // Count the number of Themes
     * const count = await prisma.theme.count({
     *   where: {
     *     // ... the filter for the Themes we want to count
     *   }
     * })
    **/
    count<T extends ThemeCountArgs>(
      args?: Subset<T, ThemeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ThemeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Theme.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ThemeAggregateArgs>(args: Subset<T, ThemeAggregateArgs>): Prisma.PrismaPromise<GetThemeAggregateType<T>>

    /**
     * Group by Theme.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ThemeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ThemeGroupByArgs['orderBy'] }
        : { orderBy?: ThemeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ThemeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetThemeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Theme model
   */
  readonly fields: ThemeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Theme.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ThemeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Theme model
   */
  interface ThemeFieldRefs {
    readonly id: FieldRef<"Theme", 'String'>
    readonly name: FieldRef<"Theme", 'String'>
    readonly primaryColor: FieldRef<"Theme", 'String'>
    readonly secondaryColor: FieldRef<"Theme", 'String'>
    readonly tertiaryColor: FieldRef<"Theme", 'String'>
    readonly quaternaryColor: FieldRef<"Theme", 'String'>
    readonly quinaryColor: FieldRef<"Theme", 'String'>
    readonly senaryColor: FieldRef<"Theme", 'String'>
    readonly septenaryColor: FieldRef<"Theme", 'String'>
    readonly octonaryColor: FieldRef<"Theme", 'String'>
    readonly nonaryColor: FieldRef<"Theme", 'String'>
    readonly denaryColor: FieldRef<"Theme", 'String'>
    readonly createdAt: FieldRef<"Theme", 'DateTime'>
    readonly updatedAt: FieldRef<"Theme", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Theme findUnique
   */
  export type ThemeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Theme
     */
    omit?: ThemeOmit<ExtArgs> | null
    /**
     * Filter, which Theme to fetch.
     */
    where: ThemeWhereUniqueInput
  }

  /**
   * Theme findUniqueOrThrow
   */
  export type ThemeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Theme
     */
    omit?: ThemeOmit<ExtArgs> | null
    /**
     * Filter, which Theme to fetch.
     */
    where: ThemeWhereUniqueInput
  }

  /**
   * Theme findFirst
   */
  export type ThemeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Theme
     */
    omit?: ThemeOmit<ExtArgs> | null
    /**
     * Filter, which Theme to fetch.
     */
    where?: ThemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Themes to fetch.
     */
    orderBy?: ThemeOrderByWithRelationInput | ThemeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Themes.
     */
    cursor?: ThemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Themes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Themes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Themes.
     */
    distinct?: ThemeScalarFieldEnum | ThemeScalarFieldEnum[]
  }

  /**
   * Theme findFirstOrThrow
   */
  export type ThemeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Theme
     */
    omit?: ThemeOmit<ExtArgs> | null
    /**
     * Filter, which Theme to fetch.
     */
    where?: ThemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Themes to fetch.
     */
    orderBy?: ThemeOrderByWithRelationInput | ThemeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Themes.
     */
    cursor?: ThemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Themes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Themes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Themes.
     */
    distinct?: ThemeScalarFieldEnum | ThemeScalarFieldEnum[]
  }

  /**
   * Theme findMany
   */
  export type ThemeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Theme
     */
    omit?: ThemeOmit<ExtArgs> | null
    /**
     * Filter, which Themes to fetch.
     */
    where?: ThemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Themes to fetch.
     */
    orderBy?: ThemeOrderByWithRelationInput | ThemeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Themes.
     */
    cursor?: ThemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Themes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Themes.
     */
    skip?: number
    distinct?: ThemeScalarFieldEnum | ThemeScalarFieldEnum[]
  }

  /**
   * Theme create
   */
  export type ThemeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Theme
     */
    omit?: ThemeOmit<ExtArgs> | null
    /**
     * The data needed to create a Theme.
     */
    data: XOR<ThemeCreateInput, ThemeUncheckedCreateInput>
  }

  /**
   * Theme createMany
   */
  export type ThemeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Themes.
     */
    data: ThemeCreateManyInput | ThemeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Theme createManyAndReturn
   */
  export type ThemeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Theme
     */
    omit?: ThemeOmit<ExtArgs> | null
    /**
     * The data used to create many Themes.
     */
    data: ThemeCreateManyInput | ThemeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Theme update
   */
  export type ThemeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Theme
     */
    omit?: ThemeOmit<ExtArgs> | null
    /**
     * The data needed to update a Theme.
     */
    data: XOR<ThemeUpdateInput, ThemeUncheckedUpdateInput>
    /**
     * Choose, which Theme to update.
     */
    where: ThemeWhereUniqueInput
  }

  /**
   * Theme updateMany
   */
  export type ThemeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Themes.
     */
    data: XOR<ThemeUpdateManyMutationInput, ThemeUncheckedUpdateManyInput>
    /**
     * Filter which Themes to update
     */
    where?: ThemeWhereInput
    /**
     * Limit how many Themes to update.
     */
    limit?: number
  }

  /**
   * Theme updateManyAndReturn
   */
  export type ThemeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Theme
     */
    omit?: ThemeOmit<ExtArgs> | null
    /**
     * The data used to update Themes.
     */
    data: XOR<ThemeUpdateManyMutationInput, ThemeUncheckedUpdateManyInput>
    /**
     * Filter which Themes to update
     */
    where?: ThemeWhereInput
    /**
     * Limit how many Themes to update.
     */
    limit?: number
  }

  /**
   * Theme upsert
   */
  export type ThemeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Theme
     */
    omit?: ThemeOmit<ExtArgs> | null
    /**
     * The filter to search for the Theme to update in case it exists.
     */
    where: ThemeWhereUniqueInput
    /**
     * In case the Theme found by the `where` argument doesn't exist, create a new Theme with this data.
     */
    create: XOR<ThemeCreateInput, ThemeUncheckedCreateInput>
    /**
     * In case the Theme was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ThemeUpdateInput, ThemeUncheckedUpdateInput>
  }

  /**
   * Theme delete
   */
  export type ThemeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Theme
     */
    omit?: ThemeOmit<ExtArgs> | null
    /**
     * Filter which Theme to delete.
     */
    where: ThemeWhereUniqueInput
  }

  /**
   * Theme deleteMany
   */
  export type ThemeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Themes to delete
     */
    where?: ThemeWhereInput
    /**
     * Limit how many Themes to delete.
     */
    limit?: number
  }

  /**
   * Theme without action
   */
  export type ThemeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Theme
     */
    omit?: ThemeOmit<ExtArgs> | null
  }


  /**
   * Model ThankYouSpace
   */

  export type AggregateThankYouSpace = {
    _count: ThankYouSpaceCountAggregateOutputType | null
    _min: ThankYouSpaceMinAggregateOutputType | null
    _max: ThankYouSpaceMaxAggregateOutputType | null
  }

  export type ThankYouSpaceMinAggregateOutputType = {
    id: string | null
    spaceId: string | null
    title: string | null
    message: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ThankYouSpaceMaxAggregateOutputType = {
    id: string | null
    spaceId: string | null
    title: string | null
    message: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ThankYouSpaceCountAggregateOutputType = {
    id: number
    spaceId: number
    title: number
    message: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ThankYouSpaceMinAggregateInputType = {
    id?: true
    spaceId?: true
    title?: true
    message?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ThankYouSpaceMaxAggregateInputType = {
    id?: true
    spaceId?: true
    title?: true
    message?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ThankYouSpaceCountAggregateInputType = {
    id?: true
    spaceId?: true
    title?: true
    message?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ThankYouSpaceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ThankYouSpace to aggregate.
     */
    where?: ThankYouSpaceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThankYouSpaces to fetch.
     */
    orderBy?: ThankYouSpaceOrderByWithRelationInput | ThankYouSpaceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ThankYouSpaceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThankYouSpaces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThankYouSpaces.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ThankYouSpaces
    **/
    _count?: true | ThankYouSpaceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ThankYouSpaceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ThankYouSpaceMaxAggregateInputType
  }

  export type GetThankYouSpaceAggregateType<T extends ThankYouSpaceAggregateArgs> = {
        [P in keyof T & keyof AggregateThankYouSpace]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateThankYouSpace[P]>
      : GetScalarType<T[P], AggregateThankYouSpace[P]>
  }




  export type ThankYouSpaceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ThankYouSpaceWhereInput
    orderBy?: ThankYouSpaceOrderByWithAggregationInput | ThankYouSpaceOrderByWithAggregationInput[]
    by: ThankYouSpaceScalarFieldEnum[] | ThankYouSpaceScalarFieldEnum
    having?: ThankYouSpaceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ThankYouSpaceCountAggregateInputType | true
    _min?: ThankYouSpaceMinAggregateInputType
    _max?: ThankYouSpaceMaxAggregateInputType
  }

  export type ThankYouSpaceGroupByOutputType = {
    id: string
    spaceId: string
    title: string
    message: string
    createdAt: Date
    updatedAt: Date
    _count: ThankYouSpaceCountAggregateOutputType | null
    _min: ThankYouSpaceMinAggregateOutputType | null
    _max: ThankYouSpaceMaxAggregateOutputType | null
  }

  type GetThankYouSpaceGroupByPayload<T extends ThankYouSpaceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ThankYouSpaceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ThankYouSpaceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ThankYouSpaceGroupByOutputType[P]>
            : GetScalarType<T[P], ThankYouSpaceGroupByOutputType[P]>
        }
      >
    >


  export type ThankYouSpaceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    spaceId?: boolean
    title?: boolean
    message?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    space?: boolean | SpaceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["thankYouSpace"]>

  export type ThankYouSpaceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    spaceId?: boolean
    title?: boolean
    message?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    space?: boolean | SpaceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["thankYouSpace"]>

  export type ThankYouSpaceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    spaceId?: boolean
    title?: boolean
    message?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    space?: boolean | SpaceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["thankYouSpace"]>

  export type ThankYouSpaceSelectScalar = {
    id?: boolean
    spaceId?: boolean
    title?: boolean
    message?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ThankYouSpaceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "spaceId" | "title" | "message" | "createdAt" | "updatedAt", ExtArgs["result"]["thankYouSpace"]>
  export type ThankYouSpaceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    space?: boolean | SpaceDefaultArgs<ExtArgs>
  }
  export type ThankYouSpaceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    space?: boolean | SpaceDefaultArgs<ExtArgs>
  }
  export type ThankYouSpaceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    space?: boolean | SpaceDefaultArgs<ExtArgs>
  }

  export type $ThankYouSpacePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ThankYouSpace"
    objects: {
      space: Prisma.$SpacePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      spaceId: string
      title: string
      message: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["thankYouSpace"]>
    composites: {}
  }

  type ThankYouSpaceGetPayload<S extends boolean | null | undefined | ThankYouSpaceDefaultArgs> = $Result.GetResult<Prisma.$ThankYouSpacePayload, S>

  type ThankYouSpaceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ThankYouSpaceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ThankYouSpaceCountAggregateInputType | true
    }

  export interface ThankYouSpaceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ThankYouSpace'], meta: { name: 'ThankYouSpace' } }
    /**
     * Find zero or one ThankYouSpace that matches the filter.
     * @param {ThankYouSpaceFindUniqueArgs} args - Arguments to find a ThankYouSpace
     * @example
     * // Get one ThankYouSpace
     * const thankYouSpace = await prisma.thankYouSpace.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ThankYouSpaceFindUniqueArgs>(args: SelectSubset<T, ThankYouSpaceFindUniqueArgs<ExtArgs>>): Prisma__ThankYouSpaceClient<$Result.GetResult<Prisma.$ThankYouSpacePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ThankYouSpace that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ThankYouSpaceFindUniqueOrThrowArgs} args - Arguments to find a ThankYouSpace
     * @example
     * // Get one ThankYouSpace
     * const thankYouSpace = await prisma.thankYouSpace.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ThankYouSpaceFindUniqueOrThrowArgs>(args: SelectSubset<T, ThankYouSpaceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ThankYouSpaceClient<$Result.GetResult<Prisma.$ThankYouSpacePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ThankYouSpace that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThankYouSpaceFindFirstArgs} args - Arguments to find a ThankYouSpace
     * @example
     * // Get one ThankYouSpace
     * const thankYouSpace = await prisma.thankYouSpace.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ThankYouSpaceFindFirstArgs>(args?: SelectSubset<T, ThankYouSpaceFindFirstArgs<ExtArgs>>): Prisma__ThankYouSpaceClient<$Result.GetResult<Prisma.$ThankYouSpacePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ThankYouSpace that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThankYouSpaceFindFirstOrThrowArgs} args - Arguments to find a ThankYouSpace
     * @example
     * // Get one ThankYouSpace
     * const thankYouSpace = await prisma.thankYouSpace.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ThankYouSpaceFindFirstOrThrowArgs>(args?: SelectSubset<T, ThankYouSpaceFindFirstOrThrowArgs<ExtArgs>>): Prisma__ThankYouSpaceClient<$Result.GetResult<Prisma.$ThankYouSpacePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ThankYouSpaces that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThankYouSpaceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ThankYouSpaces
     * const thankYouSpaces = await prisma.thankYouSpace.findMany()
     * 
     * // Get first 10 ThankYouSpaces
     * const thankYouSpaces = await prisma.thankYouSpace.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const thankYouSpaceWithIdOnly = await prisma.thankYouSpace.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ThankYouSpaceFindManyArgs>(args?: SelectSubset<T, ThankYouSpaceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThankYouSpacePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ThankYouSpace.
     * @param {ThankYouSpaceCreateArgs} args - Arguments to create a ThankYouSpace.
     * @example
     * // Create one ThankYouSpace
     * const ThankYouSpace = await prisma.thankYouSpace.create({
     *   data: {
     *     // ... data to create a ThankYouSpace
     *   }
     * })
     * 
     */
    create<T extends ThankYouSpaceCreateArgs>(args: SelectSubset<T, ThankYouSpaceCreateArgs<ExtArgs>>): Prisma__ThankYouSpaceClient<$Result.GetResult<Prisma.$ThankYouSpacePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ThankYouSpaces.
     * @param {ThankYouSpaceCreateManyArgs} args - Arguments to create many ThankYouSpaces.
     * @example
     * // Create many ThankYouSpaces
     * const thankYouSpace = await prisma.thankYouSpace.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ThankYouSpaceCreateManyArgs>(args?: SelectSubset<T, ThankYouSpaceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ThankYouSpaces and returns the data saved in the database.
     * @param {ThankYouSpaceCreateManyAndReturnArgs} args - Arguments to create many ThankYouSpaces.
     * @example
     * // Create many ThankYouSpaces
     * const thankYouSpace = await prisma.thankYouSpace.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ThankYouSpaces and only return the `id`
     * const thankYouSpaceWithIdOnly = await prisma.thankYouSpace.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ThankYouSpaceCreateManyAndReturnArgs>(args?: SelectSubset<T, ThankYouSpaceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThankYouSpacePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ThankYouSpace.
     * @param {ThankYouSpaceDeleteArgs} args - Arguments to delete one ThankYouSpace.
     * @example
     * // Delete one ThankYouSpace
     * const ThankYouSpace = await prisma.thankYouSpace.delete({
     *   where: {
     *     // ... filter to delete one ThankYouSpace
     *   }
     * })
     * 
     */
    delete<T extends ThankYouSpaceDeleteArgs>(args: SelectSubset<T, ThankYouSpaceDeleteArgs<ExtArgs>>): Prisma__ThankYouSpaceClient<$Result.GetResult<Prisma.$ThankYouSpacePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ThankYouSpace.
     * @param {ThankYouSpaceUpdateArgs} args - Arguments to update one ThankYouSpace.
     * @example
     * // Update one ThankYouSpace
     * const thankYouSpace = await prisma.thankYouSpace.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ThankYouSpaceUpdateArgs>(args: SelectSubset<T, ThankYouSpaceUpdateArgs<ExtArgs>>): Prisma__ThankYouSpaceClient<$Result.GetResult<Prisma.$ThankYouSpacePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ThankYouSpaces.
     * @param {ThankYouSpaceDeleteManyArgs} args - Arguments to filter ThankYouSpaces to delete.
     * @example
     * // Delete a few ThankYouSpaces
     * const { count } = await prisma.thankYouSpace.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ThankYouSpaceDeleteManyArgs>(args?: SelectSubset<T, ThankYouSpaceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ThankYouSpaces.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThankYouSpaceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ThankYouSpaces
     * const thankYouSpace = await prisma.thankYouSpace.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ThankYouSpaceUpdateManyArgs>(args: SelectSubset<T, ThankYouSpaceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ThankYouSpaces and returns the data updated in the database.
     * @param {ThankYouSpaceUpdateManyAndReturnArgs} args - Arguments to update many ThankYouSpaces.
     * @example
     * // Update many ThankYouSpaces
     * const thankYouSpace = await prisma.thankYouSpace.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ThankYouSpaces and only return the `id`
     * const thankYouSpaceWithIdOnly = await prisma.thankYouSpace.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ThankYouSpaceUpdateManyAndReturnArgs>(args: SelectSubset<T, ThankYouSpaceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThankYouSpacePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ThankYouSpace.
     * @param {ThankYouSpaceUpsertArgs} args - Arguments to update or create a ThankYouSpace.
     * @example
     * // Update or create a ThankYouSpace
     * const thankYouSpace = await prisma.thankYouSpace.upsert({
     *   create: {
     *     // ... data to create a ThankYouSpace
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ThankYouSpace we want to update
     *   }
     * })
     */
    upsert<T extends ThankYouSpaceUpsertArgs>(args: SelectSubset<T, ThankYouSpaceUpsertArgs<ExtArgs>>): Prisma__ThankYouSpaceClient<$Result.GetResult<Prisma.$ThankYouSpacePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ThankYouSpaces.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThankYouSpaceCountArgs} args - Arguments to filter ThankYouSpaces to count.
     * @example
     * // Count the number of ThankYouSpaces
     * const count = await prisma.thankYouSpace.count({
     *   where: {
     *     // ... the filter for the ThankYouSpaces we want to count
     *   }
     * })
    **/
    count<T extends ThankYouSpaceCountArgs>(
      args?: Subset<T, ThankYouSpaceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ThankYouSpaceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ThankYouSpace.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThankYouSpaceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ThankYouSpaceAggregateArgs>(args: Subset<T, ThankYouSpaceAggregateArgs>): Prisma.PrismaPromise<GetThankYouSpaceAggregateType<T>>

    /**
     * Group by ThankYouSpace.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThankYouSpaceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ThankYouSpaceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ThankYouSpaceGroupByArgs['orderBy'] }
        : { orderBy?: ThankYouSpaceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ThankYouSpaceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetThankYouSpaceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ThankYouSpace model
   */
  readonly fields: ThankYouSpaceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ThankYouSpace.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ThankYouSpaceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    space<T extends SpaceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SpaceDefaultArgs<ExtArgs>>): Prisma__SpaceClient<$Result.GetResult<Prisma.$SpacePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ThankYouSpace model
   */
  interface ThankYouSpaceFieldRefs {
    readonly id: FieldRef<"ThankYouSpace", 'String'>
    readonly spaceId: FieldRef<"ThankYouSpace", 'String'>
    readonly title: FieldRef<"ThankYouSpace", 'String'>
    readonly message: FieldRef<"ThankYouSpace", 'String'>
    readonly createdAt: FieldRef<"ThankYouSpace", 'DateTime'>
    readonly updatedAt: FieldRef<"ThankYouSpace", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ThankYouSpace findUnique
   */
  export type ThankYouSpaceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThankYouSpace
     */
    select?: ThankYouSpaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ThankYouSpace
     */
    omit?: ThankYouSpaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThankYouSpaceInclude<ExtArgs> | null
    /**
     * Filter, which ThankYouSpace to fetch.
     */
    where: ThankYouSpaceWhereUniqueInput
  }

  /**
   * ThankYouSpace findUniqueOrThrow
   */
  export type ThankYouSpaceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThankYouSpace
     */
    select?: ThankYouSpaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ThankYouSpace
     */
    omit?: ThankYouSpaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThankYouSpaceInclude<ExtArgs> | null
    /**
     * Filter, which ThankYouSpace to fetch.
     */
    where: ThankYouSpaceWhereUniqueInput
  }

  /**
   * ThankYouSpace findFirst
   */
  export type ThankYouSpaceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThankYouSpace
     */
    select?: ThankYouSpaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ThankYouSpace
     */
    omit?: ThankYouSpaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThankYouSpaceInclude<ExtArgs> | null
    /**
     * Filter, which ThankYouSpace to fetch.
     */
    where?: ThankYouSpaceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThankYouSpaces to fetch.
     */
    orderBy?: ThankYouSpaceOrderByWithRelationInput | ThankYouSpaceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ThankYouSpaces.
     */
    cursor?: ThankYouSpaceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThankYouSpaces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThankYouSpaces.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ThankYouSpaces.
     */
    distinct?: ThankYouSpaceScalarFieldEnum | ThankYouSpaceScalarFieldEnum[]
  }

  /**
   * ThankYouSpace findFirstOrThrow
   */
  export type ThankYouSpaceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThankYouSpace
     */
    select?: ThankYouSpaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ThankYouSpace
     */
    omit?: ThankYouSpaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThankYouSpaceInclude<ExtArgs> | null
    /**
     * Filter, which ThankYouSpace to fetch.
     */
    where?: ThankYouSpaceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThankYouSpaces to fetch.
     */
    orderBy?: ThankYouSpaceOrderByWithRelationInput | ThankYouSpaceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ThankYouSpaces.
     */
    cursor?: ThankYouSpaceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThankYouSpaces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThankYouSpaces.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ThankYouSpaces.
     */
    distinct?: ThankYouSpaceScalarFieldEnum | ThankYouSpaceScalarFieldEnum[]
  }

  /**
   * ThankYouSpace findMany
   */
  export type ThankYouSpaceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThankYouSpace
     */
    select?: ThankYouSpaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ThankYouSpace
     */
    omit?: ThankYouSpaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThankYouSpaceInclude<ExtArgs> | null
    /**
     * Filter, which ThankYouSpaces to fetch.
     */
    where?: ThankYouSpaceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThankYouSpaces to fetch.
     */
    orderBy?: ThankYouSpaceOrderByWithRelationInput | ThankYouSpaceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ThankYouSpaces.
     */
    cursor?: ThankYouSpaceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThankYouSpaces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThankYouSpaces.
     */
    skip?: number
    distinct?: ThankYouSpaceScalarFieldEnum | ThankYouSpaceScalarFieldEnum[]
  }

  /**
   * ThankYouSpace create
   */
  export type ThankYouSpaceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThankYouSpace
     */
    select?: ThankYouSpaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ThankYouSpace
     */
    omit?: ThankYouSpaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThankYouSpaceInclude<ExtArgs> | null
    /**
     * The data needed to create a ThankYouSpace.
     */
    data: XOR<ThankYouSpaceCreateInput, ThankYouSpaceUncheckedCreateInput>
  }

  /**
   * ThankYouSpace createMany
   */
  export type ThankYouSpaceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ThankYouSpaces.
     */
    data: ThankYouSpaceCreateManyInput | ThankYouSpaceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ThankYouSpace createManyAndReturn
   */
  export type ThankYouSpaceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThankYouSpace
     */
    select?: ThankYouSpaceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ThankYouSpace
     */
    omit?: ThankYouSpaceOmit<ExtArgs> | null
    /**
     * The data used to create many ThankYouSpaces.
     */
    data: ThankYouSpaceCreateManyInput | ThankYouSpaceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThankYouSpaceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ThankYouSpace update
   */
  export type ThankYouSpaceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThankYouSpace
     */
    select?: ThankYouSpaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ThankYouSpace
     */
    omit?: ThankYouSpaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThankYouSpaceInclude<ExtArgs> | null
    /**
     * The data needed to update a ThankYouSpace.
     */
    data: XOR<ThankYouSpaceUpdateInput, ThankYouSpaceUncheckedUpdateInput>
    /**
     * Choose, which ThankYouSpace to update.
     */
    where: ThankYouSpaceWhereUniqueInput
  }

  /**
   * ThankYouSpace updateMany
   */
  export type ThankYouSpaceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ThankYouSpaces.
     */
    data: XOR<ThankYouSpaceUpdateManyMutationInput, ThankYouSpaceUncheckedUpdateManyInput>
    /**
     * Filter which ThankYouSpaces to update
     */
    where?: ThankYouSpaceWhereInput
    /**
     * Limit how many ThankYouSpaces to update.
     */
    limit?: number
  }

  /**
   * ThankYouSpace updateManyAndReturn
   */
  export type ThankYouSpaceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThankYouSpace
     */
    select?: ThankYouSpaceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ThankYouSpace
     */
    omit?: ThankYouSpaceOmit<ExtArgs> | null
    /**
     * The data used to update ThankYouSpaces.
     */
    data: XOR<ThankYouSpaceUpdateManyMutationInput, ThankYouSpaceUncheckedUpdateManyInput>
    /**
     * Filter which ThankYouSpaces to update
     */
    where?: ThankYouSpaceWhereInput
    /**
     * Limit how many ThankYouSpaces to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThankYouSpaceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ThankYouSpace upsert
   */
  export type ThankYouSpaceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThankYouSpace
     */
    select?: ThankYouSpaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ThankYouSpace
     */
    omit?: ThankYouSpaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThankYouSpaceInclude<ExtArgs> | null
    /**
     * The filter to search for the ThankYouSpace to update in case it exists.
     */
    where: ThankYouSpaceWhereUniqueInput
    /**
     * In case the ThankYouSpace found by the `where` argument doesn't exist, create a new ThankYouSpace with this data.
     */
    create: XOR<ThankYouSpaceCreateInput, ThankYouSpaceUncheckedCreateInput>
    /**
     * In case the ThankYouSpace was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ThankYouSpaceUpdateInput, ThankYouSpaceUncheckedUpdateInput>
  }

  /**
   * ThankYouSpace delete
   */
  export type ThankYouSpaceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThankYouSpace
     */
    select?: ThankYouSpaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ThankYouSpace
     */
    omit?: ThankYouSpaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThankYouSpaceInclude<ExtArgs> | null
    /**
     * Filter which ThankYouSpace to delete.
     */
    where: ThankYouSpaceWhereUniqueInput
  }

  /**
   * ThankYouSpace deleteMany
   */
  export type ThankYouSpaceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ThankYouSpaces to delete
     */
    where?: ThankYouSpaceWhereInput
    /**
     * Limit how many ThankYouSpaces to delete.
     */
    limit?: number
  }

  /**
   * ThankYouSpace without action
   */
  export type ThankYouSpaceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThankYouSpace
     */
    select?: ThankYouSpaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ThankYouSpace
     */
    omit?: ThankYouSpaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThankYouSpaceInclude<ExtArgs> | null
  }


  /**
   * Model Feedback
   */

  export type AggregateFeedback = {
    _count: FeedbackCountAggregateOutputType | null
    _avg: FeedbackAvgAggregateOutputType | null
    _sum: FeedbackSumAggregateOutputType | null
    _min: FeedbackMinAggregateOutputType | null
    _max: FeedbackMaxAggregateOutputType | null
  }

  export type FeedbackAvgAggregateOutputType = {
    rating: number | null
  }

  export type FeedbackSumAggregateOutputType = {
    rating: number | null
  }

  export type FeedbackMinAggregateOutputType = {
    id: string | null
    answer: string | null
    name: string | null
    email: string | null
    rating: number | null
    permission: boolean | null
    spaceId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    feedbackType: $Enums.FeedbackType | null
    addToWallOfLove: boolean | null
    videoUrl: string | null
    imageUrl: string | null
    isSpam: boolean | null
    sentiment: $Enums.SentimentType | null
    analysisStatus: $Enums.AnalysisStatus | null
  }

  export type FeedbackMaxAggregateOutputType = {
    id: string | null
    answer: string | null
    name: string | null
    email: string | null
    rating: number | null
    permission: boolean | null
    spaceId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    feedbackType: $Enums.FeedbackType | null
    addToWallOfLove: boolean | null
    videoUrl: string | null
    imageUrl: string | null
    isSpam: boolean | null
    sentiment: $Enums.SentimentType | null
    analysisStatus: $Enums.AnalysisStatus | null
  }

  export type FeedbackCountAggregateOutputType = {
    id: number
    answer: number
    name: number
    email: number
    rating: number
    permission: number
    spaceId: number
    createdAt: number
    updatedAt: number
    feedbackType: number
    addToWallOfLove: number
    videoUrl: number
    imageUrl: number
    isSpam: number
    sentiment: number
    analysisStatus: number
    _all: number
  }


  export type FeedbackAvgAggregateInputType = {
    rating?: true
  }

  export type FeedbackSumAggregateInputType = {
    rating?: true
  }

  export type FeedbackMinAggregateInputType = {
    id?: true
    answer?: true
    name?: true
    email?: true
    rating?: true
    permission?: true
    spaceId?: true
    createdAt?: true
    updatedAt?: true
    feedbackType?: true
    addToWallOfLove?: true
    videoUrl?: true
    imageUrl?: true
    isSpam?: true
    sentiment?: true
    analysisStatus?: true
  }

  export type FeedbackMaxAggregateInputType = {
    id?: true
    answer?: true
    name?: true
    email?: true
    rating?: true
    permission?: true
    spaceId?: true
    createdAt?: true
    updatedAt?: true
    feedbackType?: true
    addToWallOfLove?: true
    videoUrl?: true
    imageUrl?: true
    isSpam?: true
    sentiment?: true
    analysisStatus?: true
  }

  export type FeedbackCountAggregateInputType = {
    id?: true
    answer?: true
    name?: true
    email?: true
    rating?: true
    permission?: true
    spaceId?: true
    createdAt?: true
    updatedAt?: true
    feedbackType?: true
    addToWallOfLove?: true
    videoUrl?: true
    imageUrl?: true
    isSpam?: true
    sentiment?: true
    analysisStatus?: true
    _all?: true
  }

  export type FeedbackAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Feedback to aggregate.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Feedbacks
    **/
    _count?: true | FeedbackCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FeedbackAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FeedbackSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FeedbackMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FeedbackMaxAggregateInputType
  }

  export type GetFeedbackAggregateType<T extends FeedbackAggregateArgs> = {
        [P in keyof T & keyof AggregateFeedback]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeedback[P]>
      : GetScalarType<T[P], AggregateFeedback[P]>
  }




  export type FeedbackGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithAggregationInput | FeedbackOrderByWithAggregationInput[]
    by: FeedbackScalarFieldEnum[] | FeedbackScalarFieldEnum
    having?: FeedbackScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FeedbackCountAggregateInputType | true
    _avg?: FeedbackAvgAggregateInputType
    _sum?: FeedbackSumAggregateInputType
    _min?: FeedbackMinAggregateInputType
    _max?: FeedbackMaxAggregateInputType
  }

  export type FeedbackGroupByOutputType = {
    id: string
    answer: string | null
    name: string
    email: string
    rating: number
    permission: boolean
    spaceId: string
    createdAt: Date
    updatedAt: Date
    feedbackType: $Enums.FeedbackType
    addToWallOfLove: boolean
    videoUrl: string | null
    imageUrl: string | null
    isSpam: boolean
    sentiment: $Enums.SentimentType
    analysisStatus: $Enums.AnalysisStatus
    _count: FeedbackCountAggregateOutputType | null
    _avg: FeedbackAvgAggregateOutputType | null
    _sum: FeedbackSumAggregateOutputType | null
    _min: FeedbackMinAggregateOutputType | null
    _max: FeedbackMaxAggregateOutputType | null
  }

  type GetFeedbackGroupByPayload<T extends FeedbackGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FeedbackGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FeedbackGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FeedbackGroupByOutputType[P]>
            : GetScalarType<T[P], FeedbackGroupByOutputType[P]>
        }
      >
    >


  export type FeedbackSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    answer?: boolean
    name?: boolean
    email?: boolean
    rating?: boolean
    permission?: boolean
    spaceId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    feedbackType?: boolean
    addToWallOfLove?: boolean
    videoUrl?: boolean
    imageUrl?: boolean
    isSpam?: boolean
    sentiment?: boolean
    analysisStatus?: boolean
    space?: boolean | SpaceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feedback"]>

  export type FeedbackSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    answer?: boolean
    name?: boolean
    email?: boolean
    rating?: boolean
    permission?: boolean
    spaceId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    feedbackType?: boolean
    addToWallOfLove?: boolean
    videoUrl?: boolean
    imageUrl?: boolean
    isSpam?: boolean
    sentiment?: boolean
    analysisStatus?: boolean
    space?: boolean | SpaceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feedback"]>

  export type FeedbackSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    answer?: boolean
    name?: boolean
    email?: boolean
    rating?: boolean
    permission?: boolean
    spaceId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    feedbackType?: boolean
    addToWallOfLove?: boolean
    videoUrl?: boolean
    imageUrl?: boolean
    isSpam?: boolean
    sentiment?: boolean
    analysisStatus?: boolean
    space?: boolean | SpaceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feedback"]>

  export type FeedbackSelectScalar = {
    id?: boolean
    answer?: boolean
    name?: boolean
    email?: boolean
    rating?: boolean
    permission?: boolean
    spaceId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    feedbackType?: boolean
    addToWallOfLove?: boolean
    videoUrl?: boolean
    imageUrl?: boolean
    isSpam?: boolean
    sentiment?: boolean
    analysisStatus?: boolean
  }

  export type FeedbackOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "answer" | "name" | "email" | "rating" | "permission" | "spaceId" | "createdAt" | "updatedAt" | "feedbackType" | "addToWallOfLove" | "videoUrl" | "imageUrl" | "isSpam" | "sentiment" | "analysisStatus", ExtArgs["result"]["feedback"]>
  export type FeedbackInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    space?: boolean | SpaceDefaultArgs<ExtArgs>
  }
  export type FeedbackIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    space?: boolean | SpaceDefaultArgs<ExtArgs>
  }
  export type FeedbackIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    space?: boolean | SpaceDefaultArgs<ExtArgs>
  }

  export type $FeedbackPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Feedback"
    objects: {
      space: Prisma.$SpacePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      answer: string | null
      name: string
      email: string
      rating: number
      permission: boolean
      spaceId: string
      createdAt: Date
      updatedAt: Date
      feedbackType: $Enums.FeedbackType
      addToWallOfLove: boolean
      videoUrl: string | null
      imageUrl: string | null
      isSpam: boolean
      sentiment: $Enums.SentimentType
      analysisStatus: $Enums.AnalysisStatus
    }, ExtArgs["result"]["feedback"]>
    composites: {}
  }

  type FeedbackGetPayload<S extends boolean | null | undefined | FeedbackDefaultArgs> = $Result.GetResult<Prisma.$FeedbackPayload, S>

  type FeedbackCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FeedbackFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FeedbackCountAggregateInputType | true
    }

  export interface FeedbackDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Feedback'], meta: { name: 'Feedback' } }
    /**
     * Find zero or one Feedback that matches the filter.
     * @param {FeedbackFindUniqueArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FeedbackFindUniqueArgs>(args: SelectSubset<T, FeedbackFindUniqueArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Feedback that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FeedbackFindUniqueOrThrowArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FeedbackFindUniqueOrThrowArgs>(args: SelectSubset<T, FeedbackFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Feedback that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindFirstArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FeedbackFindFirstArgs>(args?: SelectSubset<T, FeedbackFindFirstArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Feedback that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindFirstOrThrowArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FeedbackFindFirstOrThrowArgs>(args?: SelectSubset<T, FeedbackFindFirstOrThrowArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Feedbacks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Feedbacks
     * const feedbacks = await prisma.feedback.findMany()
     * 
     * // Get first 10 Feedbacks
     * const feedbacks = await prisma.feedback.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const feedbackWithIdOnly = await prisma.feedback.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FeedbackFindManyArgs>(args?: SelectSubset<T, FeedbackFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Feedback.
     * @param {FeedbackCreateArgs} args - Arguments to create a Feedback.
     * @example
     * // Create one Feedback
     * const Feedback = await prisma.feedback.create({
     *   data: {
     *     // ... data to create a Feedback
     *   }
     * })
     * 
     */
    create<T extends FeedbackCreateArgs>(args: SelectSubset<T, FeedbackCreateArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Feedbacks.
     * @param {FeedbackCreateManyArgs} args - Arguments to create many Feedbacks.
     * @example
     * // Create many Feedbacks
     * const feedback = await prisma.feedback.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FeedbackCreateManyArgs>(args?: SelectSubset<T, FeedbackCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Feedbacks and returns the data saved in the database.
     * @param {FeedbackCreateManyAndReturnArgs} args - Arguments to create many Feedbacks.
     * @example
     * // Create many Feedbacks
     * const feedback = await prisma.feedback.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Feedbacks and only return the `id`
     * const feedbackWithIdOnly = await prisma.feedback.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FeedbackCreateManyAndReturnArgs>(args?: SelectSubset<T, FeedbackCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Feedback.
     * @param {FeedbackDeleteArgs} args - Arguments to delete one Feedback.
     * @example
     * // Delete one Feedback
     * const Feedback = await prisma.feedback.delete({
     *   where: {
     *     // ... filter to delete one Feedback
     *   }
     * })
     * 
     */
    delete<T extends FeedbackDeleteArgs>(args: SelectSubset<T, FeedbackDeleteArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Feedback.
     * @param {FeedbackUpdateArgs} args - Arguments to update one Feedback.
     * @example
     * // Update one Feedback
     * const feedback = await prisma.feedback.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FeedbackUpdateArgs>(args: SelectSubset<T, FeedbackUpdateArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Feedbacks.
     * @param {FeedbackDeleteManyArgs} args - Arguments to filter Feedbacks to delete.
     * @example
     * // Delete a few Feedbacks
     * const { count } = await prisma.feedback.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FeedbackDeleteManyArgs>(args?: SelectSubset<T, FeedbackDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Feedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Feedbacks
     * const feedback = await prisma.feedback.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FeedbackUpdateManyArgs>(args: SelectSubset<T, FeedbackUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Feedbacks and returns the data updated in the database.
     * @param {FeedbackUpdateManyAndReturnArgs} args - Arguments to update many Feedbacks.
     * @example
     * // Update many Feedbacks
     * const feedback = await prisma.feedback.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Feedbacks and only return the `id`
     * const feedbackWithIdOnly = await prisma.feedback.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FeedbackUpdateManyAndReturnArgs>(args: SelectSubset<T, FeedbackUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Feedback.
     * @param {FeedbackUpsertArgs} args - Arguments to update or create a Feedback.
     * @example
     * // Update or create a Feedback
     * const feedback = await prisma.feedback.upsert({
     *   create: {
     *     // ... data to create a Feedback
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Feedback we want to update
     *   }
     * })
     */
    upsert<T extends FeedbackUpsertArgs>(args: SelectSubset<T, FeedbackUpsertArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Feedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackCountArgs} args - Arguments to filter Feedbacks to count.
     * @example
     * // Count the number of Feedbacks
     * const count = await prisma.feedback.count({
     *   where: {
     *     // ... the filter for the Feedbacks we want to count
     *   }
     * })
    **/
    count<T extends FeedbackCountArgs>(
      args?: Subset<T, FeedbackCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeedbackCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Feedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FeedbackAggregateArgs>(args: Subset<T, FeedbackAggregateArgs>): Prisma.PrismaPromise<GetFeedbackAggregateType<T>>

    /**
     * Group by Feedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FeedbackGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FeedbackGroupByArgs['orderBy'] }
        : { orderBy?: FeedbackGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FeedbackGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeedbackGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Feedback model
   */
  readonly fields: FeedbackFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Feedback.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FeedbackClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    space<T extends SpaceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SpaceDefaultArgs<ExtArgs>>): Prisma__SpaceClient<$Result.GetResult<Prisma.$SpacePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Feedback model
   */
  interface FeedbackFieldRefs {
    readonly id: FieldRef<"Feedback", 'String'>
    readonly answer: FieldRef<"Feedback", 'String'>
    readonly name: FieldRef<"Feedback", 'String'>
    readonly email: FieldRef<"Feedback", 'String'>
    readonly rating: FieldRef<"Feedback", 'Int'>
    readonly permission: FieldRef<"Feedback", 'Boolean'>
    readonly spaceId: FieldRef<"Feedback", 'String'>
    readonly createdAt: FieldRef<"Feedback", 'DateTime'>
    readonly updatedAt: FieldRef<"Feedback", 'DateTime'>
    readonly feedbackType: FieldRef<"Feedback", 'FeedbackType'>
    readonly addToWallOfLove: FieldRef<"Feedback", 'Boolean'>
    readonly videoUrl: FieldRef<"Feedback", 'String'>
    readonly imageUrl: FieldRef<"Feedback", 'String'>
    readonly isSpam: FieldRef<"Feedback", 'Boolean'>
    readonly sentiment: FieldRef<"Feedback", 'SentimentType'>
    readonly analysisStatus: FieldRef<"Feedback", 'AnalysisStatus'>
  }
    

  // Custom InputTypes
  /**
   * Feedback findUnique
   */
  export type FeedbackFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback findUniqueOrThrow
   */
  export type FeedbackFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback findFirst
   */
  export type FeedbackFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Feedbacks.
     */
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Feedback findFirstOrThrow
   */
  export type FeedbackFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Feedbacks.
     */
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Feedback findMany
   */
  export type FeedbackFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedbacks to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Feedback create
   */
  export type FeedbackCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * The data needed to create a Feedback.
     */
    data: XOR<FeedbackCreateInput, FeedbackUncheckedCreateInput>
  }

  /**
   * Feedback createMany
   */
  export type FeedbackCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Feedbacks.
     */
    data: FeedbackCreateManyInput | FeedbackCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Feedback createManyAndReturn
   */
  export type FeedbackCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * The data used to create many Feedbacks.
     */
    data: FeedbackCreateManyInput | FeedbackCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Feedback update
   */
  export type FeedbackUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * The data needed to update a Feedback.
     */
    data: XOR<FeedbackUpdateInput, FeedbackUncheckedUpdateInput>
    /**
     * Choose, which Feedback to update.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback updateMany
   */
  export type FeedbackUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Feedbacks.
     */
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyInput>
    /**
     * Filter which Feedbacks to update
     */
    where?: FeedbackWhereInput
    /**
     * Limit how many Feedbacks to update.
     */
    limit?: number
  }

  /**
   * Feedback updateManyAndReturn
   */
  export type FeedbackUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * The data used to update Feedbacks.
     */
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyInput>
    /**
     * Filter which Feedbacks to update
     */
    where?: FeedbackWhereInput
    /**
     * Limit how many Feedbacks to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Feedback upsert
   */
  export type FeedbackUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * The filter to search for the Feedback to update in case it exists.
     */
    where: FeedbackWhereUniqueInput
    /**
     * In case the Feedback found by the `where` argument doesn't exist, create a new Feedback with this data.
     */
    create: XOR<FeedbackCreateInput, FeedbackUncheckedCreateInput>
    /**
     * In case the Feedback was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FeedbackUpdateInput, FeedbackUncheckedUpdateInput>
  }

  /**
   * Feedback delete
   */
  export type FeedbackDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter which Feedback to delete.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback deleteMany
   */
  export type FeedbackDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Feedbacks to delete
     */
    where?: FeedbackWhereInput
    /**
     * Limit how many Feedbacks to delete.
     */
    limit?: number
  }

  /**
   * Feedback without action
   */
  export type FeedbackDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
  }


  /**
   * Model MetricsDate
   */

  export type AggregateMetricsDate = {
    _count: MetricsDateCountAggregateOutputType | null
    _min: MetricsDateMinAggregateOutputType | null
    _max: MetricsDateMaxAggregateOutputType | null
  }

  export type MetricsDateMinAggregateOutputType = {
    id: string | null
    date: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MetricsDateMaxAggregateOutputType = {
    id: string | null
    date: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MetricsDateCountAggregateOutputType = {
    id: number
    date: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MetricsDateMinAggregateInputType = {
    id?: true
    date?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MetricsDateMaxAggregateInputType = {
    id?: true
    date?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MetricsDateCountAggregateInputType = {
    id?: true
    date?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MetricsDateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MetricsDate to aggregate.
     */
    where?: MetricsDateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MetricsDates to fetch.
     */
    orderBy?: MetricsDateOrderByWithRelationInput | MetricsDateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MetricsDateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MetricsDates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MetricsDates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MetricsDates
    **/
    _count?: true | MetricsDateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MetricsDateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MetricsDateMaxAggregateInputType
  }

  export type GetMetricsDateAggregateType<T extends MetricsDateAggregateArgs> = {
        [P in keyof T & keyof AggregateMetricsDate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMetricsDate[P]>
      : GetScalarType<T[P], AggregateMetricsDate[P]>
  }




  export type MetricsDateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MetricsDateWhereInput
    orderBy?: MetricsDateOrderByWithAggregationInput | MetricsDateOrderByWithAggregationInput[]
    by: MetricsDateScalarFieldEnum[] | MetricsDateScalarFieldEnum
    having?: MetricsDateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MetricsDateCountAggregateInputType | true
    _min?: MetricsDateMinAggregateInputType
    _max?: MetricsDateMaxAggregateInputType
  }

  export type MetricsDateGroupByOutputType = {
    id: string
    date: Date
    createdAt: Date
    updatedAt: Date
    _count: MetricsDateCountAggregateOutputType | null
    _min: MetricsDateMinAggregateOutputType | null
    _max: MetricsDateMaxAggregateOutputType | null
  }

  type GetMetricsDateGroupByPayload<T extends MetricsDateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MetricsDateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MetricsDateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MetricsDateGroupByOutputType[P]>
            : GetScalarType<T[P], MetricsDateGroupByOutputType[P]>
        }
      >
    >


  export type MetricsDateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    requestTestimonialMetrics?: boolean | MetricsDate$requestTestimonialMetricsArgs<ExtArgs>
    wallOfLoveMetrics?: boolean | MetricsDate$wallOfLoveMetricsArgs<ExtArgs>
    _count?: boolean | MetricsDateCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["metricsDate"]>

  export type MetricsDateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["metricsDate"]>

  export type MetricsDateSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["metricsDate"]>

  export type MetricsDateSelectScalar = {
    id?: boolean
    date?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MetricsDateOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "date" | "createdAt" | "updatedAt", ExtArgs["result"]["metricsDate"]>
  export type MetricsDateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    requestTestimonialMetrics?: boolean | MetricsDate$requestTestimonialMetricsArgs<ExtArgs>
    wallOfLoveMetrics?: boolean | MetricsDate$wallOfLoveMetricsArgs<ExtArgs>
    _count?: boolean | MetricsDateCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MetricsDateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type MetricsDateIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $MetricsDatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MetricsDate"
    objects: {
      requestTestimonialMetrics: Prisma.$RequestTestimonialMetricsPayload<ExtArgs>[]
      wallOfLoveMetrics: Prisma.$WallOfLoveMetricsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      date: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["metricsDate"]>
    composites: {}
  }

  type MetricsDateGetPayload<S extends boolean | null | undefined | MetricsDateDefaultArgs> = $Result.GetResult<Prisma.$MetricsDatePayload, S>

  type MetricsDateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MetricsDateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MetricsDateCountAggregateInputType | true
    }

  export interface MetricsDateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MetricsDate'], meta: { name: 'MetricsDate' } }
    /**
     * Find zero or one MetricsDate that matches the filter.
     * @param {MetricsDateFindUniqueArgs} args - Arguments to find a MetricsDate
     * @example
     * // Get one MetricsDate
     * const metricsDate = await prisma.metricsDate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MetricsDateFindUniqueArgs>(args: SelectSubset<T, MetricsDateFindUniqueArgs<ExtArgs>>): Prisma__MetricsDateClient<$Result.GetResult<Prisma.$MetricsDatePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MetricsDate that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MetricsDateFindUniqueOrThrowArgs} args - Arguments to find a MetricsDate
     * @example
     * // Get one MetricsDate
     * const metricsDate = await prisma.metricsDate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MetricsDateFindUniqueOrThrowArgs>(args: SelectSubset<T, MetricsDateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MetricsDateClient<$Result.GetResult<Prisma.$MetricsDatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MetricsDate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricsDateFindFirstArgs} args - Arguments to find a MetricsDate
     * @example
     * // Get one MetricsDate
     * const metricsDate = await prisma.metricsDate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MetricsDateFindFirstArgs>(args?: SelectSubset<T, MetricsDateFindFirstArgs<ExtArgs>>): Prisma__MetricsDateClient<$Result.GetResult<Prisma.$MetricsDatePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MetricsDate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricsDateFindFirstOrThrowArgs} args - Arguments to find a MetricsDate
     * @example
     * // Get one MetricsDate
     * const metricsDate = await prisma.metricsDate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MetricsDateFindFirstOrThrowArgs>(args?: SelectSubset<T, MetricsDateFindFirstOrThrowArgs<ExtArgs>>): Prisma__MetricsDateClient<$Result.GetResult<Prisma.$MetricsDatePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MetricsDates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricsDateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MetricsDates
     * const metricsDates = await prisma.metricsDate.findMany()
     * 
     * // Get first 10 MetricsDates
     * const metricsDates = await prisma.metricsDate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const metricsDateWithIdOnly = await prisma.metricsDate.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MetricsDateFindManyArgs>(args?: SelectSubset<T, MetricsDateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MetricsDatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MetricsDate.
     * @param {MetricsDateCreateArgs} args - Arguments to create a MetricsDate.
     * @example
     * // Create one MetricsDate
     * const MetricsDate = await prisma.metricsDate.create({
     *   data: {
     *     // ... data to create a MetricsDate
     *   }
     * })
     * 
     */
    create<T extends MetricsDateCreateArgs>(args: SelectSubset<T, MetricsDateCreateArgs<ExtArgs>>): Prisma__MetricsDateClient<$Result.GetResult<Prisma.$MetricsDatePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MetricsDates.
     * @param {MetricsDateCreateManyArgs} args - Arguments to create many MetricsDates.
     * @example
     * // Create many MetricsDates
     * const metricsDate = await prisma.metricsDate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MetricsDateCreateManyArgs>(args?: SelectSubset<T, MetricsDateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MetricsDates and returns the data saved in the database.
     * @param {MetricsDateCreateManyAndReturnArgs} args - Arguments to create many MetricsDates.
     * @example
     * // Create many MetricsDates
     * const metricsDate = await prisma.metricsDate.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MetricsDates and only return the `id`
     * const metricsDateWithIdOnly = await prisma.metricsDate.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MetricsDateCreateManyAndReturnArgs>(args?: SelectSubset<T, MetricsDateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MetricsDatePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MetricsDate.
     * @param {MetricsDateDeleteArgs} args - Arguments to delete one MetricsDate.
     * @example
     * // Delete one MetricsDate
     * const MetricsDate = await prisma.metricsDate.delete({
     *   where: {
     *     // ... filter to delete one MetricsDate
     *   }
     * })
     * 
     */
    delete<T extends MetricsDateDeleteArgs>(args: SelectSubset<T, MetricsDateDeleteArgs<ExtArgs>>): Prisma__MetricsDateClient<$Result.GetResult<Prisma.$MetricsDatePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MetricsDate.
     * @param {MetricsDateUpdateArgs} args - Arguments to update one MetricsDate.
     * @example
     * // Update one MetricsDate
     * const metricsDate = await prisma.metricsDate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MetricsDateUpdateArgs>(args: SelectSubset<T, MetricsDateUpdateArgs<ExtArgs>>): Prisma__MetricsDateClient<$Result.GetResult<Prisma.$MetricsDatePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MetricsDates.
     * @param {MetricsDateDeleteManyArgs} args - Arguments to filter MetricsDates to delete.
     * @example
     * // Delete a few MetricsDates
     * const { count } = await prisma.metricsDate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MetricsDateDeleteManyArgs>(args?: SelectSubset<T, MetricsDateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MetricsDates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricsDateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MetricsDates
     * const metricsDate = await prisma.metricsDate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MetricsDateUpdateManyArgs>(args: SelectSubset<T, MetricsDateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MetricsDates and returns the data updated in the database.
     * @param {MetricsDateUpdateManyAndReturnArgs} args - Arguments to update many MetricsDates.
     * @example
     * // Update many MetricsDates
     * const metricsDate = await prisma.metricsDate.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MetricsDates and only return the `id`
     * const metricsDateWithIdOnly = await prisma.metricsDate.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MetricsDateUpdateManyAndReturnArgs>(args: SelectSubset<T, MetricsDateUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MetricsDatePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MetricsDate.
     * @param {MetricsDateUpsertArgs} args - Arguments to update or create a MetricsDate.
     * @example
     * // Update or create a MetricsDate
     * const metricsDate = await prisma.metricsDate.upsert({
     *   create: {
     *     // ... data to create a MetricsDate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MetricsDate we want to update
     *   }
     * })
     */
    upsert<T extends MetricsDateUpsertArgs>(args: SelectSubset<T, MetricsDateUpsertArgs<ExtArgs>>): Prisma__MetricsDateClient<$Result.GetResult<Prisma.$MetricsDatePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MetricsDates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricsDateCountArgs} args - Arguments to filter MetricsDates to count.
     * @example
     * // Count the number of MetricsDates
     * const count = await prisma.metricsDate.count({
     *   where: {
     *     // ... the filter for the MetricsDates we want to count
     *   }
     * })
    **/
    count<T extends MetricsDateCountArgs>(
      args?: Subset<T, MetricsDateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MetricsDateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MetricsDate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricsDateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MetricsDateAggregateArgs>(args: Subset<T, MetricsDateAggregateArgs>): Prisma.PrismaPromise<GetMetricsDateAggregateType<T>>

    /**
     * Group by MetricsDate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricsDateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MetricsDateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MetricsDateGroupByArgs['orderBy'] }
        : { orderBy?: MetricsDateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MetricsDateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMetricsDateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MetricsDate model
   */
  readonly fields: MetricsDateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MetricsDate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MetricsDateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    requestTestimonialMetrics<T extends MetricsDate$requestTestimonialMetricsArgs<ExtArgs> = {}>(args?: Subset<T, MetricsDate$requestTestimonialMetricsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestTestimonialMetricsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    wallOfLoveMetrics<T extends MetricsDate$wallOfLoveMetricsArgs<ExtArgs> = {}>(args?: Subset<T, MetricsDate$wallOfLoveMetricsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WallOfLoveMetricsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MetricsDate model
   */
  interface MetricsDateFieldRefs {
    readonly id: FieldRef<"MetricsDate", 'String'>
    readonly date: FieldRef<"MetricsDate", 'DateTime'>
    readonly createdAt: FieldRef<"MetricsDate", 'DateTime'>
    readonly updatedAt: FieldRef<"MetricsDate", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MetricsDate findUnique
   */
  export type MetricsDateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricsDate
     */
    select?: MetricsDateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetricsDate
     */
    omit?: MetricsDateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricsDateInclude<ExtArgs> | null
    /**
     * Filter, which MetricsDate to fetch.
     */
    where: MetricsDateWhereUniqueInput
  }

  /**
   * MetricsDate findUniqueOrThrow
   */
  export type MetricsDateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricsDate
     */
    select?: MetricsDateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetricsDate
     */
    omit?: MetricsDateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricsDateInclude<ExtArgs> | null
    /**
     * Filter, which MetricsDate to fetch.
     */
    where: MetricsDateWhereUniqueInput
  }

  /**
   * MetricsDate findFirst
   */
  export type MetricsDateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricsDate
     */
    select?: MetricsDateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetricsDate
     */
    omit?: MetricsDateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricsDateInclude<ExtArgs> | null
    /**
     * Filter, which MetricsDate to fetch.
     */
    where?: MetricsDateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MetricsDates to fetch.
     */
    orderBy?: MetricsDateOrderByWithRelationInput | MetricsDateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MetricsDates.
     */
    cursor?: MetricsDateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MetricsDates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MetricsDates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MetricsDates.
     */
    distinct?: MetricsDateScalarFieldEnum | MetricsDateScalarFieldEnum[]
  }

  /**
   * MetricsDate findFirstOrThrow
   */
  export type MetricsDateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricsDate
     */
    select?: MetricsDateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetricsDate
     */
    omit?: MetricsDateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricsDateInclude<ExtArgs> | null
    /**
     * Filter, which MetricsDate to fetch.
     */
    where?: MetricsDateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MetricsDates to fetch.
     */
    orderBy?: MetricsDateOrderByWithRelationInput | MetricsDateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MetricsDates.
     */
    cursor?: MetricsDateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MetricsDates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MetricsDates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MetricsDates.
     */
    distinct?: MetricsDateScalarFieldEnum | MetricsDateScalarFieldEnum[]
  }

  /**
   * MetricsDate findMany
   */
  export type MetricsDateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricsDate
     */
    select?: MetricsDateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetricsDate
     */
    omit?: MetricsDateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricsDateInclude<ExtArgs> | null
    /**
     * Filter, which MetricsDates to fetch.
     */
    where?: MetricsDateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MetricsDates to fetch.
     */
    orderBy?: MetricsDateOrderByWithRelationInput | MetricsDateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MetricsDates.
     */
    cursor?: MetricsDateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MetricsDates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MetricsDates.
     */
    skip?: number
    distinct?: MetricsDateScalarFieldEnum | MetricsDateScalarFieldEnum[]
  }

  /**
   * MetricsDate create
   */
  export type MetricsDateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricsDate
     */
    select?: MetricsDateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetricsDate
     */
    omit?: MetricsDateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricsDateInclude<ExtArgs> | null
    /**
     * The data needed to create a MetricsDate.
     */
    data: XOR<MetricsDateCreateInput, MetricsDateUncheckedCreateInput>
  }

  /**
   * MetricsDate createMany
   */
  export type MetricsDateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MetricsDates.
     */
    data: MetricsDateCreateManyInput | MetricsDateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MetricsDate createManyAndReturn
   */
  export type MetricsDateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricsDate
     */
    select?: MetricsDateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MetricsDate
     */
    omit?: MetricsDateOmit<ExtArgs> | null
    /**
     * The data used to create many MetricsDates.
     */
    data: MetricsDateCreateManyInput | MetricsDateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MetricsDate update
   */
  export type MetricsDateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricsDate
     */
    select?: MetricsDateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetricsDate
     */
    omit?: MetricsDateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricsDateInclude<ExtArgs> | null
    /**
     * The data needed to update a MetricsDate.
     */
    data: XOR<MetricsDateUpdateInput, MetricsDateUncheckedUpdateInput>
    /**
     * Choose, which MetricsDate to update.
     */
    where: MetricsDateWhereUniqueInput
  }

  /**
   * MetricsDate updateMany
   */
  export type MetricsDateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MetricsDates.
     */
    data: XOR<MetricsDateUpdateManyMutationInput, MetricsDateUncheckedUpdateManyInput>
    /**
     * Filter which MetricsDates to update
     */
    where?: MetricsDateWhereInput
    /**
     * Limit how many MetricsDates to update.
     */
    limit?: number
  }

  /**
   * MetricsDate updateManyAndReturn
   */
  export type MetricsDateUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricsDate
     */
    select?: MetricsDateSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MetricsDate
     */
    omit?: MetricsDateOmit<ExtArgs> | null
    /**
     * The data used to update MetricsDates.
     */
    data: XOR<MetricsDateUpdateManyMutationInput, MetricsDateUncheckedUpdateManyInput>
    /**
     * Filter which MetricsDates to update
     */
    where?: MetricsDateWhereInput
    /**
     * Limit how many MetricsDates to update.
     */
    limit?: number
  }

  /**
   * MetricsDate upsert
   */
  export type MetricsDateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricsDate
     */
    select?: MetricsDateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetricsDate
     */
    omit?: MetricsDateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricsDateInclude<ExtArgs> | null
    /**
     * The filter to search for the MetricsDate to update in case it exists.
     */
    where: MetricsDateWhereUniqueInput
    /**
     * In case the MetricsDate found by the `where` argument doesn't exist, create a new MetricsDate with this data.
     */
    create: XOR<MetricsDateCreateInput, MetricsDateUncheckedCreateInput>
    /**
     * In case the MetricsDate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MetricsDateUpdateInput, MetricsDateUncheckedUpdateInput>
  }

  /**
   * MetricsDate delete
   */
  export type MetricsDateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricsDate
     */
    select?: MetricsDateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetricsDate
     */
    omit?: MetricsDateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricsDateInclude<ExtArgs> | null
    /**
     * Filter which MetricsDate to delete.
     */
    where: MetricsDateWhereUniqueInput
  }

  /**
   * MetricsDate deleteMany
   */
  export type MetricsDateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MetricsDates to delete
     */
    where?: MetricsDateWhereInput
    /**
     * Limit how many MetricsDates to delete.
     */
    limit?: number
  }

  /**
   * MetricsDate.requestTestimonialMetrics
   */
  export type MetricsDate$requestTestimonialMetricsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestTestimonialMetrics
     */
    select?: RequestTestimonialMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestTestimonialMetrics
     */
    omit?: RequestTestimonialMetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestTestimonialMetricsInclude<ExtArgs> | null
    where?: RequestTestimonialMetricsWhereInput
    orderBy?: RequestTestimonialMetricsOrderByWithRelationInput | RequestTestimonialMetricsOrderByWithRelationInput[]
    cursor?: RequestTestimonialMetricsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RequestTestimonialMetricsScalarFieldEnum | RequestTestimonialMetricsScalarFieldEnum[]
  }

  /**
   * MetricsDate.wallOfLoveMetrics
   */
  export type MetricsDate$wallOfLoveMetricsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WallOfLoveMetrics
     */
    select?: WallOfLoveMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WallOfLoveMetrics
     */
    omit?: WallOfLoveMetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WallOfLoveMetricsInclude<ExtArgs> | null
    where?: WallOfLoveMetricsWhereInput
    orderBy?: WallOfLoveMetricsOrderByWithRelationInput | WallOfLoveMetricsOrderByWithRelationInput[]
    cursor?: WallOfLoveMetricsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WallOfLoveMetricsScalarFieldEnum | WallOfLoveMetricsScalarFieldEnum[]
  }

  /**
   * MetricsDate without action
   */
  export type MetricsDateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricsDate
     */
    select?: MetricsDateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetricsDate
     */
    omit?: MetricsDateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricsDateInclude<ExtArgs> | null
  }


  /**
   * Model RequestTestimonialMetrics
   */

  export type AggregateRequestTestimonialMetrics = {
    _count: RequestTestimonialMetricsCountAggregateOutputType | null
    _avg: RequestTestimonialMetricsAvgAggregateOutputType | null
    _sum: RequestTestimonialMetricsSumAggregateOutputType | null
    _min: RequestTestimonialMetricsMinAggregateOutputType | null
    _max: RequestTestimonialMetricsMaxAggregateOutputType | null
  }

  export type RequestTestimonialMetricsAvgAggregateOutputType = {
    pageViews: number | null
    visitors: number | null
    completedActions: number | null
  }

  export type RequestTestimonialMetricsSumAggregateOutputType = {
    pageViews: number | null
    visitors: number | null
    completedActions: number | null
  }

  export type RequestTestimonialMetricsMinAggregateOutputType = {
    id: string | null
    spaceId: string | null
    dateId: string | null
    pageViews: number | null
    visitors: number | null
    completedActions: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RequestTestimonialMetricsMaxAggregateOutputType = {
    id: string | null
    spaceId: string | null
    dateId: string | null
    pageViews: number | null
    visitors: number | null
    completedActions: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RequestTestimonialMetricsCountAggregateOutputType = {
    id: number
    spaceId: number
    dateId: number
    pageViews: number
    visitors: number
    completedActions: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RequestTestimonialMetricsAvgAggregateInputType = {
    pageViews?: true
    visitors?: true
    completedActions?: true
  }

  export type RequestTestimonialMetricsSumAggregateInputType = {
    pageViews?: true
    visitors?: true
    completedActions?: true
  }

  export type RequestTestimonialMetricsMinAggregateInputType = {
    id?: true
    spaceId?: true
    dateId?: true
    pageViews?: true
    visitors?: true
    completedActions?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RequestTestimonialMetricsMaxAggregateInputType = {
    id?: true
    spaceId?: true
    dateId?: true
    pageViews?: true
    visitors?: true
    completedActions?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RequestTestimonialMetricsCountAggregateInputType = {
    id?: true
    spaceId?: true
    dateId?: true
    pageViews?: true
    visitors?: true
    completedActions?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RequestTestimonialMetricsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RequestTestimonialMetrics to aggregate.
     */
    where?: RequestTestimonialMetricsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequestTestimonialMetrics to fetch.
     */
    orderBy?: RequestTestimonialMetricsOrderByWithRelationInput | RequestTestimonialMetricsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RequestTestimonialMetricsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequestTestimonialMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequestTestimonialMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RequestTestimonialMetrics
    **/
    _count?: true | RequestTestimonialMetricsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RequestTestimonialMetricsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RequestTestimonialMetricsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RequestTestimonialMetricsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RequestTestimonialMetricsMaxAggregateInputType
  }

  export type GetRequestTestimonialMetricsAggregateType<T extends RequestTestimonialMetricsAggregateArgs> = {
        [P in keyof T & keyof AggregateRequestTestimonialMetrics]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRequestTestimonialMetrics[P]>
      : GetScalarType<T[P], AggregateRequestTestimonialMetrics[P]>
  }




  export type RequestTestimonialMetricsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RequestTestimonialMetricsWhereInput
    orderBy?: RequestTestimonialMetricsOrderByWithAggregationInput | RequestTestimonialMetricsOrderByWithAggregationInput[]
    by: RequestTestimonialMetricsScalarFieldEnum[] | RequestTestimonialMetricsScalarFieldEnum
    having?: RequestTestimonialMetricsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RequestTestimonialMetricsCountAggregateInputType | true
    _avg?: RequestTestimonialMetricsAvgAggregateInputType
    _sum?: RequestTestimonialMetricsSumAggregateInputType
    _min?: RequestTestimonialMetricsMinAggregateInputType
    _max?: RequestTestimonialMetricsMaxAggregateInputType
  }

  export type RequestTestimonialMetricsGroupByOutputType = {
    id: string
    spaceId: string
    dateId: string
    pageViews: number
    visitors: number
    completedActions: number
    createdAt: Date
    updatedAt: Date
    _count: RequestTestimonialMetricsCountAggregateOutputType | null
    _avg: RequestTestimonialMetricsAvgAggregateOutputType | null
    _sum: RequestTestimonialMetricsSumAggregateOutputType | null
    _min: RequestTestimonialMetricsMinAggregateOutputType | null
    _max: RequestTestimonialMetricsMaxAggregateOutputType | null
  }

  type GetRequestTestimonialMetricsGroupByPayload<T extends RequestTestimonialMetricsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RequestTestimonialMetricsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RequestTestimonialMetricsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RequestTestimonialMetricsGroupByOutputType[P]>
            : GetScalarType<T[P], RequestTestimonialMetricsGroupByOutputType[P]>
        }
      >
    >


  export type RequestTestimonialMetricsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    spaceId?: boolean
    dateId?: boolean
    pageViews?: boolean
    visitors?: boolean
    completedActions?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    space?: boolean | SpaceDefaultArgs<ExtArgs>
    date?: boolean | MetricsDateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["requestTestimonialMetrics"]>

  export type RequestTestimonialMetricsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    spaceId?: boolean
    dateId?: boolean
    pageViews?: boolean
    visitors?: boolean
    completedActions?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    space?: boolean | SpaceDefaultArgs<ExtArgs>
    date?: boolean | MetricsDateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["requestTestimonialMetrics"]>

  export type RequestTestimonialMetricsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    spaceId?: boolean
    dateId?: boolean
    pageViews?: boolean
    visitors?: boolean
    completedActions?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    space?: boolean | SpaceDefaultArgs<ExtArgs>
    date?: boolean | MetricsDateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["requestTestimonialMetrics"]>

  export type RequestTestimonialMetricsSelectScalar = {
    id?: boolean
    spaceId?: boolean
    dateId?: boolean
    pageViews?: boolean
    visitors?: boolean
    completedActions?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RequestTestimonialMetricsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "spaceId" | "dateId" | "pageViews" | "visitors" | "completedActions" | "createdAt" | "updatedAt", ExtArgs["result"]["requestTestimonialMetrics"]>
  export type RequestTestimonialMetricsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    space?: boolean | SpaceDefaultArgs<ExtArgs>
    date?: boolean | MetricsDateDefaultArgs<ExtArgs>
  }
  export type RequestTestimonialMetricsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    space?: boolean | SpaceDefaultArgs<ExtArgs>
    date?: boolean | MetricsDateDefaultArgs<ExtArgs>
  }
  export type RequestTestimonialMetricsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    space?: boolean | SpaceDefaultArgs<ExtArgs>
    date?: boolean | MetricsDateDefaultArgs<ExtArgs>
  }

  export type $RequestTestimonialMetricsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RequestTestimonialMetrics"
    objects: {
      space: Prisma.$SpacePayload<ExtArgs>
      date: Prisma.$MetricsDatePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      spaceId: string
      dateId: string
      pageViews: number
      visitors: number
      completedActions: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["requestTestimonialMetrics"]>
    composites: {}
  }

  type RequestTestimonialMetricsGetPayload<S extends boolean | null | undefined | RequestTestimonialMetricsDefaultArgs> = $Result.GetResult<Prisma.$RequestTestimonialMetricsPayload, S>

  type RequestTestimonialMetricsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RequestTestimonialMetricsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RequestTestimonialMetricsCountAggregateInputType | true
    }

  export interface RequestTestimonialMetricsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RequestTestimonialMetrics'], meta: { name: 'RequestTestimonialMetrics' } }
    /**
     * Find zero or one RequestTestimonialMetrics that matches the filter.
     * @param {RequestTestimonialMetricsFindUniqueArgs} args - Arguments to find a RequestTestimonialMetrics
     * @example
     * // Get one RequestTestimonialMetrics
     * const requestTestimonialMetrics = await prisma.requestTestimonialMetrics.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RequestTestimonialMetricsFindUniqueArgs>(args: SelectSubset<T, RequestTestimonialMetricsFindUniqueArgs<ExtArgs>>): Prisma__RequestTestimonialMetricsClient<$Result.GetResult<Prisma.$RequestTestimonialMetricsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RequestTestimonialMetrics that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RequestTestimonialMetricsFindUniqueOrThrowArgs} args - Arguments to find a RequestTestimonialMetrics
     * @example
     * // Get one RequestTestimonialMetrics
     * const requestTestimonialMetrics = await prisma.requestTestimonialMetrics.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RequestTestimonialMetricsFindUniqueOrThrowArgs>(args: SelectSubset<T, RequestTestimonialMetricsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RequestTestimonialMetricsClient<$Result.GetResult<Prisma.$RequestTestimonialMetricsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RequestTestimonialMetrics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestTestimonialMetricsFindFirstArgs} args - Arguments to find a RequestTestimonialMetrics
     * @example
     * // Get one RequestTestimonialMetrics
     * const requestTestimonialMetrics = await prisma.requestTestimonialMetrics.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RequestTestimonialMetricsFindFirstArgs>(args?: SelectSubset<T, RequestTestimonialMetricsFindFirstArgs<ExtArgs>>): Prisma__RequestTestimonialMetricsClient<$Result.GetResult<Prisma.$RequestTestimonialMetricsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RequestTestimonialMetrics that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestTestimonialMetricsFindFirstOrThrowArgs} args - Arguments to find a RequestTestimonialMetrics
     * @example
     * // Get one RequestTestimonialMetrics
     * const requestTestimonialMetrics = await prisma.requestTestimonialMetrics.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RequestTestimonialMetricsFindFirstOrThrowArgs>(args?: SelectSubset<T, RequestTestimonialMetricsFindFirstOrThrowArgs<ExtArgs>>): Prisma__RequestTestimonialMetricsClient<$Result.GetResult<Prisma.$RequestTestimonialMetricsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RequestTestimonialMetrics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestTestimonialMetricsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RequestTestimonialMetrics
     * const requestTestimonialMetrics = await prisma.requestTestimonialMetrics.findMany()
     * 
     * // Get first 10 RequestTestimonialMetrics
     * const requestTestimonialMetrics = await prisma.requestTestimonialMetrics.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const requestTestimonialMetricsWithIdOnly = await prisma.requestTestimonialMetrics.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RequestTestimonialMetricsFindManyArgs>(args?: SelectSubset<T, RequestTestimonialMetricsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestTestimonialMetricsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RequestTestimonialMetrics.
     * @param {RequestTestimonialMetricsCreateArgs} args - Arguments to create a RequestTestimonialMetrics.
     * @example
     * // Create one RequestTestimonialMetrics
     * const RequestTestimonialMetrics = await prisma.requestTestimonialMetrics.create({
     *   data: {
     *     // ... data to create a RequestTestimonialMetrics
     *   }
     * })
     * 
     */
    create<T extends RequestTestimonialMetricsCreateArgs>(args: SelectSubset<T, RequestTestimonialMetricsCreateArgs<ExtArgs>>): Prisma__RequestTestimonialMetricsClient<$Result.GetResult<Prisma.$RequestTestimonialMetricsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RequestTestimonialMetrics.
     * @param {RequestTestimonialMetricsCreateManyArgs} args - Arguments to create many RequestTestimonialMetrics.
     * @example
     * // Create many RequestTestimonialMetrics
     * const requestTestimonialMetrics = await prisma.requestTestimonialMetrics.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RequestTestimonialMetricsCreateManyArgs>(args?: SelectSubset<T, RequestTestimonialMetricsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RequestTestimonialMetrics and returns the data saved in the database.
     * @param {RequestTestimonialMetricsCreateManyAndReturnArgs} args - Arguments to create many RequestTestimonialMetrics.
     * @example
     * // Create many RequestTestimonialMetrics
     * const requestTestimonialMetrics = await prisma.requestTestimonialMetrics.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RequestTestimonialMetrics and only return the `id`
     * const requestTestimonialMetricsWithIdOnly = await prisma.requestTestimonialMetrics.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RequestTestimonialMetricsCreateManyAndReturnArgs>(args?: SelectSubset<T, RequestTestimonialMetricsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestTestimonialMetricsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RequestTestimonialMetrics.
     * @param {RequestTestimonialMetricsDeleteArgs} args - Arguments to delete one RequestTestimonialMetrics.
     * @example
     * // Delete one RequestTestimonialMetrics
     * const RequestTestimonialMetrics = await prisma.requestTestimonialMetrics.delete({
     *   where: {
     *     // ... filter to delete one RequestTestimonialMetrics
     *   }
     * })
     * 
     */
    delete<T extends RequestTestimonialMetricsDeleteArgs>(args: SelectSubset<T, RequestTestimonialMetricsDeleteArgs<ExtArgs>>): Prisma__RequestTestimonialMetricsClient<$Result.GetResult<Prisma.$RequestTestimonialMetricsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RequestTestimonialMetrics.
     * @param {RequestTestimonialMetricsUpdateArgs} args - Arguments to update one RequestTestimonialMetrics.
     * @example
     * // Update one RequestTestimonialMetrics
     * const requestTestimonialMetrics = await prisma.requestTestimonialMetrics.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RequestTestimonialMetricsUpdateArgs>(args: SelectSubset<T, RequestTestimonialMetricsUpdateArgs<ExtArgs>>): Prisma__RequestTestimonialMetricsClient<$Result.GetResult<Prisma.$RequestTestimonialMetricsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RequestTestimonialMetrics.
     * @param {RequestTestimonialMetricsDeleteManyArgs} args - Arguments to filter RequestTestimonialMetrics to delete.
     * @example
     * // Delete a few RequestTestimonialMetrics
     * const { count } = await prisma.requestTestimonialMetrics.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RequestTestimonialMetricsDeleteManyArgs>(args?: SelectSubset<T, RequestTestimonialMetricsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RequestTestimonialMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestTestimonialMetricsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RequestTestimonialMetrics
     * const requestTestimonialMetrics = await prisma.requestTestimonialMetrics.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RequestTestimonialMetricsUpdateManyArgs>(args: SelectSubset<T, RequestTestimonialMetricsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RequestTestimonialMetrics and returns the data updated in the database.
     * @param {RequestTestimonialMetricsUpdateManyAndReturnArgs} args - Arguments to update many RequestTestimonialMetrics.
     * @example
     * // Update many RequestTestimonialMetrics
     * const requestTestimonialMetrics = await prisma.requestTestimonialMetrics.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RequestTestimonialMetrics and only return the `id`
     * const requestTestimonialMetricsWithIdOnly = await prisma.requestTestimonialMetrics.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RequestTestimonialMetricsUpdateManyAndReturnArgs>(args: SelectSubset<T, RequestTestimonialMetricsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestTestimonialMetricsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RequestTestimonialMetrics.
     * @param {RequestTestimonialMetricsUpsertArgs} args - Arguments to update or create a RequestTestimonialMetrics.
     * @example
     * // Update or create a RequestTestimonialMetrics
     * const requestTestimonialMetrics = await prisma.requestTestimonialMetrics.upsert({
     *   create: {
     *     // ... data to create a RequestTestimonialMetrics
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RequestTestimonialMetrics we want to update
     *   }
     * })
     */
    upsert<T extends RequestTestimonialMetricsUpsertArgs>(args: SelectSubset<T, RequestTestimonialMetricsUpsertArgs<ExtArgs>>): Prisma__RequestTestimonialMetricsClient<$Result.GetResult<Prisma.$RequestTestimonialMetricsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RequestTestimonialMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestTestimonialMetricsCountArgs} args - Arguments to filter RequestTestimonialMetrics to count.
     * @example
     * // Count the number of RequestTestimonialMetrics
     * const count = await prisma.requestTestimonialMetrics.count({
     *   where: {
     *     // ... the filter for the RequestTestimonialMetrics we want to count
     *   }
     * })
    **/
    count<T extends RequestTestimonialMetricsCountArgs>(
      args?: Subset<T, RequestTestimonialMetricsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RequestTestimonialMetricsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RequestTestimonialMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestTestimonialMetricsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RequestTestimonialMetricsAggregateArgs>(args: Subset<T, RequestTestimonialMetricsAggregateArgs>): Prisma.PrismaPromise<GetRequestTestimonialMetricsAggregateType<T>>

    /**
     * Group by RequestTestimonialMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestTestimonialMetricsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RequestTestimonialMetricsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RequestTestimonialMetricsGroupByArgs['orderBy'] }
        : { orderBy?: RequestTestimonialMetricsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RequestTestimonialMetricsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRequestTestimonialMetricsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RequestTestimonialMetrics model
   */
  readonly fields: RequestTestimonialMetricsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RequestTestimonialMetrics.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RequestTestimonialMetricsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    space<T extends SpaceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SpaceDefaultArgs<ExtArgs>>): Prisma__SpaceClient<$Result.GetResult<Prisma.$SpacePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    date<T extends MetricsDateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MetricsDateDefaultArgs<ExtArgs>>): Prisma__MetricsDateClient<$Result.GetResult<Prisma.$MetricsDatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RequestTestimonialMetrics model
   */
  interface RequestTestimonialMetricsFieldRefs {
    readonly id: FieldRef<"RequestTestimonialMetrics", 'String'>
    readonly spaceId: FieldRef<"RequestTestimonialMetrics", 'String'>
    readonly dateId: FieldRef<"RequestTestimonialMetrics", 'String'>
    readonly pageViews: FieldRef<"RequestTestimonialMetrics", 'Int'>
    readonly visitors: FieldRef<"RequestTestimonialMetrics", 'Int'>
    readonly completedActions: FieldRef<"RequestTestimonialMetrics", 'Int'>
    readonly createdAt: FieldRef<"RequestTestimonialMetrics", 'DateTime'>
    readonly updatedAt: FieldRef<"RequestTestimonialMetrics", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RequestTestimonialMetrics findUnique
   */
  export type RequestTestimonialMetricsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestTestimonialMetrics
     */
    select?: RequestTestimonialMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestTestimonialMetrics
     */
    omit?: RequestTestimonialMetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestTestimonialMetricsInclude<ExtArgs> | null
    /**
     * Filter, which RequestTestimonialMetrics to fetch.
     */
    where: RequestTestimonialMetricsWhereUniqueInput
  }

  /**
   * RequestTestimonialMetrics findUniqueOrThrow
   */
  export type RequestTestimonialMetricsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestTestimonialMetrics
     */
    select?: RequestTestimonialMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestTestimonialMetrics
     */
    omit?: RequestTestimonialMetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestTestimonialMetricsInclude<ExtArgs> | null
    /**
     * Filter, which RequestTestimonialMetrics to fetch.
     */
    where: RequestTestimonialMetricsWhereUniqueInput
  }

  /**
   * RequestTestimonialMetrics findFirst
   */
  export type RequestTestimonialMetricsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestTestimonialMetrics
     */
    select?: RequestTestimonialMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestTestimonialMetrics
     */
    omit?: RequestTestimonialMetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestTestimonialMetricsInclude<ExtArgs> | null
    /**
     * Filter, which RequestTestimonialMetrics to fetch.
     */
    where?: RequestTestimonialMetricsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequestTestimonialMetrics to fetch.
     */
    orderBy?: RequestTestimonialMetricsOrderByWithRelationInput | RequestTestimonialMetricsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RequestTestimonialMetrics.
     */
    cursor?: RequestTestimonialMetricsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequestTestimonialMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequestTestimonialMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RequestTestimonialMetrics.
     */
    distinct?: RequestTestimonialMetricsScalarFieldEnum | RequestTestimonialMetricsScalarFieldEnum[]
  }

  /**
   * RequestTestimonialMetrics findFirstOrThrow
   */
  export type RequestTestimonialMetricsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestTestimonialMetrics
     */
    select?: RequestTestimonialMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestTestimonialMetrics
     */
    omit?: RequestTestimonialMetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestTestimonialMetricsInclude<ExtArgs> | null
    /**
     * Filter, which RequestTestimonialMetrics to fetch.
     */
    where?: RequestTestimonialMetricsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequestTestimonialMetrics to fetch.
     */
    orderBy?: RequestTestimonialMetricsOrderByWithRelationInput | RequestTestimonialMetricsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RequestTestimonialMetrics.
     */
    cursor?: RequestTestimonialMetricsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequestTestimonialMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequestTestimonialMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RequestTestimonialMetrics.
     */
    distinct?: RequestTestimonialMetricsScalarFieldEnum | RequestTestimonialMetricsScalarFieldEnum[]
  }

  /**
   * RequestTestimonialMetrics findMany
   */
  export type RequestTestimonialMetricsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestTestimonialMetrics
     */
    select?: RequestTestimonialMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestTestimonialMetrics
     */
    omit?: RequestTestimonialMetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestTestimonialMetricsInclude<ExtArgs> | null
    /**
     * Filter, which RequestTestimonialMetrics to fetch.
     */
    where?: RequestTestimonialMetricsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequestTestimonialMetrics to fetch.
     */
    orderBy?: RequestTestimonialMetricsOrderByWithRelationInput | RequestTestimonialMetricsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RequestTestimonialMetrics.
     */
    cursor?: RequestTestimonialMetricsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequestTestimonialMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequestTestimonialMetrics.
     */
    skip?: number
    distinct?: RequestTestimonialMetricsScalarFieldEnum | RequestTestimonialMetricsScalarFieldEnum[]
  }

  /**
   * RequestTestimonialMetrics create
   */
  export type RequestTestimonialMetricsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestTestimonialMetrics
     */
    select?: RequestTestimonialMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestTestimonialMetrics
     */
    omit?: RequestTestimonialMetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestTestimonialMetricsInclude<ExtArgs> | null
    /**
     * The data needed to create a RequestTestimonialMetrics.
     */
    data: XOR<RequestTestimonialMetricsCreateInput, RequestTestimonialMetricsUncheckedCreateInput>
  }

  /**
   * RequestTestimonialMetrics createMany
   */
  export type RequestTestimonialMetricsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RequestTestimonialMetrics.
     */
    data: RequestTestimonialMetricsCreateManyInput | RequestTestimonialMetricsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RequestTestimonialMetrics createManyAndReturn
   */
  export type RequestTestimonialMetricsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestTestimonialMetrics
     */
    select?: RequestTestimonialMetricsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RequestTestimonialMetrics
     */
    omit?: RequestTestimonialMetricsOmit<ExtArgs> | null
    /**
     * The data used to create many RequestTestimonialMetrics.
     */
    data: RequestTestimonialMetricsCreateManyInput | RequestTestimonialMetricsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestTestimonialMetricsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RequestTestimonialMetrics update
   */
  export type RequestTestimonialMetricsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestTestimonialMetrics
     */
    select?: RequestTestimonialMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestTestimonialMetrics
     */
    omit?: RequestTestimonialMetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestTestimonialMetricsInclude<ExtArgs> | null
    /**
     * The data needed to update a RequestTestimonialMetrics.
     */
    data: XOR<RequestTestimonialMetricsUpdateInput, RequestTestimonialMetricsUncheckedUpdateInput>
    /**
     * Choose, which RequestTestimonialMetrics to update.
     */
    where: RequestTestimonialMetricsWhereUniqueInput
  }

  /**
   * RequestTestimonialMetrics updateMany
   */
  export type RequestTestimonialMetricsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RequestTestimonialMetrics.
     */
    data: XOR<RequestTestimonialMetricsUpdateManyMutationInput, RequestTestimonialMetricsUncheckedUpdateManyInput>
    /**
     * Filter which RequestTestimonialMetrics to update
     */
    where?: RequestTestimonialMetricsWhereInput
    /**
     * Limit how many RequestTestimonialMetrics to update.
     */
    limit?: number
  }

  /**
   * RequestTestimonialMetrics updateManyAndReturn
   */
  export type RequestTestimonialMetricsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestTestimonialMetrics
     */
    select?: RequestTestimonialMetricsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RequestTestimonialMetrics
     */
    omit?: RequestTestimonialMetricsOmit<ExtArgs> | null
    /**
     * The data used to update RequestTestimonialMetrics.
     */
    data: XOR<RequestTestimonialMetricsUpdateManyMutationInput, RequestTestimonialMetricsUncheckedUpdateManyInput>
    /**
     * Filter which RequestTestimonialMetrics to update
     */
    where?: RequestTestimonialMetricsWhereInput
    /**
     * Limit how many RequestTestimonialMetrics to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestTestimonialMetricsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RequestTestimonialMetrics upsert
   */
  export type RequestTestimonialMetricsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestTestimonialMetrics
     */
    select?: RequestTestimonialMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestTestimonialMetrics
     */
    omit?: RequestTestimonialMetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestTestimonialMetricsInclude<ExtArgs> | null
    /**
     * The filter to search for the RequestTestimonialMetrics to update in case it exists.
     */
    where: RequestTestimonialMetricsWhereUniqueInput
    /**
     * In case the RequestTestimonialMetrics found by the `where` argument doesn't exist, create a new RequestTestimonialMetrics with this data.
     */
    create: XOR<RequestTestimonialMetricsCreateInput, RequestTestimonialMetricsUncheckedCreateInput>
    /**
     * In case the RequestTestimonialMetrics was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RequestTestimonialMetricsUpdateInput, RequestTestimonialMetricsUncheckedUpdateInput>
  }

  /**
   * RequestTestimonialMetrics delete
   */
  export type RequestTestimonialMetricsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestTestimonialMetrics
     */
    select?: RequestTestimonialMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestTestimonialMetrics
     */
    omit?: RequestTestimonialMetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestTestimonialMetricsInclude<ExtArgs> | null
    /**
     * Filter which RequestTestimonialMetrics to delete.
     */
    where: RequestTestimonialMetricsWhereUniqueInput
  }

  /**
   * RequestTestimonialMetrics deleteMany
   */
  export type RequestTestimonialMetricsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RequestTestimonialMetrics to delete
     */
    where?: RequestTestimonialMetricsWhereInput
    /**
     * Limit how many RequestTestimonialMetrics to delete.
     */
    limit?: number
  }

  /**
   * RequestTestimonialMetrics without action
   */
  export type RequestTestimonialMetricsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestTestimonialMetrics
     */
    select?: RequestTestimonialMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestTestimonialMetrics
     */
    omit?: RequestTestimonialMetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestTestimonialMetricsInclude<ExtArgs> | null
  }


  /**
   * Model WallOfLoveMetrics
   */

  export type AggregateWallOfLoveMetrics = {
    _count: WallOfLoveMetricsCountAggregateOutputType | null
    _avg: WallOfLoveMetricsAvgAggregateOutputType | null
    _sum: WallOfLoveMetricsSumAggregateOutputType | null
    _min: WallOfLoveMetricsMinAggregateOutputType | null
    _max: WallOfLoveMetricsMaxAggregateOutputType | null
  }

  export type WallOfLoveMetricsAvgAggregateOutputType = {
    pageViews: number | null
    visitors: number | null
    timeSpentOnWallOfLove: number | null
  }

  export type WallOfLoveMetricsSumAggregateOutputType = {
    pageViews: number | null
    visitors: number | null
    timeSpentOnWallOfLove: number | null
  }

  export type WallOfLoveMetricsMinAggregateOutputType = {
    id: string | null
    spaceId: string | null
    dateId: string | null
    pageViews: number | null
    visitors: number | null
    timeSpentOnWallOfLove: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WallOfLoveMetricsMaxAggregateOutputType = {
    id: string | null
    spaceId: string | null
    dateId: string | null
    pageViews: number | null
    visitors: number | null
    timeSpentOnWallOfLove: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WallOfLoveMetricsCountAggregateOutputType = {
    id: number
    spaceId: number
    dateId: number
    pageViews: number
    visitors: number
    timeSpentOnWallOfLove: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WallOfLoveMetricsAvgAggregateInputType = {
    pageViews?: true
    visitors?: true
    timeSpentOnWallOfLove?: true
  }

  export type WallOfLoveMetricsSumAggregateInputType = {
    pageViews?: true
    visitors?: true
    timeSpentOnWallOfLove?: true
  }

  export type WallOfLoveMetricsMinAggregateInputType = {
    id?: true
    spaceId?: true
    dateId?: true
    pageViews?: true
    visitors?: true
    timeSpentOnWallOfLove?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WallOfLoveMetricsMaxAggregateInputType = {
    id?: true
    spaceId?: true
    dateId?: true
    pageViews?: true
    visitors?: true
    timeSpentOnWallOfLove?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WallOfLoveMetricsCountAggregateInputType = {
    id?: true
    spaceId?: true
    dateId?: true
    pageViews?: true
    visitors?: true
    timeSpentOnWallOfLove?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WallOfLoveMetricsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WallOfLoveMetrics to aggregate.
     */
    where?: WallOfLoveMetricsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WallOfLoveMetrics to fetch.
     */
    orderBy?: WallOfLoveMetricsOrderByWithRelationInput | WallOfLoveMetricsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WallOfLoveMetricsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WallOfLoveMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WallOfLoveMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WallOfLoveMetrics
    **/
    _count?: true | WallOfLoveMetricsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WallOfLoveMetricsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WallOfLoveMetricsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WallOfLoveMetricsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WallOfLoveMetricsMaxAggregateInputType
  }

  export type GetWallOfLoveMetricsAggregateType<T extends WallOfLoveMetricsAggregateArgs> = {
        [P in keyof T & keyof AggregateWallOfLoveMetrics]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWallOfLoveMetrics[P]>
      : GetScalarType<T[P], AggregateWallOfLoveMetrics[P]>
  }




  export type WallOfLoveMetricsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WallOfLoveMetricsWhereInput
    orderBy?: WallOfLoveMetricsOrderByWithAggregationInput | WallOfLoveMetricsOrderByWithAggregationInput[]
    by: WallOfLoveMetricsScalarFieldEnum[] | WallOfLoveMetricsScalarFieldEnum
    having?: WallOfLoveMetricsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WallOfLoveMetricsCountAggregateInputType | true
    _avg?: WallOfLoveMetricsAvgAggregateInputType
    _sum?: WallOfLoveMetricsSumAggregateInputType
    _min?: WallOfLoveMetricsMinAggregateInputType
    _max?: WallOfLoveMetricsMaxAggregateInputType
  }

  export type WallOfLoveMetricsGroupByOutputType = {
    id: string
    spaceId: string
    dateId: string
    pageViews: number
    visitors: number
    timeSpentOnWallOfLove: number
    createdAt: Date
    updatedAt: Date
    _count: WallOfLoveMetricsCountAggregateOutputType | null
    _avg: WallOfLoveMetricsAvgAggregateOutputType | null
    _sum: WallOfLoveMetricsSumAggregateOutputType | null
    _min: WallOfLoveMetricsMinAggregateOutputType | null
    _max: WallOfLoveMetricsMaxAggregateOutputType | null
  }

  type GetWallOfLoveMetricsGroupByPayload<T extends WallOfLoveMetricsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WallOfLoveMetricsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WallOfLoveMetricsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WallOfLoveMetricsGroupByOutputType[P]>
            : GetScalarType<T[P], WallOfLoveMetricsGroupByOutputType[P]>
        }
      >
    >


  export type WallOfLoveMetricsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    spaceId?: boolean
    dateId?: boolean
    pageViews?: boolean
    visitors?: boolean
    timeSpentOnWallOfLove?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    space?: boolean | SpaceDefaultArgs<ExtArgs>
    date?: boolean | MetricsDateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["wallOfLoveMetrics"]>

  export type WallOfLoveMetricsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    spaceId?: boolean
    dateId?: boolean
    pageViews?: boolean
    visitors?: boolean
    timeSpentOnWallOfLove?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    space?: boolean | SpaceDefaultArgs<ExtArgs>
    date?: boolean | MetricsDateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["wallOfLoveMetrics"]>

  export type WallOfLoveMetricsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    spaceId?: boolean
    dateId?: boolean
    pageViews?: boolean
    visitors?: boolean
    timeSpentOnWallOfLove?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    space?: boolean | SpaceDefaultArgs<ExtArgs>
    date?: boolean | MetricsDateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["wallOfLoveMetrics"]>

  export type WallOfLoveMetricsSelectScalar = {
    id?: boolean
    spaceId?: boolean
    dateId?: boolean
    pageViews?: boolean
    visitors?: boolean
    timeSpentOnWallOfLove?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type WallOfLoveMetricsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "spaceId" | "dateId" | "pageViews" | "visitors" | "timeSpentOnWallOfLove" | "createdAt" | "updatedAt", ExtArgs["result"]["wallOfLoveMetrics"]>
  export type WallOfLoveMetricsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    space?: boolean | SpaceDefaultArgs<ExtArgs>
    date?: boolean | MetricsDateDefaultArgs<ExtArgs>
  }
  export type WallOfLoveMetricsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    space?: boolean | SpaceDefaultArgs<ExtArgs>
    date?: boolean | MetricsDateDefaultArgs<ExtArgs>
  }
  export type WallOfLoveMetricsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    space?: boolean | SpaceDefaultArgs<ExtArgs>
    date?: boolean | MetricsDateDefaultArgs<ExtArgs>
  }

  export type $WallOfLoveMetricsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WallOfLoveMetrics"
    objects: {
      space: Prisma.$SpacePayload<ExtArgs>
      date: Prisma.$MetricsDatePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      spaceId: string
      dateId: string
      pageViews: number
      visitors: number
      timeSpentOnWallOfLove: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["wallOfLoveMetrics"]>
    composites: {}
  }

  type WallOfLoveMetricsGetPayload<S extends boolean | null | undefined | WallOfLoveMetricsDefaultArgs> = $Result.GetResult<Prisma.$WallOfLoveMetricsPayload, S>

  type WallOfLoveMetricsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WallOfLoveMetricsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WallOfLoveMetricsCountAggregateInputType | true
    }

  export interface WallOfLoveMetricsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WallOfLoveMetrics'], meta: { name: 'WallOfLoveMetrics' } }
    /**
     * Find zero or one WallOfLoveMetrics that matches the filter.
     * @param {WallOfLoveMetricsFindUniqueArgs} args - Arguments to find a WallOfLoveMetrics
     * @example
     * // Get one WallOfLoveMetrics
     * const wallOfLoveMetrics = await prisma.wallOfLoveMetrics.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WallOfLoveMetricsFindUniqueArgs>(args: SelectSubset<T, WallOfLoveMetricsFindUniqueArgs<ExtArgs>>): Prisma__WallOfLoveMetricsClient<$Result.GetResult<Prisma.$WallOfLoveMetricsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WallOfLoveMetrics that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WallOfLoveMetricsFindUniqueOrThrowArgs} args - Arguments to find a WallOfLoveMetrics
     * @example
     * // Get one WallOfLoveMetrics
     * const wallOfLoveMetrics = await prisma.wallOfLoveMetrics.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WallOfLoveMetricsFindUniqueOrThrowArgs>(args: SelectSubset<T, WallOfLoveMetricsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WallOfLoveMetricsClient<$Result.GetResult<Prisma.$WallOfLoveMetricsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WallOfLoveMetrics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WallOfLoveMetricsFindFirstArgs} args - Arguments to find a WallOfLoveMetrics
     * @example
     * // Get one WallOfLoveMetrics
     * const wallOfLoveMetrics = await prisma.wallOfLoveMetrics.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WallOfLoveMetricsFindFirstArgs>(args?: SelectSubset<T, WallOfLoveMetricsFindFirstArgs<ExtArgs>>): Prisma__WallOfLoveMetricsClient<$Result.GetResult<Prisma.$WallOfLoveMetricsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WallOfLoveMetrics that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WallOfLoveMetricsFindFirstOrThrowArgs} args - Arguments to find a WallOfLoveMetrics
     * @example
     * // Get one WallOfLoveMetrics
     * const wallOfLoveMetrics = await prisma.wallOfLoveMetrics.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WallOfLoveMetricsFindFirstOrThrowArgs>(args?: SelectSubset<T, WallOfLoveMetricsFindFirstOrThrowArgs<ExtArgs>>): Prisma__WallOfLoveMetricsClient<$Result.GetResult<Prisma.$WallOfLoveMetricsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WallOfLoveMetrics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WallOfLoveMetricsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WallOfLoveMetrics
     * const wallOfLoveMetrics = await prisma.wallOfLoveMetrics.findMany()
     * 
     * // Get first 10 WallOfLoveMetrics
     * const wallOfLoveMetrics = await prisma.wallOfLoveMetrics.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const wallOfLoveMetricsWithIdOnly = await prisma.wallOfLoveMetrics.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WallOfLoveMetricsFindManyArgs>(args?: SelectSubset<T, WallOfLoveMetricsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WallOfLoveMetricsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WallOfLoveMetrics.
     * @param {WallOfLoveMetricsCreateArgs} args - Arguments to create a WallOfLoveMetrics.
     * @example
     * // Create one WallOfLoveMetrics
     * const WallOfLoveMetrics = await prisma.wallOfLoveMetrics.create({
     *   data: {
     *     // ... data to create a WallOfLoveMetrics
     *   }
     * })
     * 
     */
    create<T extends WallOfLoveMetricsCreateArgs>(args: SelectSubset<T, WallOfLoveMetricsCreateArgs<ExtArgs>>): Prisma__WallOfLoveMetricsClient<$Result.GetResult<Prisma.$WallOfLoveMetricsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WallOfLoveMetrics.
     * @param {WallOfLoveMetricsCreateManyArgs} args - Arguments to create many WallOfLoveMetrics.
     * @example
     * // Create many WallOfLoveMetrics
     * const wallOfLoveMetrics = await prisma.wallOfLoveMetrics.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WallOfLoveMetricsCreateManyArgs>(args?: SelectSubset<T, WallOfLoveMetricsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WallOfLoveMetrics and returns the data saved in the database.
     * @param {WallOfLoveMetricsCreateManyAndReturnArgs} args - Arguments to create many WallOfLoveMetrics.
     * @example
     * // Create many WallOfLoveMetrics
     * const wallOfLoveMetrics = await prisma.wallOfLoveMetrics.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WallOfLoveMetrics and only return the `id`
     * const wallOfLoveMetricsWithIdOnly = await prisma.wallOfLoveMetrics.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WallOfLoveMetricsCreateManyAndReturnArgs>(args?: SelectSubset<T, WallOfLoveMetricsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WallOfLoveMetricsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WallOfLoveMetrics.
     * @param {WallOfLoveMetricsDeleteArgs} args - Arguments to delete one WallOfLoveMetrics.
     * @example
     * // Delete one WallOfLoveMetrics
     * const WallOfLoveMetrics = await prisma.wallOfLoveMetrics.delete({
     *   where: {
     *     // ... filter to delete one WallOfLoveMetrics
     *   }
     * })
     * 
     */
    delete<T extends WallOfLoveMetricsDeleteArgs>(args: SelectSubset<T, WallOfLoveMetricsDeleteArgs<ExtArgs>>): Prisma__WallOfLoveMetricsClient<$Result.GetResult<Prisma.$WallOfLoveMetricsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WallOfLoveMetrics.
     * @param {WallOfLoveMetricsUpdateArgs} args - Arguments to update one WallOfLoveMetrics.
     * @example
     * // Update one WallOfLoveMetrics
     * const wallOfLoveMetrics = await prisma.wallOfLoveMetrics.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WallOfLoveMetricsUpdateArgs>(args: SelectSubset<T, WallOfLoveMetricsUpdateArgs<ExtArgs>>): Prisma__WallOfLoveMetricsClient<$Result.GetResult<Prisma.$WallOfLoveMetricsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WallOfLoveMetrics.
     * @param {WallOfLoveMetricsDeleteManyArgs} args - Arguments to filter WallOfLoveMetrics to delete.
     * @example
     * // Delete a few WallOfLoveMetrics
     * const { count } = await prisma.wallOfLoveMetrics.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WallOfLoveMetricsDeleteManyArgs>(args?: SelectSubset<T, WallOfLoveMetricsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WallOfLoveMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WallOfLoveMetricsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WallOfLoveMetrics
     * const wallOfLoveMetrics = await prisma.wallOfLoveMetrics.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WallOfLoveMetricsUpdateManyArgs>(args: SelectSubset<T, WallOfLoveMetricsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WallOfLoveMetrics and returns the data updated in the database.
     * @param {WallOfLoveMetricsUpdateManyAndReturnArgs} args - Arguments to update many WallOfLoveMetrics.
     * @example
     * // Update many WallOfLoveMetrics
     * const wallOfLoveMetrics = await prisma.wallOfLoveMetrics.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WallOfLoveMetrics and only return the `id`
     * const wallOfLoveMetricsWithIdOnly = await prisma.wallOfLoveMetrics.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WallOfLoveMetricsUpdateManyAndReturnArgs>(args: SelectSubset<T, WallOfLoveMetricsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WallOfLoveMetricsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WallOfLoveMetrics.
     * @param {WallOfLoveMetricsUpsertArgs} args - Arguments to update or create a WallOfLoveMetrics.
     * @example
     * // Update or create a WallOfLoveMetrics
     * const wallOfLoveMetrics = await prisma.wallOfLoveMetrics.upsert({
     *   create: {
     *     // ... data to create a WallOfLoveMetrics
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WallOfLoveMetrics we want to update
     *   }
     * })
     */
    upsert<T extends WallOfLoveMetricsUpsertArgs>(args: SelectSubset<T, WallOfLoveMetricsUpsertArgs<ExtArgs>>): Prisma__WallOfLoveMetricsClient<$Result.GetResult<Prisma.$WallOfLoveMetricsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WallOfLoveMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WallOfLoveMetricsCountArgs} args - Arguments to filter WallOfLoveMetrics to count.
     * @example
     * // Count the number of WallOfLoveMetrics
     * const count = await prisma.wallOfLoveMetrics.count({
     *   where: {
     *     // ... the filter for the WallOfLoveMetrics we want to count
     *   }
     * })
    **/
    count<T extends WallOfLoveMetricsCountArgs>(
      args?: Subset<T, WallOfLoveMetricsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WallOfLoveMetricsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WallOfLoveMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WallOfLoveMetricsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WallOfLoveMetricsAggregateArgs>(args: Subset<T, WallOfLoveMetricsAggregateArgs>): Prisma.PrismaPromise<GetWallOfLoveMetricsAggregateType<T>>

    /**
     * Group by WallOfLoveMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WallOfLoveMetricsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WallOfLoveMetricsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WallOfLoveMetricsGroupByArgs['orderBy'] }
        : { orderBy?: WallOfLoveMetricsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WallOfLoveMetricsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWallOfLoveMetricsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WallOfLoveMetrics model
   */
  readonly fields: WallOfLoveMetricsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WallOfLoveMetrics.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WallOfLoveMetricsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    space<T extends SpaceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SpaceDefaultArgs<ExtArgs>>): Prisma__SpaceClient<$Result.GetResult<Prisma.$SpacePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    date<T extends MetricsDateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MetricsDateDefaultArgs<ExtArgs>>): Prisma__MetricsDateClient<$Result.GetResult<Prisma.$MetricsDatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WallOfLoveMetrics model
   */
  interface WallOfLoveMetricsFieldRefs {
    readonly id: FieldRef<"WallOfLoveMetrics", 'String'>
    readonly spaceId: FieldRef<"WallOfLoveMetrics", 'String'>
    readonly dateId: FieldRef<"WallOfLoveMetrics", 'String'>
    readonly pageViews: FieldRef<"WallOfLoveMetrics", 'Int'>
    readonly visitors: FieldRef<"WallOfLoveMetrics", 'Int'>
    readonly timeSpentOnWallOfLove: FieldRef<"WallOfLoveMetrics", 'Int'>
    readonly createdAt: FieldRef<"WallOfLoveMetrics", 'DateTime'>
    readonly updatedAt: FieldRef<"WallOfLoveMetrics", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WallOfLoveMetrics findUnique
   */
  export type WallOfLoveMetricsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WallOfLoveMetrics
     */
    select?: WallOfLoveMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WallOfLoveMetrics
     */
    omit?: WallOfLoveMetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WallOfLoveMetricsInclude<ExtArgs> | null
    /**
     * Filter, which WallOfLoveMetrics to fetch.
     */
    where: WallOfLoveMetricsWhereUniqueInput
  }

  /**
   * WallOfLoveMetrics findUniqueOrThrow
   */
  export type WallOfLoveMetricsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WallOfLoveMetrics
     */
    select?: WallOfLoveMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WallOfLoveMetrics
     */
    omit?: WallOfLoveMetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WallOfLoveMetricsInclude<ExtArgs> | null
    /**
     * Filter, which WallOfLoveMetrics to fetch.
     */
    where: WallOfLoveMetricsWhereUniqueInput
  }

  /**
   * WallOfLoveMetrics findFirst
   */
  export type WallOfLoveMetricsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WallOfLoveMetrics
     */
    select?: WallOfLoveMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WallOfLoveMetrics
     */
    omit?: WallOfLoveMetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WallOfLoveMetricsInclude<ExtArgs> | null
    /**
     * Filter, which WallOfLoveMetrics to fetch.
     */
    where?: WallOfLoveMetricsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WallOfLoveMetrics to fetch.
     */
    orderBy?: WallOfLoveMetricsOrderByWithRelationInput | WallOfLoveMetricsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WallOfLoveMetrics.
     */
    cursor?: WallOfLoveMetricsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WallOfLoveMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WallOfLoveMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WallOfLoveMetrics.
     */
    distinct?: WallOfLoveMetricsScalarFieldEnum | WallOfLoveMetricsScalarFieldEnum[]
  }

  /**
   * WallOfLoveMetrics findFirstOrThrow
   */
  export type WallOfLoveMetricsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WallOfLoveMetrics
     */
    select?: WallOfLoveMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WallOfLoveMetrics
     */
    omit?: WallOfLoveMetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WallOfLoveMetricsInclude<ExtArgs> | null
    /**
     * Filter, which WallOfLoveMetrics to fetch.
     */
    where?: WallOfLoveMetricsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WallOfLoveMetrics to fetch.
     */
    orderBy?: WallOfLoveMetricsOrderByWithRelationInput | WallOfLoveMetricsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WallOfLoveMetrics.
     */
    cursor?: WallOfLoveMetricsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WallOfLoveMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WallOfLoveMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WallOfLoveMetrics.
     */
    distinct?: WallOfLoveMetricsScalarFieldEnum | WallOfLoveMetricsScalarFieldEnum[]
  }

  /**
   * WallOfLoveMetrics findMany
   */
  export type WallOfLoveMetricsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WallOfLoveMetrics
     */
    select?: WallOfLoveMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WallOfLoveMetrics
     */
    omit?: WallOfLoveMetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WallOfLoveMetricsInclude<ExtArgs> | null
    /**
     * Filter, which WallOfLoveMetrics to fetch.
     */
    where?: WallOfLoveMetricsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WallOfLoveMetrics to fetch.
     */
    orderBy?: WallOfLoveMetricsOrderByWithRelationInput | WallOfLoveMetricsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WallOfLoveMetrics.
     */
    cursor?: WallOfLoveMetricsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WallOfLoveMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WallOfLoveMetrics.
     */
    skip?: number
    distinct?: WallOfLoveMetricsScalarFieldEnum | WallOfLoveMetricsScalarFieldEnum[]
  }

  /**
   * WallOfLoveMetrics create
   */
  export type WallOfLoveMetricsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WallOfLoveMetrics
     */
    select?: WallOfLoveMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WallOfLoveMetrics
     */
    omit?: WallOfLoveMetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WallOfLoveMetricsInclude<ExtArgs> | null
    /**
     * The data needed to create a WallOfLoveMetrics.
     */
    data: XOR<WallOfLoveMetricsCreateInput, WallOfLoveMetricsUncheckedCreateInput>
  }

  /**
   * WallOfLoveMetrics createMany
   */
  export type WallOfLoveMetricsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WallOfLoveMetrics.
     */
    data: WallOfLoveMetricsCreateManyInput | WallOfLoveMetricsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WallOfLoveMetrics createManyAndReturn
   */
  export type WallOfLoveMetricsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WallOfLoveMetrics
     */
    select?: WallOfLoveMetricsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WallOfLoveMetrics
     */
    omit?: WallOfLoveMetricsOmit<ExtArgs> | null
    /**
     * The data used to create many WallOfLoveMetrics.
     */
    data: WallOfLoveMetricsCreateManyInput | WallOfLoveMetricsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WallOfLoveMetricsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WallOfLoveMetrics update
   */
  export type WallOfLoveMetricsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WallOfLoveMetrics
     */
    select?: WallOfLoveMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WallOfLoveMetrics
     */
    omit?: WallOfLoveMetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WallOfLoveMetricsInclude<ExtArgs> | null
    /**
     * The data needed to update a WallOfLoveMetrics.
     */
    data: XOR<WallOfLoveMetricsUpdateInput, WallOfLoveMetricsUncheckedUpdateInput>
    /**
     * Choose, which WallOfLoveMetrics to update.
     */
    where: WallOfLoveMetricsWhereUniqueInput
  }

  /**
   * WallOfLoveMetrics updateMany
   */
  export type WallOfLoveMetricsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WallOfLoveMetrics.
     */
    data: XOR<WallOfLoveMetricsUpdateManyMutationInput, WallOfLoveMetricsUncheckedUpdateManyInput>
    /**
     * Filter which WallOfLoveMetrics to update
     */
    where?: WallOfLoveMetricsWhereInput
    /**
     * Limit how many WallOfLoveMetrics to update.
     */
    limit?: number
  }

  /**
   * WallOfLoveMetrics updateManyAndReturn
   */
  export type WallOfLoveMetricsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WallOfLoveMetrics
     */
    select?: WallOfLoveMetricsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WallOfLoveMetrics
     */
    omit?: WallOfLoveMetricsOmit<ExtArgs> | null
    /**
     * The data used to update WallOfLoveMetrics.
     */
    data: XOR<WallOfLoveMetricsUpdateManyMutationInput, WallOfLoveMetricsUncheckedUpdateManyInput>
    /**
     * Filter which WallOfLoveMetrics to update
     */
    where?: WallOfLoveMetricsWhereInput
    /**
     * Limit how many WallOfLoveMetrics to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WallOfLoveMetricsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WallOfLoveMetrics upsert
   */
  export type WallOfLoveMetricsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WallOfLoveMetrics
     */
    select?: WallOfLoveMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WallOfLoveMetrics
     */
    omit?: WallOfLoveMetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WallOfLoveMetricsInclude<ExtArgs> | null
    /**
     * The filter to search for the WallOfLoveMetrics to update in case it exists.
     */
    where: WallOfLoveMetricsWhereUniqueInput
    /**
     * In case the WallOfLoveMetrics found by the `where` argument doesn't exist, create a new WallOfLoveMetrics with this data.
     */
    create: XOR<WallOfLoveMetricsCreateInput, WallOfLoveMetricsUncheckedCreateInput>
    /**
     * In case the WallOfLoveMetrics was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WallOfLoveMetricsUpdateInput, WallOfLoveMetricsUncheckedUpdateInput>
  }

  /**
   * WallOfLoveMetrics delete
   */
  export type WallOfLoveMetricsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WallOfLoveMetrics
     */
    select?: WallOfLoveMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WallOfLoveMetrics
     */
    omit?: WallOfLoveMetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WallOfLoveMetricsInclude<ExtArgs> | null
    /**
     * Filter which WallOfLoveMetrics to delete.
     */
    where: WallOfLoveMetricsWhereUniqueInput
  }

  /**
   * WallOfLoveMetrics deleteMany
   */
  export type WallOfLoveMetricsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WallOfLoveMetrics to delete
     */
    where?: WallOfLoveMetricsWhereInput
    /**
     * Limit how many WallOfLoveMetrics to delete.
     */
    limit?: number
  }

  /**
   * WallOfLoveMetrics without action
   */
  export type WallOfLoveMetricsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WallOfLoveMetrics
     */
    select?: WallOfLoveMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WallOfLoveMetrics
     */
    omit?: WallOfLoveMetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WallOfLoveMetricsInclude<ExtArgs> | null
  }


  /**
   * Model DailyMetrics
   */

  export type AggregateDailyMetrics = {
    _count: DailyMetricsCountAggregateOutputType | null
    _avg: DailyMetricsAvgAggregateOutputType | null
    _sum: DailyMetricsSumAggregateOutputType | null
    _min: DailyMetricsMinAggregateOutputType | null
    _max: DailyMetricsMaxAggregateOutputType | null
  }

  export type DailyMetricsAvgAggregateOutputType = {
    pageViews: number | null
    visitors: number | null
    completedActions: number | null
    timeSpentOnWallOfLove: number | null
  }

  export type DailyMetricsSumAggregateOutputType = {
    pageViews: number | null
    visitors: number | null
    completedActions: number | null
    timeSpentOnWallOfLove: number | null
  }

  export type DailyMetricsMinAggregateOutputType = {
    id: string | null
    spaceId: string | null
    date: Date | null
    pageViews: number | null
    visitors: number | null
    completedActions: number | null
    timeSpentOnWallOfLove: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DailyMetricsMaxAggregateOutputType = {
    id: string | null
    spaceId: string | null
    date: Date | null
    pageViews: number | null
    visitors: number | null
    completedActions: number | null
    timeSpentOnWallOfLove: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DailyMetricsCountAggregateOutputType = {
    id: number
    spaceId: number
    date: number
    pageViews: number
    visitors: number
    completedActions: number
    timeSpentOnWallOfLove: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DailyMetricsAvgAggregateInputType = {
    pageViews?: true
    visitors?: true
    completedActions?: true
    timeSpentOnWallOfLove?: true
  }

  export type DailyMetricsSumAggregateInputType = {
    pageViews?: true
    visitors?: true
    completedActions?: true
    timeSpentOnWallOfLove?: true
  }

  export type DailyMetricsMinAggregateInputType = {
    id?: true
    spaceId?: true
    date?: true
    pageViews?: true
    visitors?: true
    completedActions?: true
    timeSpentOnWallOfLove?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DailyMetricsMaxAggregateInputType = {
    id?: true
    spaceId?: true
    date?: true
    pageViews?: true
    visitors?: true
    completedActions?: true
    timeSpentOnWallOfLove?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DailyMetricsCountAggregateInputType = {
    id?: true
    spaceId?: true
    date?: true
    pageViews?: true
    visitors?: true
    completedActions?: true
    timeSpentOnWallOfLove?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DailyMetricsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DailyMetrics to aggregate.
     */
    where?: DailyMetricsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyMetrics to fetch.
     */
    orderBy?: DailyMetricsOrderByWithRelationInput | DailyMetricsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DailyMetricsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DailyMetrics
    **/
    _count?: true | DailyMetricsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DailyMetricsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DailyMetricsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DailyMetricsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DailyMetricsMaxAggregateInputType
  }

  export type GetDailyMetricsAggregateType<T extends DailyMetricsAggregateArgs> = {
        [P in keyof T & keyof AggregateDailyMetrics]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDailyMetrics[P]>
      : GetScalarType<T[P], AggregateDailyMetrics[P]>
  }




  export type DailyMetricsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DailyMetricsWhereInput
    orderBy?: DailyMetricsOrderByWithAggregationInput | DailyMetricsOrderByWithAggregationInput[]
    by: DailyMetricsScalarFieldEnum[] | DailyMetricsScalarFieldEnum
    having?: DailyMetricsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DailyMetricsCountAggregateInputType | true
    _avg?: DailyMetricsAvgAggregateInputType
    _sum?: DailyMetricsSumAggregateInputType
    _min?: DailyMetricsMinAggregateInputType
    _max?: DailyMetricsMaxAggregateInputType
  }

  export type DailyMetricsGroupByOutputType = {
    id: string
    spaceId: string
    date: Date
    pageViews: number
    visitors: number
    completedActions: number
    timeSpentOnWallOfLove: number
    createdAt: Date
    updatedAt: Date
    _count: DailyMetricsCountAggregateOutputType | null
    _avg: DailyMetricsAvgAggregateOutputType | null
    _sum: DailyMetricsSumAggregateOutputType | null
    _min: DailyMetricsMinAggregateOutputType | null
    _max: DailyMetricsMaxAggregateOutputType | null
  }

  type GetDailyMetricsGroupByPayload<T extends DailyMetricsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DailyMetricsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DailyMetricsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DailyMetricsGroupByOutputType[P]>
            : GetScalarType<T[P], DailyMetricsGroupByOutputType[P]>
        }
      >
    >


  export type DailyMetricsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    spaceId?: boolean
    date?: boolean
    pageViews?: boolean
    visitors?: boolean
    completedActions?: boolean
    timeSpentOnWallOfLove?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    space?: boolean | SpaceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dailyMetrics"]>

  export type DailyMetricsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    spaceId?: boolean
    date?: boolean
    pageViews?: boolean
    visitors?: boolean
    completedActions?: boolean
    timeSpentOnWallOfLove?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    space?: boolean | SpaceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dailyMetrics"]>

  export type DailyMetricsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    spaceId?: boolean
    date?: boolean
    pageViews?: boolean
    visitors?: boolean
    completedActions?: boolean
    timeSpentOnWallOfLove?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    space?: boolean | SpaceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dailyMetrics"]>

  export type DailyMetricsSelectScalar = {
    id?: boolean
    spaceId?: boolean
    date?: boolean
    pageViews?: boolean
    visitors?: boolean
    completedActions?: boolean
    timeSpentOnWallOfLove?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DailyMetricsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "spaceId" | "date" | "pageViews" | "visitors" | "completedActions" | "timeSpentOnWallOfLove" | "createdAt" | "updatedAt", ExtArgs["result"]["dailyMetrics"]>
  export type DailyMetricsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    space?: boolean | SpaceDefaultArgs<ExtArgs>
  }
  export type DailyMetricsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    space?: boolean | SpaceDefaultArgs<ExtArgs>
  }
  export type DailyMetricsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    space?: boolean | SpaceDefaultArgs<ExtArgs>
  }

  export type $DailyMetricsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DailyMetrics"
    objects: {
      space: Prisma.$SpacePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      spaceId: string
      date: Date
      pageViews: number
      visitors: number
      completedActions: number
      timeSpentOnWallOfLove: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["dailyMetrics"]>
    composites: {}
  }

  type DailyMetricsGetPayload<S extends boolean | null | undefined | DailyMetricsDefaultArgs> = $Result.GetResult<Prisma.$DailyMetricsPayload, S>

  type DailyMetricsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DailyMetricsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DailyMetricsCountAggregateInputType | true
    }

  export interface DailyMetricsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DailyMetrics'], meta: { name: 'DailyMetrics' } }
    /**
     * Find zero or one DailyMetrics that matches the filter.
     * @param {DailyMetricsFindUniqueArgs} args - Arguments to find a DailyMetrics
     * @example
     * // Get one DailyMetrics
     * const dailyMetrics = await prisma.dailyMetrics.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DailyMetricsFindUniqueArgs>(args: SelectSubset<T, DailyMetricsFindUniqueArgs<ExtArgs>>): Prisma__DailyMetricsClient<$Result.GetResult<Prisma.$DailyMetricsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DailyMetrics that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DailyMetricsFindUniqueOrThrowArgs} args - Arguments to find a DailyMetrics
     * @example
     * // Get one DailyMetrics
     * const dailyMetrics = await prisma.dailyMetrics.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DailyMetricsFindUniqueOrThrowArgs>(args: SelectSubset<T, DailyMetricsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DailyMetricsClient<$Result.GetResult<Prisma.$DailyMetricsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DailyMetrics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyMetricsFindFirstArgs} args - Arguments to find a DailyMetrics
     * @example
     * // Get one DailyMetrics
     * const dailyMetrics = await prisma.dailyMetrics.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DailyMetricsFindFirstArgs>(args?: SelectSubset<T, DailyMetricsFindFirstArgs<ExtArgs>>): Prisma__DailyMetricsClient<$Result.GetResult<Prisma.$DailyMetricsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DailyMetrics that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyMetricsFindFirstOrThrowArgs} args - Arguments to find a DailyMetrics
     * @example
     * // Get one DailyMetrics
     * const dailyMetrics = await prisma.dailyMetrics.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DailyMetricsFindFirstOrThrowArgs>(args?: SelectSubset<T, DailyMetricsFindFirstOrThrowArgs<ExtArgs>>): Prisma__DailyMetricsClient<$Result.GetResult<Prisma.$DailyMetricsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DailyMetrics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyMetricsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DailyMetrics
     * const dailyMetrics = await prisma.dailyMetrics.findMany()
     * 
     * // Get first 10 DailyMetrics
     * const dailyMetrics = await prisma.dailyMetrics.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dailyMetricsWithIdOnly = await prisma.dailyMetrics.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DailyMetricsFindManyArgs>(args?: SelectSubset<T, DailyMetricsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DailyMetricsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DailyMetrics.
     * @param {DailyMetricsCreateArgs} args - Arguments to create a DailyMetrics.
     * @example
     * // Create one DailyMetrics
     * const DailyMetrics = await prisma.dailyMetrics.create({
     *   data: {
     *     // ... data to create a DailyMetrics
     *   }
     * })
     * 
     */
    create<T extends DailyMetricsCreateArgs>(args: SelectSubset<T, DailyMetricsCreateArgs<ExtArgs>>): Prisma__DailyMetricsClient<$Result.GetResult<Prisma.$DailyMetricsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DailyMetrics.
     * @param {DailyMetricsCreateManyArgs} args - Arguments to create many DailyMetrics.
     * @example
     * // Create many DailyMetrics
     * const dailyMetrics = await prisma.dailyMetrics.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DailyMetricsCreateManyArgs>(args?: SelectSubset<T, DailyMetricsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DailyMetrics and returns the data saved in the database.
     * @param {DailyMetricsCreateManyAndReturnArgs} args - Arguments to create many DailyMetrics.
     * @example
     * // Create many DailyMetrics
     * const dailyMetrics = await prisma.dailyMetrics.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DailyMetrics and only return the `id`
     * const dailyMetricsWithIdOnly = await prisma.dailyMetrics.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DailyMetricsCreateManyAndReturnArgs>(args?: SelectSubset<T, DailyMetricsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DailyMetricsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DailyMetrics.
     * @param {DailyMetricsDeleteArgs} args - Arguments to delete one DailyMetrics.
     * @example
     * // Delete one DailyMetrics
     * const DailyMetrics = await prisma.dailyMetrics.delete({
     *   where: {
     *     // ... filter to delete one DailyMetrics
     *   }
     * })
     * 
     */
    delete<T extends DailyMetricsDeleteArgs>(args: SelectSubset<T, DailyMetricsDeleteArgs<ExtArgs>>): Prisma__DailyMetricsClient<$Result.GetResult<Prisma.$DailyMetricsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DailyMetrics.
     * @param {DailyMetricsUpdateArgs} args - Arguments to update one DailyMetrics.
     * @example
     * // Update one DailyMetrics
     * const dailyMetrics = await prisma.dailyMetrics.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DailyMetricsUpdateArgs>(args: SelectSubset<T, DailyMetricsUpdateArgs<ExtArgs>>): Prisma__DailyMetricsClient<$Result.GetResult<Prisma.$DailyMetricsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DailyMetrics.
     * @param {DailyMetricsDeleteManyArgs} args - Arguments to filter DailyMetrics to delete.
     * @example
     * // Delete a few DailyMetrics
     * const { count } = await prisma.dailyMetrics.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DailyMetricsDeleteManyArgs>(args?: SelectSubset<T, DailyMetricsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DailyMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyMetricsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DailyMetrics
     * const dailyMetrics = await prisma.dailyMetrics.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DailyMetricsUpdateManyArgs>(args: SelectSubset<T, DailyMetricsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DailyMetrics and returns the data updated in the database.
     * @param {DailyMetricsUpdateManyAndReturnArgs} args - Arguments to update many DailyMetrics.
     * @example
     * // Update many DailyMetrics
     * const dailyMetrics = await prisma.dailyMetrics.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DailyMetrics and only return the `id`
     * const dailyMetricsWithIdOnly = await prisma.dailyMetrics.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DailyMetricsUpdateManyAndReturnArgs>(args: SelectSubset<T, DailyMetricsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DailyMetricsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DailyMetrics.
     * @param {DailyMetricsUpsertArgs} args - Arguments to update or create a DailyMetrics.
     * @example
     * // Update or create a DailyMetrics
     * const dailyMetrics = await prisma.dailyMetrics.upsert({
     *   create: {
     *     // ... data to create a DailyMetrics
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DailyMetrics we want to update
     *   }
     * })
     */
    upsert<T extends DailyMetricsUpsertArgs>(args: SelectSubset<T, DailyMetricsUpsertArgs<ExtArgs>>): Prisma__DailyMetricsClient<$Result.GetResult<Prisma.$DailyMetricsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DailyMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyMetricsCountArgs} args - Arguments to filter DailyMetrics to count.
     * @example
     * // Count the number of DailyMetrics
     * const count = await prisma.dailyMetrics.count({
     *   where: {
     *     // ... the filter for the DailyMetrics we want to count
     *   }
     * })
    **/
    count<T extends DailyMetricsCountArgs>(
      args?: Subset<T, DailyMetricsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DailyMetricsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DailyMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyMetricsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DailyMetricsAggregateArgs>(args: Subset<T, DailyMetricsAggregateArgs>): Prisma.PrismaPromise<GetDailyMetricsAggregateType<T>>

    /**
     * Group by DailyMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyMetricsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DailyMetricsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DailyMetricsGroupByArgs['orderBy'] }
        : { orderBy?: DailyMetricsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DailyMetricsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDailyMetricsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DailyMetrics model
   */
  readonly fields: DailyMetricsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DailyMetrics.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DailyMetricsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    space<T extends SpaceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SpaceDefaultArgs<ExtArgs>>): Prisma__SpaceClient<$Result.GetResult<Prisma.$SpacePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DailyMetrics model
   */
  interface DailyMetricsFieldRefs {
    readonly id: FieldRef<"DailyMetrics", 'String'>
    readonly spaceId: FieldRef<"DailyMetrics", 'String'>
    readonly date: FieldRef<"DailyMetrics", 'DateTime'>
    readonly pageViews: FieldRef<"DailyMetrics", 'Int'>
    readonly visitors: FieldRef<"DailyMetrics", 'Int'>
    readonly completedActions: FieldRef<"DailyMetrics", 'Int'>
    readonly timeSpentOnWallOfLove: FieldRef<"DailyMetrics", 'Int'>
    readonly createdAt: FieldRef<"DailyMetrics", 'DateTime'>
    readonly updatedAt: FieldRef<"DailyMetrics", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DailyMetrics findUnique
   */
  export type DailyMetricsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyMetrics
     */
    select?: DailyMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyMetrics
     */
    omit?: DailyMetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyMetricsInclude<ExtArgs> | null
    /**
     * Filter, which DailyMetrics to fetch.
     */
    where: DailyMetricsWhereUniqueInput
  }

  /**
   * DailyMetrics findUniqueOrThrow
   */
  export type DailyMetricsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyMetrics
     */
    select?: DailyMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyMetrics
     */
    omit?: DailyMetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyMetricsInclude<ExtArgs> | null
    /**
     * Filter, which DailyMetrics to fetch.
     */
    where: DailyMetricsWhereUniqueInput
  }

  /**
   * DailyMetrics findFirst
   */
  export type DailyMetricsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyMetrics
     */
    select?: DailyMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyMetrics
     */
    omit?: DailyMetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyMetricsInclude<ExtArgs> | null
    /**
     * Filter, which DailyMetrics to fetch.
     */
    where?: DailyMetricsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyMetrics to fetch.
     */
    orderBy?: DailyMetricsOrderByWithRelationInput | DailyMetricsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DailyMetrics.
     */
    cursor?: DailyMetricsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DailyMetrics.
     */
    distinct?: DailyMetricsScalarFieldEnum | DailyMetricsScalarFieldEnum[]
  }

  /**
   * DailyMetrics findFirstOrThrow
   */
  export type DailyMetricsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyMetrics
     */
    select?: DailyMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyMetrics
     */
    omit?: DailyMetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyMetricsInclude<ExtArgs> | null
    /**
     * Filter, which DailyMetrics to fetch.
     */
    where?: DailyMetricsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyMetrics to fetch.
     */
    orderBy?: DailyMetricsOrderByWithRelationInput | DailyMetricsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DailyMetrics.
     */
    cursor?: DailyMetricsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DailyMetrics.
     */
    distinct?: DailyMetricsScalarFieldEnum | DailyMetricsScalarFieldEnum[]
  }

  /**
   * DailyMetrics findMany
   */
  export type DailyMetricsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyMetrics
     */
    select?: DailyMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyMetrics
     */
    omit?: DailyMetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyMetricsInclude<ExtArgs> | null
    /**
     * Filter, which DailyMetrics to fetch.
     */
    where?: DailyMetricsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyMetrics to fetch.
     */
    orderBy?: DailyMetricsOrderByWithRelationInput | DailyMetricsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DailyMetrics.
     */
    cursor?: DailyMetricsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyMetrics.
     */
    skip?: number
    distinct?: DailyMetricsScalarFieldEnum | DailyMetricsScalarFieldEnum[]
  }

  /**
   * DailyMetrics create
   */
  export type DailyMetricsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyMetrics
     */
    select?: DailyMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyMetrics
     */
    omit?: DailyMetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyMetricsInclude<ExtArgs> | null
    /**
     * The data needed to create a DailyMetrics.
     */
    data: XOR<DailyMetricsCreateInput, DailyMetricsUncheckedCreateInput>
  }

  /**
   * DailyMetrics createMany
   */
  export type DailyMetricsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DailyMetrics.
     */
    data: DailyMetricsCreateManyInput | DailyMetricsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DailyMetrics createManyAndReturn
   */
  export type DailyMetricsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyMetrics
     */
    select?: DailyMetricsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DailyMetrics
     */
    omit?: DailyMetricsOmit<ExtArgs> | null
    /**
     * The data used to create many DailyMetrics.
     */
    data: DailyMetricsCreateManyInput | DailyMetricsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyMetricsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DailyMetrics update
   */
  export type DailyMetricsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyMetrics
     */
    select?: DailyMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyMetrics
     */
    omit?: DailyMetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyMetricsInclude<ExtArgs> | null
    /**
     * The data needed to update a DailyMetrics.
     */
    data: XOR<DailyMetricsUpdateInput, DailyMetricsUncheckedUpdateInput>
    /**
     * Choose, which DailyMetrics to update.
     */
    where: DailyMetricsWhereUniqueInput
  }

  /**
   * DailyMetrics updateMany
   */
  export type DailyMetricsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DailyMetrics.
     */
    data: XOR<DailyMetricsUpdateManyMutationInput, DailyMetricsUncheckedUpdateManyInput>
    /**
     * Filter which DailyMetrics to update
     */
    where?: DailyMetricsWhereInput
    /**
     * Limit how many DailyMetrics to update.
     */
    limit?: number
  }

  /**
   * DailyMetrics updateManyAndReturn
   */
  export type DailyMetricsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyMetrics
     */
    select?: DailyMetricsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DailyMetrics
     */
    omit?: DailyMetricsOmit<ExtArgs> | null
    /**
     * The data used to update DailyMetrics.
     */
    data: XOR<DailyMetricsUpdateManyMutationInput, DailyMetricsUncheckedUpdateManyInput>
    /**
     * Filter which DailyMetrics to update
     */
    where?: DailyMetricsWhereInput
    /**
     * Limit how many DailyMetrics to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyMetricsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DailyMetrics upsert
   */
  export type DailyMetricsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyMetrics
     */
    select?: DailyMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyMetrics
     */
    omit?: DailyMetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyMetricsInclude<ExtArgs> | null
    /**
     * The filter to search for the DailyMetrics to update in case it exists.
     */
    where: DailyMetricsWhereUniqueInput
    /**
     * In case the DailyMetrics found by the `where` argument doesn't exist, create a new DailyMetrics with this data.
     */
    create: XOR<DailyMetricsCreateInput, DailyMetricsUncheckedCreateInput>
    /**
     * In case the DailyMetrics was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DailyMetricsUpdateInput, DailyMetricsUncheckedUpdateInput>
  }

  /**
   * DailyMetrics delete
   */
  export type DailyMetricsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyMetrics
     */
    select?: DailyMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyMetrics
     */
    omit?: DailyMetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyMetricsInclude<ExtArgs> | null
    /**
     * Filter which DailyMetrics to delete.
     */
    where: DailyMetricsWhereUniqueInput
  }

  /**
   * DailyMetrics deleteMany
   */
  export type DailyMetricsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DailyMetrics to delete
     */
    where?: DailyMetricsWhereInput
    /**
     * Limit how many DailyMetrics to delete.
     */
    limit?: number
  }

  /**
   * DailyMetrics without action
   */
  export type DailyMetricsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyMetrics
     */
    select?: DailyMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyMetrics
     */
    omit?: DailyMetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyMetricsInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    emailVerified: 'emailVerified',
    image: 'image',
    password: 'password',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const AccountScalarFieldEnum: {
    userId: 'userId',
    type: 'type',
    provider: 'provider',
    providerAccountId: 'providerAccountId',
    refresh_token: 'refresh_token',
    access_token: 'access_token',
    expires_at: 'expires_at',
    token_type: 'token_type',
    scope: 'scope',
    id_token: 'id_token',
    session_state: 'session_state',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const VerificationTokenScalarFieldEnum: {
    id: 'id',
    email: 'email',
    token: 'token',
    expires: 'expires',
    createdAt: 'createdAt'
  };

  export type VerificationTokenScalarFieldEnum = (typeof VerificationTokenScalarFieldEnum)[keyof typeof VerificationTokenScalarFieldEnum]


  export const PasswordResetTokenScalarFieldEnum: {
    id: 'id',
    email: 'email',
    token: 'token',
    expires: 'expires'
  };

  export type PasswordResetTokenScalarFieldEnum = (typeof PasswordResetTokenScalarFieldEnum)[keyof typeof PasswordResetTokenScalarFieldEnum]


  export const SpaceScalarFieldEnum: {
    id: 'id',
    name: 'name',
    logo: 'logo',
    headerTitle: 'headerTitle',
    headerSubtitle: 'headerSubtitle',
    collectionType: 'collectionType',
    collectStar: 'collectStar',
    isAnalysisEnabled: 'isAnalysisEnabled',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById',
    isPublished: 'isPublished'
  };

  export type SpaceScalarFieldEnum = (typeof SpaceScalarFieldEnum)[keyof typeof SpaceScalarFieldEnum]


  export const QuestionScalarFieldEnum: {
    id: 'id',
    spaceId: 'spaceId',
    title: 'title',
    order: 'order'
  };

  export type QuestionScalarFieldEnum = (typeof QuestionScalarFieldEnum)[keyof typeof QuestionScalarFieldEnum]


  export const ThemeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    primaryColor: 'primaryColor',
    secondaryColor: 'secondaryColor',
    tertiaryColor: 'tertiaryColor',
    quaternaryColor: 'quaternaryColor',
    quinaryColor: 'quinaryColor',
    senaryColor: 'senaryColor',
    septenaryColor: 'septenaryColor',
    octonaryColor: 'octonaryColor',
    nonaryColor: 'nonaryColor',
    denaryColor: 'denaryColor',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ThemeScalarFieldEnum = (typeof ThemeScalarFieldEnum)[keyof typeof ThemeScalarFieldEnum]


  export const ThankYouSpaceScalarFieldEnum: {
    id: 'id',
    spaceId: 'spaceId',
    title: 'title',
    message: 'message',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ThankYouSpaceScalarFieldEnum = (typeof ThankYouSpaceScalarFieldEnum)[keyof typeof ThankYouSpaceScalarFieldEnum]


  export const FeedbackScalarFieldEnum: {
    id: 'id',
    answer: 'answer',
    name: 'name',
    email: 'email',
    rating: 'rating',
    permission: 'permission',
    spaceId: 'spaceId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    feedbackType: 'feedbackType',
    addToWallOfLove: 'addToWallOfLove',
    videoUrl: 'videoUrl',
    imageUrl: 'imageUrl',
    isSpam: 'isSpam',
    sentiment: 'sentiment',
    analysisStatus: 'analysisStatus'
  };

  export type FeedbackScalarFieldEnum = (typeof FeedbackScalarFieldEnum)[keyof typeof FeedbackScalarFieldEnum]


  export const MetricsDateScalarFieldEnum: {
    id: 'id',
    date: 'date',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MetricsDateScalarFieldEnum = (typeof MetricsDateScalarFieldEnum)[keyof typeof MetricsDateScalarFieldEnum]


  export const RequestTestimonialMetricsScalarFieldEnum: {
    id: 'id',
    spaceId: 'spaceId',
    dateId: 'dateId',
    pageViews: 'pageViews',
    visitors: 'visitors',
    completedActions: 'completedActions',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RequestTestimonialMetricsScalarFieldEnum = (typeof RequestTestimonialMetricsScalarFieldEnum)[keyof typeof RequestTestimonialMetricsScalarFieldEnum]


  export const WallOfLoveMetricsScalarFieldEnum: {
    id: 'id',
    spaceId: 'spaceId',
    dateId: 'dateId',
    pageViews: 'pageViews',
    visitors: 'visitors',
    timeSpentOnWallOfLove: 'timeSpentOnWallOfLove',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WallOfLoveMetricsScalarFieldEnum = (typeof WallOfLoveMetricsScalarFieldEnum)[keyof typeof WallOfLoveMetricsScalarFieldEnum]


  export const DailyMetricsScalarFieldEnum: {
    id: 'id',
    spaceId: 'spaceId',
    date: 'date',
    pageViews: 'pageViews',
    visitors: 'visitors',
    completedActions: 'completedActions',
    timeSpentOnWallOfLove: 'timeSpentOnWallOfLove',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DailyMetricsScalarFieldEnum = (typeof DailyMetricsScalarFieldEnum)[keyof typeof DailyMetricsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'CollectionType'
   */
  export type EnumCollectionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CollectionType'>
    


  /**
   * Reference to a field of type 'CollectionType[]'
   */
  export type ListEnumCollectionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CollectionType[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'FeedbackType'
   */
  export type EnumFeedbackTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FeedbackType'>
    


  /**
   * Reference to a field of type 'FeedbackType[]'
   */
  export type ListEnumFeedbackTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FeedbackType[]'>
    


  /**
   * Reference to a field of type 'SentimentType'
   */
  export type EnumSentimentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SentimentType'>
    


  /**
   * Reference to a field of type 'SentimentType[]'
   */
  export type ListEnumSentimentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SentimentType[]'>
    


  /**
   * Reference to a field of type 'AnalysisStatus'
   */
  export type EnumAnalysisStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AnalysisStatus'>
    


  /**
   * Reference to a field of type 'AnalysisStatus[]'
   */
  export type ListEnumAnalysisStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AnalysisStatus[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    email?: StringFilter<"User"> | string
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    image?: StringNullableFilter<"User"> | string | null
    password?: StringNullableFilter<"User"> | string | null
    role?: EnumRoleFilter<"User"> | $Enums.Role
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    accounts?: AccountListRelationFilter
    spaces?: SpaceListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrder
    emailVerified?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    accounts?: AccountOrderByRelationAggregateInput
    spaces?: SpaceOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    image?: StringNullableFilter<"User"> | string | null
    password?: StringNullableFilter<"User"> | string | null
    role?: EnumRoleFilter<"User"> | $Enums.Role
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    accounts?: AccountListRelationFilter
    spaces?: SpaceListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrder
    emailVerified?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    email?: StringWithAggregatesFilter<"User"> | string
    emailVerified?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    image?: StringNullableWithAggregatesFilter<"User"> | string | null
    password?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AccountOrderByWithRelationInput = {
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    provider_providerAccountId?: AccountProviderProviderAccountIdCompoundUniqueInput
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "provider_providerAccountId">

  export type AccountOrderByWithAggregationInput = {
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AccountCountOrderByAggregateInput
    _avg?: AccountAvgOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
    _sum?: AccountSumOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    userId?: StringWithAggregatesFilter<"Account"> | string
    type?: StringWithAggregatesFilter<"Account"> | string
    provider?: StringWithAggregatesFilter<"Account"> | string
    providerAccountId?: StringWithAggregatesFilter<"Account"> | string
    refresh_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    access_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    expires_at?: IntNullableWithAggregatesFilter<"Account"> | number | null
    token_type?: StringNullableWithAggregatesFilter<"Account"> | string | null
    scope?: StringNullableWithAggregatesFilter<"Account"> | string | null
    id_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    session_state?: StringNullableWithAggregatesFilter<"Account"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
  }

  export type VerificationTokenWhereInput = {
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    id?: StringFilter<"VerificationToken"> | string
    email?: StringFilter<"VerificationToken"> | string
    token?: StringFilter<"VerificationToken"> | string
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
    createdAt?: DateTimeFilter<"VerificationToken"> | Date | string
  }

  export type VerificationTokenOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
  }

  export type VerificationTokenWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    email_token?: VerificationTokenEmailTokenCompoundUniqueInput
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    email?: StringFilter<"VerificationToken"> | string
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
    createdAt?: DateTimeFilter<"VerificationToken"> | Date | string
  }, "id" | "token" | "email_token">

  export type VerificationTokenOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
    _count?: VerificationTokenCountOrderByAggregateInput
    _max?: VerificationTokenMaxOrderByAggregateInput
    _min?: VerificationTokenMinOrderByAggregateInput
  }

  export type VerificationTokenScalarWhereWithAggregatesInput = {
    AND?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    OR?: VerificationTokenScalarWhereWithAggregatesInput[]
    NOT?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"VerificationToken"> | string
    email?: StringWithAggregatesFilter<"VerificationToken"> | string
    token?: StringWithAggregatesFilter<"VerificationToken"> | string
    expires?: DateTimeWithAggregatesFilter<"VerificationToken"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"VerificationToken"> | Date | string
  }

  export type PasswordResetTokenWhereInput = {
    AND?: PasswordResetTokenWhereInput | PasswordResetTokenWhereInput[]
    OR?: PasswordResetTokenWhereInput[]
    NOT?: PasswordResetTokenWhereInput | PasswordResetTokenWhereInput[]
    id?: StringFilter<"PasswordResetToken"> | string
    email?: StringFilter<"PasswordResetToken"> | string
    token?: StringFilter<"PasswordResetToken"> | string
    expires?: DateTimeFilter<"PasswordResetToken"> | Date | string
  }

  export type PasswordResetTokenOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type PasswordResetTokenWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    email_token?: PasswordResetTokenEmailTokenCompoundUniqueInput
    AND?: PasswordResetTokenWhereInput | PasswordResetTokenWhereInput[]
    OR?: PasswordResetTokenWhereInput[]
    NOT?: PasswordResetTokenWhereInput | PasswordResetTokenWhereInput[]
    email?: StringFilter<"PasswordResetToken"> | string
    expires?: DateTimeFilter<"PasswordResetToken"> | Date | string
  }, "id" | "token" | "email_token">

  export type PasswordResetTokenOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    _count?: PasswordResetTokenCountOrderByAggregateInput
    _max?: PasswordResetTokenMaxOrderByAggregateInput
    _min?: PasswordResetTokenMinOrderByAggregateInput
  }

  export type PasswordResetTokenScalarWhereWithAggregatesInput = {
    AND?: PasswordResetTokenScalarWhereWithAggregatesInput | PasswordResetTokenScalarWhereWithAggregatesInput[]
    OR?: PasswordResetTokenScalarWhereWithAggregatesInput[]
    NOT?: PasswordResetTokenScalarWhereWithAggregatesInput | PasswordResetTokenScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PasswordResetToken"> | string
    email?: StringWithAggregatesFilter<"PasswordResetToken"> | string
    token?: StringWithAggregatesFilter<"PasswordResetToken"> | string
    expires?: DateTimeWithAggregatesFilter<"PasswordResetToken"> | Date | string
  }

  export type SpaceWhereInput = {
    AND?: SpaceWhereInput | SpaceWhereInput[]
    OR?: SpaceWhereInput[]
    NOT?: SpaceWhereInput | SpaceWhereInput[]
    id?: StringFilter<"Space"> | string
    name?: StringFilter<"Space"> | string
    logo?: StringNullableFilter<"Space"> | string | null
    headerTitle?: StringFilter<"Space"> | string
    headerSubtitle?: StringFilter<"Space"> | string
    collectionType?: EnumCollectionTypeFilter<"Space"> | $Enums.CollectionType
    collectStar?: BoolFilter<"Space"> | boolean
    isAnalysisEnabled?: BoolFilter<"Space"> | boolean
    createdAt?: DateTimeFilter<"Space"> | Date | string
    updatedAt?: DateTimeFilter<"Space"> | Date | string
    createdById?: StringFilter<"Space"> | string
    isPublished?: BoolFilter<"Space"> | boolean
    questions?: QuestionListRelationFilter
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    thankyouSpace?: XOR<ThankYouSpaceNullableScalarRelationFilter, ThankYouSpaceWhereInput> | null
    feedbacks?: FeedbackListRelationFilter
    DailyMetrics?: DailyMetricsListRelationFilter
    RequestTestimonialMetrics?: RequestTestimonialMetricsListRelationFilter
    WallOfLoveMetrics?: WallOfLoveMetricsListRelationFilter
  }

  export type SpaceOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    logo?: SortOrderInput | SortOrder
    headerTitle?: SortOrder
    headerSubtitle?: SortOrder
    collectionType?: SortOrder
    collectStar?: SortOrder
    isAnalysisEnabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    isPublished?: SortOrder
    questions?: QuestionOrderByRelationAggregateInput
    createdBy?: UserOrderByWithRelationInput
    thankyouSpace?: ThankYouSpaceOrderByWithRelationInput
    feedbacks?: FeedbackOrderByRelationAggregateInput
    DailyMetrics?: DailyMetricsOrderByRelationAggregateInput
    RequestTestimonialMetrics?: RequestTestimonialMetricsOrderByRelationAggregateInput
    WallOfLoveMetrics?: WallOfLoveMetricsOrderByRelationAggregateInput
  }

  export type SpaceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SpaceWhereInput | SpaceWhereInput[]
    OR?: SpaceWhereInput[]
    NOT?: SpaceWhereInput | SpaceWhereInput[]
    name?: StringFilter<"Space"> | string
    logo?: StringNullableFilter<"Space"> | string | null
    headerTitle?: StringFilter<"Space"> | string
    headerSubtitle?: StringFilter<"Space"> | string
    collectionType?: EnumCollectionTypeFilter<"Space"> | $Enums.CollectionType
    collectStar?: BoolFilter<"Space"> | boolean
    isAnalysisEnabled?: BoolFilter<"Space"> | boolean
    createdAt?: DateTimeFilter<"Space"> | Date | string
    updatedAt?: DateTimeFilter<"Space"> | Date | string
    createdById?: StringFilter<"Space"> | string
    isPublished?: BoolFilter<"Space"> | boolean
    questions?: QuestionListRelationFilter
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    thankyouSpace?: XOR<ThankYouSpaceNullableScalarRelationFilter, ThankYouSpaceWhereInput> | null
    feedbacks?: FeedbackListRelationFilter
    DailyMetrics?: DailyMetricsListRelationFilter
    RequestTestimonialMetrics?: RequestTestimonialMetricsListRelationFilter
    WallOfLoveMetrics?: WallOfLoveMetricsListRelationFilter
  }, "id">

  export type SpaceOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    logo?: SortOrderInput | SortOrder
    headerTitle?: SortOrder
    headerSubtitle?: SortOrder
    collectionType?: SortOrder
    collectStar?: SortOrder
    isAnalysisEnabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    isPublished?: SortOrder
    _count?: SpaceCountOrderByAggregateInput
    _max?: SpaceMaxOrderByAggregateInput
    _min?: SpaceMinOrderByAggregateInput
  }

  export type SpaceScalarWhereWithAggregatesInput = {
    AND?: SpaceScalarWhereWithAggregatesInput | SpaceScalarWhereWithAggregatesInput[]
    OR?: SpaceScalarWhereWithAggregatesInput[]
    NOT?: SpaceScalarWhereWithAggregatesInput | SpaceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Space"> | string
    name?: StringWithAggregatesFilter<"Space"> | string
    logo?: StringNullableWithAggregatesFilter<"Space"> | string | null
    headerTitle?: StringWithAggregatesFilter<"Space"> | string
    headerSubtitle?: StringWithAggregatesFilter<"Space"> | string
    collectionType?: EnumCollectionTypeWithAggregatesFilter<"Space"> | $Enums.CollectionType
    collectStar?: BoolWithAggregatesFilter<"Space"> | boolean
    isAnalysisEnabled?: BoolWithAggregatesFilter<"Space"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Space"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Space"> | Date | string
    createdById?: StringWithAggregatesFilter<"Space"> | string
    isPublished?: BoolWithAggregatesFilter<"Space"> | boolean
  }

  export type QuestionWhereInput = {
    AND?: QuestionWhereInput | QuestionWhereInput[]
    OR?: QuestionWhereInput[]
    NOT?: QuestionWhereInput | QuestionWhereInput[]
    id?: StringFilter<"Question"> | string
    spaceId?: StringFilter<"Question"> | string
    title?: StringFilter<"Question"> | string
    order?: IntFilter<"Question"> | number
    space?: XOR<SpaceScalarRelationFilter, SpaceWhereInput>
  }

  export type QuestionOrderByWithRelationInput = {
    id?: SortOrder
    spaceId?: SortOrder
    title?: SortOrder
    order?: SortOrder
    space?: SpaceOrderByWithRelationInput
  }

  export type QuestionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: QuestionWhereInput | QuestionWhereInput[]
    OR?: QuestionWhereInput[]
    NOT?: QuestionWhereInput | QuestionWhereInput[]
    spaceId?: StringFilter<"Question"> | string
    title?: StringFilter<"Question"> | string
    order?: IntFilter<"Question"> | number
    space?: XOR<SpaceScalarRelationFilter, SpaceWhereInput>
  }, "id">

  export type QuestionOrderByWithAggregationInput = {
    id?: SortOrder
    spaceId?: SortOrder
    title?: SortOrder
    order?: SortOrder
    _count?: QuestionCountOrderByAggregateInput
    _avg?: QuestionAvgOrderByAggregateInput
    _max?: QuestionMaxOrderByAggregateInput
    _min?: QuestionMinOrderByAggregateInput
    _sum?: QuestionSumOrderByAggregateInput
  }

  export type QuestionScalarWhereWithAggregatesInput = {
    AND?: QuestionScalarWhereWithAggregatesInput | QuestionScalarWhereWithAggregatesInput[]
    OR?: QuestionScalarWhereWithAggregatesInput[]
    NOT?: QuestionScalarWhereWithAggregatesInput | QuestionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Question"> | string
    spaceId?: StringWithAggregatesFilter<"Question"> | string
    title?: StringWithAggregatesFilter<"Question"> | string
    order?: IntWithAggregatesFilter<"Question"> | number
  }

  export type ThemeWhereInput = {
    AND?: ThemeWhereInput | ThemeWhereInput[]
    OR?: ThemeWhereInput[]
    NOT?: ThemeWhereInput | ThemeWhereInput[]
    id?: StringFilter<"Theme"> | string
    name?: StringFilter<"Theme"> | string
    primaryColor?: StringFilter<"Theme"> | string
    secondaryColor?: StringFilter<"Theme"> | string
    tertiaryColor?: StringFilter<"Theme"> | string
    quaternaryColor?: StringFilter<"Theme"> | string
    quinaryColor?: StringFilter<"Theme"> | string
    senaryColor?: StringFilter<"Theme"> | string
    septenaryColor?: StringFilter<"Theme"> | string
    octonaryColor?: StringFilter<"Theme"> | string
    nonaryColor?: StringFilter<"Theme"> | string
    denaryColor?: StringFilter<"Theme"> | string
    createdAt?: DateTimeFilter<"Theme"> | Date | string
    updatedAt?: DateTimeFilter<"Theme"> | Date | string
  }

  export type ThemeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    primaryColor?: SortOrder
    secondaryColor?: SortOrder
    tertiaryColor?: SortOrder
    quaternaryColor?: SortOrder
    quinaryColor?: SortOrder
    senaryColor?: SortOrder
    septenaryColor?: SortOrder
    octonaryColor?: SortOrder
    nonaryColor?: SortOrder
    denaryColor?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ThemeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ThemeWhereInput | ThemeWhereInput[]
    OR?: ThemeWhereInput[]
    NOT?: ThemeWhereInput | ThemeWhereInput[]
    name?: StringFilter<"Theme"> | string
    primaryColor?: StringFilter<"Theme"> | string
    secondaryColor?: StringFilter<"Theme"> | string
    tertiaryColor?: StringFilter<"Theme"> | string
    quaternaryColor?: StringFilter<"Theme"> | string
    quinaryColor?: StringFilter<"Theme"> | string
    senaryColor?: StringFilter<"Theme"> | string
    septenaryColor?: StringFilter<"Theme"> | string
    octonaryColor?: StringFilter<"Theme"> | string
    nonaryColor?: StringFilter<"Theme"> | string
    denaryColor?: StringFilter<"Theme"> | string
    createdAt?: DateTimeFilter<"Theme"> | Date | string
    updatedAt?: DateTimeFilter<"Theme"> | Date | string
  }, "id">

  export type ThemeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    primaryColor?: SortOrder
    secondaryColor?: SortOrder
    tertiaryColor?: SortOrder
    quaternaryColor?: SortOrder
    quinaryColor?: SortOrder
    senaryColor?: SortOrder
    septenaryColor?: SortOrder
    octonaryColor?: SortOrder
    nonaryColor?: SortOrder
    denaryColor?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ThemeCountOrderByAggregateInput
    _max?: ThemeMaxOrderByAggregateInput
    _min?: ThemeMinOrderByAggregateInput
  }

  export type ThemeScalarWhereWithAggregatesInput = {
    AND?: ThemeScalarWhereWithAggregatesInput | ThemeScalarWhereWithAggregatesInput[]
    OR?: ThemeScalarWhereWithAggregatesInput[]
    NOT?: ThemeScalarWhereWithAggregatesInput | ThemeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Theme"> | string
    name?: StringWithAggregatesFilter<"Theme"> | string
    primaryColor?: StringWithAggregatesFilter<"Theme"> | string
    secondaryColor?: StringWithAggregatesFilter<"Theme"> | string
    tertiaryColor?: StringWithAggregatesFilter<"Theme"> | string
    quaternaryColor?: StringWithAggregatesFilter<"Theme"> | string
    quinaryColor?: StringWithAggregatesFilter<"Theme"> | string
    senaryColor?: StringWithAggregatesFilter<"Theme"> | string
    septenaryColor?: StringWithAggregatesFilter<"Theme"> | string
    octonaryColor?: StringWithAggregatesFilter<"Theme"> | string
    nonaryColor?: StringWithAggregatesFilter<"Theme"> | string
    denaryColor?: StringWithAggregatesFilter<"Theme"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Theme"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Theme"> | Date | string
  }

  export type ThankYouSpaceWhereInput = {
    AND?: ThankYouSpaceWhereInput | ThankYouSpaceWhereInput[]
    OR?: ThankYouSpaceWhereInput[]
    NOT?: ThankYouSpaceWhereInput | ThankYouSpaceWhereInput[]
    id?: StringFilter<"ThankYouSpace"> | string
    spaceId?: StringFilter<"ThankYouSpace"> | string
    title?: StringFilter<"ThankYouSpace"> | string
    message?: StringFilter<"ThankYouSpace"> | string
    createdAt?: DateTimeFilter<"ThankYouSpace"> | Date | string
    updatedAt?: DateTimeFilter<"ThankYouSpace"> | Date | string
    space?: XOR<SpaceScalarRelationFilter, SpaceWhereInput>
  }

  export type ThankYouSpaceOrderByWithRelationInput = {
    id?: SortOrder
    spaceId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    space?: SpaceOrderByWithRelationInput
  }

  export type ThankYouSpaceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    spaceId?: string
    AND?: ThankYouSpaceWhereInput | ThankYouSpaceWhereInput[]
    OR?: ThankYouSpaceWhereInput[]
    NOT?: ThankYouSpaceWhereInput | ThankYouSpaceWhereInput[]
    title?: StringFilter<"ThankYouSpace"> | string
    message?: StringFilter<"ThankYouSpace"> | string
    createdAt?: DateTimeFilter<"ThankYouSpace"> | Date | string
    updatedAt?: DateTimeFilter<"ThankYouSpace"> | Date | string
    space?: XOR<SpaceScalarRelationFilter, SpaceWhereInput>
  }, "id" | "spaceId">

  export type ThankYouSpaceOrderByWithAggregationInput = {
    id?: SortOrder
    spaceId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ThankYouSpaceCountOrderByAggregateInput
    _max?: ThankYouSpaceMaxOrderByAggregateInput
    _min?: ThankYouSpaceMinOrderByAggregateInput
  }

  export type ThankYouSpaceScalarWhereWithAggregatesInput = {
    AND?: ThankYouSpaceScalarWhereWithAggregatesInput | ThankYouSpaceScalarWhereWithAggregatesInput[]
    OR?: ThankYouSpaceScalarWhereWithAggregatesInput[]
    NOT?: ThankYouSpaceScalarWhereWithAggregatesInput | ThankYouSpaceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ThankYouSpace"> | string
    spaceId?: StringWithAggregatesFilter<"ThankYouSpace"> | string
    title?: StringWithAggregatesFilter<"ThankYouSpace"> | string
    message?: StringWithAggregatesFilter<"ThankYouSpace"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ThankYouSpace"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ThankYouSpace"> | Date | string
  }

  export type FeedbackWhereInput = {
    AND?: FeedbackWhereInput | FeedbackWhereInput[]
    OR?: FeedbackWhereInput[]
    NOT?: FeedbackWhereInput | FeedbackWhereInput[]
    id?: StringFilter<"Feedback"> | string
    answer?: StringNullableFilter<"Feedback"> | string | null
    name?: StringFilter<"Feedback"> | string
    email?: StringFilter<"Feedback"> | string
    rating?: IntFilter<"Feedback"> | number
    permission?: BoolFilter<"Feedback"> | boolean
    spaceId?: StringFilter<"Feedback"> | string
    createdAt?: DateTimeFilter<"Feedback"> | Date | string
    updatedAt?: DateTimeFilter<"Feedback"> | Date | string
    feedbackType?: EnumFeedbackTypeFilter<"Feedback"> | $Enums.FeedbackType
    addToWallOfLove?: BoolFilter<"Feedback"> | boolean
    videoUrl?: StringNullableFilter<"Feedback"> | string | null
    imageUrl?: StringNullableFilter<"Feedback"> | string | null
    isSpam?: BoolFilter<"Feedback"> | boolean
    sentiment?: EnumSentimentTypeFilter<"Feedback"> | $Enums.SentimentType
    analysisStatus?: EnumAnalysisStatusFilter<"Feedback"> | $Enums.AnalysisStatus
    space?: XOR<SpaceScalarRelationFilter, SpaceWhereInput>
  }

  export type FeedbackOrderByWithRelationInput = {
    id?: SortOrder
    answer?: SortOrderInput | SortOrder
    name?: SortOrder
    email?: SortOrder
    rating?: SortOrder
    permission?: SortOrder
    spaceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    feedbackType?: SortOrder
    addToWallOfLove?: SortOrder
    videoUrl?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    isSpam?: SortOrder
    sentiment?: SortOrder
    analysisStatus?: SortOrder
    space?: SpaceOrderByWithRelationInput
  }

  export type FeedbackWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FeedbackWhereInput | FeedbackWhereInput[]
    OR?: FeedbackWhereInput[]
    NOT?: FeedbackWhereInput | FeedbackWhereInput[]
    answer?: StringNullableFilter<"Feedback"> | string | null
    name?: StringFilter<"Feedback"> | string
    email?: StringFilter<"Feedback"> | string
    rating?: IntFilter<"Feedback"> | number
    permission?: BoolFilter<"Feedback"> | boolean
    spaceId?: StringFilter<"Feedback"> | string
    createdAt?: DateTimeFilter<"Feedback"> | Date | string
    updatedAt?: DateTimeFilter<"Feedback"> | Date | string
    feedbackType?: EnumFeedbackTypeFilter<"Feedback"> | $Enums.FeedbackType
    addToWallOfLove?: BoolFilter<"Feedback"> | boolean
    videoUrl?: StringNullableFilter<"Feedback"> | string | null
    imageUrl?: StringNullableFilter<"Feedback"> | string | null
    isSpam?: BoolFilter<"Feedback"> | boolean
    sentiment?: EnumSentimentTypeFilter<"Feedback"> | $Enums.SentimentType
    analysisStatus?: EnumAnalysisStatusFilter<"Feedback"> | $Enums.AnalysisStatus
    space?: XOR<SpaceScalarRelationFilter, SpaceWhereInput>
  }, "id">

  export type FeedbackOrderByWithAggregationInput = {
    id?: SortOrder
    answer?: SortOrderInput | SortOrder
    name?: SortOrder
    email?: SortOrder
    rating?: SortOrder
    permission?: SortOrder
    spaceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    feedbackType?: SortOrder
    addToWallOfLove?: SortOrder
    videoUrl?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    isSpam?: SortOrder
    sentiment?: SortOrder
    analysisStatus?: SortOrder
    _count?: FeedbackCountOrderByAggregateInput
    _avg?: FeedbackAvgOrderByAggregateInput
    _max?: FeedbackMaxOrderByAggregateInput
    _min?: FeedbackMinOrderByAggregateInput
    _sum?: FeedbackSumOrderByAggregateInput
  }

  export type FeedbackScalarWhereWithAggregatesInput = {
    AND?: FeedbackScalarWhereWithAggregatesInput | FeedbackScalarWhereWithAggregatesInput[]
    OR?: FeedbackScalarWhereWithAggregatesInput[]
    NOT?: FeedbackScalarWhereWithAggregatesInput | FeedbackScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Feedback"> | string
    answer?: StringNullableWithAggregatesFilter<"Feedback"> | string | null
    name?: StringWithAggregatesFilter<"Feedback"> | string
    email?: StringWithAggregatesFilter<"Feedback"> | string
    rating?: IntWithAggregatesFilter<"Feedback"> | number
    permission?: BoolWithAggregatesFilter<"Feedback"> | boolean
    spaceId?: StringWithAggregatesFilter<"Feedback"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Feedback"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Feedback"> | Date | string
    feedbackType?: EnumFeedbackTypeWithAggregatesFilter<"Feedback"> | $Enums.FeedbackType
    addToWallOfLove?: BoolWithAggregatesFilter<"Feedback"> | boolean
    videoUrl?: StringNullableWithAggregatesFilter<"Feedback"> | string | null
    imageUrl?: StringNullableWithAggregatesFilter<"Feedback"> | string | null
    isSpam?: BoolWithAggregatesFilter<"Feedback"> | boolean
    sentiment?: EnumSentimentTypeWithAggregatesFilter<"Feedback"> | $Enums.SentimentType
    analysisStatus?: EnumAnalysisStatusWithAggregatesFilter<"Feedback"> | $Enums.AnalysisStatus
  }

  export type MetricsDateWhereInput = {
    AND?: MetricsDateWhereInput | MetricsDateWhereInput[]
    OR?: MetricsDateWhereInput[]
    NOT?: MetricsDateWhereInput | MetricsDateWhereInput[]
    id?: StringFilter<"MetricsDate"> | string
    date?: DateTimeFilter<"MetricsDate"> | Date | string
    createdAt?: DateTimeFilter<"MetricsDate"> | Date | string
    updatedAt?: DateTimeFilter<"MetricsDate"> | Date | string
    requestTestimonialMetrics?: RequestTestimonialMetricsListRelationFilter
    wallOfLoveMetrics?: WallOfLoveMetricsListRelationFilter
  }

  export type MetricsDateOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    requestTestimonialMetrics?: RequestTestimonialMetricsOrderByRelationAggregateInput
    wallOfLoveMetrics?: WallOfLoveMetricsOrderByRelationAggregateInput
  }

  export type MetricsDateWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    date?: Date | string
    AND?: MetricsDateWhereInput | MetricsDateWhereInput[]
    OR?: MetricsDateWhereInput[]
    NOT?: MetricsDateWhereInput | MetricsDateWhereInput[]
    createdAt?: DateTimeFilter<"MetricsDate"> | Date | string
    updatedAt?: DateTimeFilter<"MetricsDate"> | Date | string
    requestTestimonialMetrics?: RequestTestimonialMetricsListRelationFilter
    wallOfLoveMetrics?: WallOfLoveMetricsListRelationFilter
  }, "id" | "date">

  export type MetricsDateOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MetricsDateCountOrderByAggregateInput
    _max?: MetricsDateMaxOrderByAggregateInput
    _min?: MetricsDateMinOrderByAggregateInput
  }

  export type MetricsDateScalarWhereWithAggregatesInput = {
    AND?: MetricsDateScalarWhereWithAggregatesInput | MetricsDateScalarWhereWithAggregatesInput[]
    OR?: MetricsDateScalarWhereWithAggregatesInput[]
    NOT?: MetricsDateScalarWhereWithAggregatesInput | MetricsDateScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MetricsDate"> | string
    date?: DateTimeWithAggregatesFilter<"MetricsDate"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"MetricsDate"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MetricsDate"> | Date | string
  }

  export type RequestTestimonialMetricsWhereInput = {
    AND?: RequestTestimonialMetricsWhereInput | RequestTestimonialMetricsWhereInput[]
    OR?: RequestTestimonialMetricsWhereInput[]
    NOT?: RequestTestimonialMetricsWhereInput | RequestTestimonialMetricsWhereInput[]
    id?: StringFilter<"RequestTestimonialMetrics"> | string
    spaceId?: StringFilter<"RequestTestimonialMetrics"> | string
    dateId?: StringFilter<"RequestTestimonialMetrics"> | string
    pageViews?: IntFilter<"RequestTestimonialMetrics"> | number
    visitors?: IntFilter<"RequestTestimonialMetrics"> | number
    completedActions?: IntFilter<"RequestTestimonialMetrics"> | number
    createdAt?: DateTimeFilter<"RequestTestimonialMetrics"> | Date | string
    updatedAt?: DateTimeFilter<"RequestTestimonialMetrics"> | Date | string
    space?: XOR<SpaceScalarRelationFilter, SpaceWhereInput>
    date?: XOR<MetricsDateScalarRelationFilter, MetricsDateWhereInput>
  }

  export type RequestTestimonialMetricsOrderByWithRelationInput = {
    id?: SortOrder
    spaceId?: SortOrder
    dateId?: SortOrder
    pageViews?: SortOrder
    visitors?: SortOrder
    completedActions?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    space?: SpaceOrderByWithRelationInput
    date?: MetricsDateOrderByWithRelationInput
  }

  export type RequestTestimonialMetricsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    spaceId_dateId?: RequestTestimonialMetricsSpaceIdDateIdCompoundUniqueInput
    AND?: RequestTestimonialMetricsWhereInput | RequestTestimonialMetricsWhereInput[]
    OR?: RequestTestimonialMetricsWhereInput[]
    NOT?: RequestTestimonialMetricsWhereInput | RequestTestimonialMetricsWhereInput[]
    spaceId?: StringFilter<"RequestTestimonialMetrics"> | string
    dateId?: StringFilter<"RequestTestimonialMetrics"> | string
    pageViews?: IntFilter<"RequestTestimonialMetrics"> | number
    visitors?: IntFilter<"RequestTestimonialMetrics"> | number
    completedActions?: IntFilter<"RequestTestimonialMetrics"> | number
    createdAt?: DateTimeFilter<"RequestTestimonialMetrics"> | Date | string
    updatedAt?: DateTimeFilter<"RequestTestimonialMetrics"> | Date | string
    space?: XOR<SpaceScalarRelationFilter, SpaceWhereInput>
    date?: XOR<MetricsDateScalarRelationFilter, MetricsDateWhereInput>
  }, "id" | "spaceId_dateId">

  export type RequestTestimonialMetricsOrderByWithAggregationInput = {
    id?: SortOrder
    spaceId?: SortOrder
    dateId?: SortOrder
    pageViews?: SortOrder
    visitors?: SortOrder
    completedActions?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RequestTestimonialMetricsCountOrderByAggregateInput
    _avg?: RequestTestimonialMetricsAvgOrderByAggregateInput
    _max?: RequestTestimonialMetricsMaxOrderByAggregateInput
    _min?: RequestTestimonialMetricsMinOrderByAggregateInput
    _sum?: RequestTestimonialMetricsSumOrderByAggregateInput
  }

  export type RequestTestimonialMetricsScalarWhereWithAggregatesInput = {
    AND?: RequestTestimonialMetricsScalarWhereWithAggregatesInput | RequestTestimonialMetricsScalarWhereWithAggregatesInput[]
    OR?: RequestTestimonialMetricsScalarWhereWithAggregatesInput[]
    NOT?: RequestTestimonialMetricsScalarWhereWithAggregatesInput | RequestTestimonialMetricsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RequestTestimonialMetrics"> | string
    spaceId?: StringWithAggregatesFilter<"RequestTestimonialMetrics"> | string
    dateId?: StringWithAggregatesFilter<"RequestTestimonialMetrics"> | string
    pageViews?: IntWithAggregatesFilter<"RequestTestimonialMetrics"> | number
    visitors?: IntWithAggregatesFilter<"RequestTestimonialMetrics"> | number
    completedActions?: IntWithAggregatesFilter<"RequestTestimonialMetrics"> | number
    createdAt?: DateTimeWithAggregatesFilter<"RequestTestimonialMetrics"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"RequestTestimonialMetrics"> | Date | string
  }

  export type WallOfLoveMetricsWhereInput = {
    AND?: WallOfLoveMetricsWhereInput | WallOfLoveMetricsWhereInput[]
    OR?: WallOfLoveMetricsWhereInput[]
    NOT?: WallOfLoveMetricsWhereInput | WallOfLoveMetricsWhereInput[]
    id?: StringFilter<"WallOfLoveMetrics"> | string
    spaceId?: StringFilter<"WallOfLoveMetrics"> | string
    dateId?: StringFilter<"WallOfLoveMetrics"> | string
    pageViews?: IntFilter<"WallOfLoveMetrics"> | number
    visitors?: IntFilter<"WallOfLoveMetrics"> | number
    timeSpentOnWallOfLove?: IntFilter<"WallOfLoveMetrics"> | number
    createdAt?: DateTimeFilter<"WallOfLoveMetrics"> | Date | string
    updatedAt?: DateTimeFilter<"WallOfLoveMetrics"> | Date | string
    space?: XOR<SpaceScalarRelationFilter, SpaceWhereInput>
    date?: XOR<MetricsDateScalarRelationFilter, MetricsDateWhereInput>
  }

  export type WallOfLoveMetricsOrderByWithRelationInput = {
    id?: SortOrder
    spaceId?: SortOrder
    dateId?: SortOrder
    pageViews?: SortOrder
    visitors?: SortOrder
    timeSpentOnWallOfLove?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    space?: SpaceOrderByWithRelationInput
    date?: MetricsDateOrderByWithRelationInput
  }

  export type WallOfLoveMetricsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    spaceId_dateId?: WallOfLoveMetricsSpaceIdDateIdCompoundUniqueInput
    AND?: WallOfLoveMetricsWhereInput | WallOfLoveMetricsWhereInput[]
    OR?: WallOfLoveMetricsWhereInput[]
    NOT?: WallOfLoveMetricsWhereInput | WallOfLoveMetricsWhereInput[]
    spaceId?: StringFilter<"WallOfLoveMetrics"> | string
    dateId?: StringFilter<"WallOfLoveMetrics"> | string
    pageViews?: IntFilter<"WallOfLoveMetrics"> | number
    visitors?: IntFilter<"WallOfLoveMetrics"> | number
    timeSpentOnWallOfLove?: IntFilter<"WallOfLoveMetrics"> | number
    createdAt?: DateTimeFilter<"WallOfLoveMetrics"> | Date | string
    updatedAt?: DateTimeFilter<"WallOfLoveMetrics"> | Date | string
    space?: XOR<SpaceScalarRelationFilter, SpaceWhereInput>
    date?: XOR<MetricsDateScalarRelationFilter, MetricsDateWhereInput>
  }, "id" | "spaceId_dateId">

  export type WallOfLoveMetricsOrderByWithAggregationInput = {
    id?: SortOrder
    spaceId?: SortOrder
    dateId?: SortOrder
    pageViews?: SortOrder
    visitors?: SortOrder
    timeSpentOnWallOfLove?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WallOfLoveMetricsCountOrderByAggregateInput
    _avg?: WallOfLoveMetricsAvgOrderByAggregateInput
    _max?: WallOfLoveMetricsMaxOrderByAggregateInput
    _min?: WallOfLoveMetricsMinOrderByAggregateInput
    _sum?: WallOfLoveMetricsSumOrderByAggregateInput
  }

  export type WallOfLoveMetricsScalarWhereWithAggregatesInput = {
    AND?: WallOfLoveMetricsScalarWhereWithAggregatesInput | WallOfLoveMetricsScalarWhereWithAggregatesInput[]
    OR?: WallOfLoveMetricsScalarWhereWithAggregatesInput[]
    NOT?: WallOfLoveMetricsScalarWhereWithAggregatesInput | WallOfLoveMetricsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WallOfLoveMetrics"> | string
    spaceId?: StringWithAggregatesFilter<"WallOfLoveMetrics"> | string
    dateId?: StringWithAggregatesFilter<"WallOfLoveMetrics"> | string
    pageViews?: IntWithAggregatesFilter<"WallOfLoveMetrics"> | number
    visitors?: IntWithAggregatesFilter<"WallOfLoveMetrics"> | number
    timeSpentOnWallOfLove?: IntWithAggregatesFilter<"WallOfLoveMetrics"> | number
    createdAt?: DateTimeWithAggregatesFilter<"WallOfLoveMetrics"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"WallOfLoveMetrics"> | Date | string
  }

  export type DailyMetricsWhereInput = {
    AND?: DailyMetricsWhereInput | DailyMetricsWhereInput[]
    OR?: DailyMetricsWhereInput[]
    NOT?: DailyMetricsWhereInput | DailyMetricsWhereInput[]
    id?: StringFilter<"DailyMetrics"> | string
    spaceId?: StringFilter<"DailyMetrics"> | string
    date?: DateTimeFilter<"DailyMetrics"> | Date | string
    pageViews?: IntFilter<"DailyMetrics"> | number
    visitors?: IntFilter<"DailyMetrics"> | number
    completedActions?: IntFilter<"DailyMetrics"> | number
    timeSpentOnWallOfLove?: IntFilter<"DailyMetrics"> | number
    createdAt?: DateTimeFilter<"DailyMetrics"> | Date | string
    updatedAt?: DateTimeFilter<"DailyMetrics"> | Date | string
    space?: XOR<SpaceScalarRelationFilter, SpaceWhereInput>
  }

  export type DailyMetricsOrderByWithRelationInput = {
    id?: SortOrder
    spaceId?: SortOrder
    date?: SortOrder
    pageViews?: SortOrder
    visitors?: SortOrder
    completedActions?: SortOrder
    timeSpentOnWallOfLove?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    space?: SpaceOrderByWithRelationInput
  }

  export type DailyMetricsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    spaceId_date?: DailyMetricsSpaceIdDateCompoundUniqueInput
    AND?: DailyMetricsWhereInput | DailyMetricsWhereInput[]
    OR?: DailyMetricsWhereInput[]
    NOT?: DailyMetricsWhereInput | DailyMetricsWhereInput[]
    spaceId?: StringFilter<"DailyMetrics"> | string
    date?: DateTimeFilter<"DailyMetrics"> | Date | string
    pageViews?: IntFilter<"DailyMetrics"> | number
    visitors?: IntFilter<"DailyMetrics"> | number
    completedActions?: IntFilter<"DailyMetrics"> | number
    timeSpentOnWallOfLove?: IntFilter<"DailyMetrics"> | number
    createdAt?: DateTimeFilter<"DailyMetrics"> | Date | string
    updatedAt?: DateTimeFilter<"DailyMetrics"> | Date | string
    space?: XOR<SpaceScalarRelationFilter, SpaceWhereInput>
  }, "id" | "spaceId_date">

  export type DailyMetricsOrderByWithAggregationInput = {
    id?: SortOrder
    spaceId?: SortOrder
    date?: SortOrder
    pageViews?: SortOrder
    visitors?: SortOrder
    completedActions?: SortOrder
    timeSpentOnWallOfLove?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DailyMetricsCountOrderByAggregateInput
    _avg?: DailyMetricsAvgOrderByAggregateInput
    _max?: DailyMetricsMaxOrderByAggregateInput
    _min?: DailyMetricsMinOrderByAggregateInput
    _sum?: DailyMetricsSumOrderByAggregateInput
  }

  export type DailyMetricsScalarWhereWithAggregatesInput = {
    AND?: DailyMetricsScalarWhereWithAggregatesInput | DailyMetricsScalarWhereWithAggregatesInput[]
    OR?: DailyMetricsScalarWhereWithAggregatesInput[]
    NOT?: DailyMetricsScalarWhereWithAggregatesInput | DailyMetricsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DailyMetrics"> | string
    spaceId?: StringWithAggregatesFilter<"DailyMetrics"> | string
    date?: DateTimeWithAggregatesFilter<"DailyMetrics"> | Date | string
    pageViews?: IntWithAggregatesFilter<"DailyMetrics"> | number
    visitors?: IntWithAggregatesFilter<"DailyMetrics"> | number
    completedActions?: IntWithAggregatesFilter<"DailyMetrics"> | number
    timeSpentOnWallOfLove?: IntWithAggregatesFilter<"DailyMetrics"> | number
    createdAt?: DateTimeWithAggregatesFilter<"DailyMetrics"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DailyMetrics"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    spaces?: SpaceCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    spaces?: SpaceUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    spaces?: SpaceUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    spaces?: SpaceUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountCreateInput = {
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAccountsInput
  }

  export type AccountUncheckedCreateInput = {
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountUpdateInput = {
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountCreateManyInput = {
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountUpdateManyMutationInput = {
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenCreateInput = {
    id?: string
    email: string
    token: string
    expires: Date | string
    createdAt?: Date | string
  }

  export type VerificationTokenUncheckedCreateInput = {
    id?: string
    email: string
    token: string
    expires: Date | string
    createdAt?: Date | string
  }

  export type VerificationTokenUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenCreateManyInput = {
    id?: string
    email: string
    token: string
    expires: Date | string
    createdAt?: Date | string
  }

  export type VerificationTokenUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetTokenCreateInput = {
    id?: string
    email: string
    token: string
    expires: Date | string
  }

  export type PasswordResetTokenUncheckedCreateInput = {
    id?: string
    email: string
    token: string
    expires: Date | string
  }

  export type PasswordResetTokenUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetTokenUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetTokenCreateManyInput = {
    id?: string
    email: string
    token: string
    expires: Date | string
  }

  export type PasswordResetTokenUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetTokenUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SpaceCreateInput = {
    id?: string
    name: string
    logo?: string | null
    headerTitle: string
    headerSubtitle: string
    collectionType: $Enums.CollectionType
    collectStar: boolean
    isAnalysisEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isPublished?: boolean
    questions?: QuestionCreateNestedManyWithoutSpaceInput
    createdBy: UserCreateNestedOneWithoutSpacesInput
    thankyouSpace?: ThankYouSpaceCreateNestedOneWithoutSpaceInput
    feedbacks?: FeedbackCreateNestedManyWithoutSpaceInput
    DailyMetrics?: DailyMetricsCreateNestedManyWithoutSpaceInput
    RequestTestimonialMetrics?: RequestTestimonialMetricsCreateNestedManyWithoutSpaceInput
    WallOfLoveMetrics?: WallOfLoveMetricsCreateNestedManyWithoutSpaceInput
  }

  export type SpaceUncheckedCreateInput = {
    id?: string
    name: string
    logo?: string | null
    headerTitle: string
    headerSubtitle: string
    collectionType: $Enums.CollectionType
    collectStar: boolean
    isAnalysisEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    isPublished?: boolean
    questions?: QuestionUncheckedCreateNestedManyWithoutSpaceInput
    thankyouSpace?: ThankYouSpaceUncheckedCreateNestedOneWithoutSpaceInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutSpaceInput
    DailyMetrics?: DailyMetricsUncheckedCreateNestedManyWithoutSpaceInput
    RequestTestimonialMetrics?: RequestTestimonialMetricsUncheckedCreateNestedManyWithoutSpaceInput
    WallOfLoveMetrics?: WallOfLoveMetricsUncheckedCreateNestedManyWithoutSpaceInput
  }

  export type SpaceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    headerTitle?: StringFieldUpdateOperationsInput | string
    headerSubtitle?: StringFieldUpdateOperationsInput | string
    collectionType?: EnumCollectionTypeFieldUpdateOperationsInput | $Enums.CollectionType
    collectStar?: BoolFieldUpdateOperationsInput | boolean
    isAnalysisEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    questions?: QuestionUpdateManyWithoutSpaceNestedInput
    createdBy?: UserUpdateOneRequiredWithoutSpacesNestedInput
    thankyouSpace?: ThankYouSpaceUpdateOneWithoutSpaceNestedInput
    feedbacks?: FeedbackUpdateManyWithoutSpaceNestedInput
    DailyMetrics?: DailyMetricsUpdateManyWithoutSpaceNestedInput
    RequestTestimonialMetrics?: RequestTestimonialMetricsUpdateManyWithoutSpaceNestedInput
    WallOfLoveMetrics?: WallOfLoveMetricsUpdateManyWithoutSpaceNestedInput
  }

  export type SpaceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    headerTitle?: StringFieldUpdateOperationsInput | string
    headerSubtitle?: StringFieldUpdateOperationsInput | string
    collectionType?: EnumCollectionTypeFieldUpdateOperationsInput | $Enums.CollectionType
    collectStar?: BoolFieldUpdateOperationsInput | boolean
    isAnalysisEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    questions?: QuestionUncheckedUpdateManyWithoutSpaceNestedInput
    thankyouSpace?: ThankYouSpaceUncheckedUpdateOneWithoutSpaceNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutSpaceNestedInput
    DailyMetrics?: DailyMetricsUncheckedUpdateManyWithoutSpaceNestedInput
    RequestTestimonialMetrics?: RequestTestimonialMetricsUncheckedUpdateManyWithoutSpaceNestedInput
    WallOfLoveMetrics?: WallOfLoveMetricsUncheckedUpdateManyWithoutSpaceNestedInput
  }

  export type SpaceCreateManyInput = {
    id?: string
    name: string
    logo?: string | null
    headerTitle: string
    headerSubtitle: string
    collectionType: $Enums.CollectionType
    collectStar: boolean
    isAnalysisEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    isPublished?: boolean
  }

  export type SpaceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    headerTitle?: StringFieldUpdateOperationsInput | string
    headerSubtitle?: StringFieldUpdateOperationsInput | string
    collectionType?: EnumCollectionTypeFieldUpdateOperationsInput | $Enums.CollectionType
    collectStar?: BoolFieldUpdateOperationsInput | boolean
    isAnalysisEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPublished?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SpaceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    headerTitle?: StringFieldUpdateOperationsInput | string
    headerSubtitle?: StringFieldUpdateOperationsInput | string
    collectionType?: EnumCollectionTypeFieldUpdateOperationsInput | $Enums.CollectionType
    collectStar?: BoolFieldUpdateOperationsInput | boolean
    isAnalysisEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    isPublished?: BoolFieldUpdateOperationsInput | boolean
  }

  export type QuestionCreateInput = {
    id?: string
    title: string
    order: number
    space: SpaceCreateNestedOneWithoutQuestionsInput
  }

  export type QuestionUncheckedCreateInput = {
    id?: string
    spaceId: string
    title: string
    order: number
  }

  export type QuestionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    space?: SpaceUpdateOneRequiredWithoutQuestionsNestedInput
  }

  export type QuestionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    spaceId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
  }

  export type QuestionCreateManyInput = {
    id?: string
    spaceId: string
    title: string
    order: number
  }

  export type QuestionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
  }

  export type QuestionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    spaceId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
  }

  export type ThemeCreateInput = {
    id?: string
    name: string
    primaryColor: string
    secondaryColor: string
    tertiaryColor: string
    quaternaryColor: string
    quinaryColor: string
    senaryColor: string
    septenaryColor: string
    octonaryColor: string
    nonaryColor: string
    denaryColor: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ThemeUncheckedCreateInput = {
    id?: string
    name: string
    primaryColor: string
    secondaryColor: string
    tertiaryColor: string
    quaternaryColor: string
    quinaryColor: string
    senaryColor: string
    septenaryColor: string
    octonaryColor: string
    nonaryColor: string
    denaryColor: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ThemeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    primaryColor?: StringFieldUpdateOperationsInput | string
    secondaryColor?: StringFieldUpdateOperationsInput | string
    tertiaryColor?: StringFieldUpdateOperationsInput | string
    quaternaryColor?: StringFieldUpdateOperationsInput | string
    quinaryColor?: StringFieldUpdateOperationsInput | string
    senaryColor?: StringFieldUpdateOperationsInput | string
    septenaryColor?: StringFieldUpdateOperationsInput | string
    octonaryColor?: StringFieldUpdateOperationsInput | string
    nonaryColor?: StringFieldUpdateOperationsInput | string
    denaryColor?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ThemeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    primaryColor?: StringFieldUpdateOperationsInput | string
    secondaryColor?: StringFieldUpdateOperationsInput | string
    tertiaryColor?: StringFieldUpdateOperationsInput | string
    quaternaryColor?: StringFieldUpdateOperationsInput | string
    quinaryColor?: StringFieldUpdateOperationsInput | string
    senaryColor?: StringFieldUpdateOperationsInput | string
    septenaryColor?: StringFieldUpdateOperationsInput | string
    octonaryColor?: StringFieldUpdateOperationsInput | string
    nonaryColor?: StringFieldUpdateOperationsInput | string
    denaryColor?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ThemeCreateManyInput = {
    id?: string
    name: string
    primaryColor: string
    secondaryColor: string
    tertiaryColor: string
    quaternaryColor: string
    quinaryColor: string
    senaryColor: string
    septenaryColor: string
    octonaryColor: string
    nonaryColor: string
    denaryColor: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ThemeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    primaryColor?: StringFieldUpdateOperationsInput | string
    secondaryColor?: StringFieldUpdateOperationsInput | string
    tertiaryColor?: StringFieldUpdateOperationsInput | string
    quaternaryColor?: StringFieldUpdateOperationsInput | string
    quinaryColor?: StringFieldUpdateOperationsInput | string
    senaryColor?: StringFieldUpdateOperationsInput | string
    septenaryColor?: StringFieldUpdateOperationsInput | string
    octonaryColor?: StringFieldUpdateOperationsInput | string
    nonaryColor?: StringFieldUpdateOperationsInput | string
    denaryColor?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ThemeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    primaryColor?: StringFieldUpdateOperationsInput | string
    secondaryColor?: StringFieldUpdateOperationsInput | string
    tertiaryColor?: StringFieldUpdateOperationsInput | string
    quaternaryColor?: StringFieldUpdateOperationsInput | string
    quinaryColor?: StringFieldUpdateOperationsInput | string
    senaryColor?: StringFieldUpdateOperationsInput | string
    septenaryColor?: StringFieldUpdateOperationsInput | string
    octonaryColor?: StringFieldUpdateOperationsInput | string
    nonaryColor?: StringFieldUpdateOperationsInput | string
    denaryColor?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ThankYouSpaceCreateInput = {
    id?: string
    title: string
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
    space: SpaceCreateNestedOneWithoutThankyouSpaceInput
  }

  export type ThankYouSpaceUncheckedCreateInput = {
    id?: string
    spaceId: string
    title: string
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ThankYouSpaceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    space?: SpaceUpdateOneRequiredWithoutThankyouSpaceNestedInput
  }

  export type ThankYouSpaceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    spaceId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ThankYouSpaceCreateManyInput = {
    id?: string
    spaceId: string
    title: string
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ThankYouSpaceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ThankYouSpaceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    spaceId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackCreateInput = {
    id?: string
    answer?: string | null
    name: string
    email: string
    rating: number
    permission: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    feedbackType: $Enums.FeedbackType
    addToWallOfLove?: boolean
    videoUrl?: string | null
    imageUrl?: string | null
    isSpam?: boolean
    sentiment?: $Enums.SentimentType
    analysisStatus?: $Enums.AnalysisStatus
    space: SpaceCreateNestedOneWithoutFeedbacksInput
  }

  export type FeedbackUncheckedCreateInput = {
    id?: string
    answer?: string | null
    name: string
    email: string
    rating: number
    permission: boolean
    spaceId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    feedbackType: $Enums.FeedbackType
    addToWallOfLove?: boolean
    videoUrl?: string | null
    imageUrl?: string | null
    isSpam?: boolean
    sentiment?: $Enums.SentimentType
    analysisStatus?: $Enums.AnalysisStatus
  }

  export type FeedbackUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    answer?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    permission?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feedbackType?: EnumFeedbackTypeFieldUpdateOperationsInput | $Enums.FeedbackType
    addToWallOfLove?: BoolFieldUpdateOperationsInput | boolean
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isSpam?: BoolFieldUpdateOperationsInput | boolean
    sentiment?: EnumSentimentTypeFieldUpdateOperationsInput | $Enums.SentimentType
    analysisStatus?: EnumAnalysisStatusFieldUpdateOperationsInput | $Enums.AnalysisStatus
    space?: SpaceUpdateOneRequiredWithoutFeedbacksNestedInput
  }

  export type FeedbackUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    answer?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    permission?: BoolFieldUpdateOperationsInput | boolean
    spaceId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feedbackType?: EnumFeedbackTypeFieldUpdateOperationsInput | $Enums.FeedbackType
    addToWallOfLove?: BoolFieldUpdateOperationsInput | boolean
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isSpam?: BoolFieldUpdateOperationsInput | boolean
    sentiment?: EnumSentimentTypeFieldUpdateOperationsInput | $Enums.SentimentType
    analysisStatus?: EnumAnalysisStatusFieldUpdateOperationsInput | $Enums.AnalysisStatus
  }

  export type FeedbackCreateManyInput = {
    id?: string
    answer?: string | null
    name: string
    email: string
    rating: number
    permission: boolean
    spaceId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    feedbackType: $Enums.FeedbackType
    addToWallOfLove?: boolean
    videoUrl?: string | null
    imageUrl?: string | null
    isSpam?: boolean
    sentiment?: $Enums.SentimentType
    analysisStatus?: $Enums.AnalysisStatus
  }

  export type FeedbackUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    answer?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    permission?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feedbackType?: EnumFeedbackTypeFieldUpdateOperationsInput | $Enums.FeedbackType
    addToWallOfLove?: BoolFieldUpdateOperationsInput | boolean
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isSpam?: BoolFieldUpdateOperationsInput | boolean
    sentiment?: EnumSentimentTypeFieldUpdateOperationsInput | $Enums.SentimentType
    analysisStatus?: EnumAnalysisStatusFieldUpdateOperationsInput | $Enums.AnalysisStatus
  }

  export type FeedbackUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    answer?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    permission?: BoolFieldUpdateOperationsInput | boolean
    spaceId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feedbackType?: EnumFeedbackTypeFieldUpdateOperationsInput | $Enums.FeedbackType
    addToWallOfLove?: BoolFieldUpdateOperationsInput | boolean
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isSpam?: BoolFieldUpdateOperationsInput | boolean
    sentiment?: EnumSentimentTypeFieldUpdateOperationsInput | $Enums.SentimentType
    analysisStatus?: EnumAnalysisStatusFieldUpdateOperationsInput | $Enums.AnalysisStatus
  }

  export type MetricsDateCreateInput = {
    id?: string
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    requestTestimonialMetrics?: RequestTestimonialMetricsCreateNestedManyWithoutDateInput
    wallOfLoveMetrics?: WallOfLoveMetricsCreateNestedManyWithoutDateInput
  }

  export type MetricsDateUncheckedCreateInput = {
    id?: string
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    requestTestimonialMetrics?: RequestTestimonialMetricsUncheckedCreateNestedManyWithoutDateInput
    wallOfLoveMetrics?: WallOfLoveMetricsUncheckedCreateNestedManyWithoutDateInput
  }

  export type MetricsDateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requestTestimonialMetrics?: RequestTestimonialMetricsUpdateManyWithoutDateNestedInput
    wallOfLoveMetrics?: WallOfLoveMetricsUpdateManyWithoutDateNestedInput
  }

  export type MetricsDateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requestTestimonialMetrics?: RequestTestimonialMetricsUncheckedUpdateManyWithoutDateNestedInput
    wallOfLoveMetrics?: WallOfLoveMetricsUncheckedUpdateManyWithoutDateNestedInput
  }

  export type MetricsDateCreateManyInput = {
    id?: string
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MetricsDateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MetricsDateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestTestimonialMetricsCreateInput = {
    id?: string
    pageViews?: number
    visitors?: number
    completedActions?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    space: SpaceCreateNestedOneWithoutRequestTestimonialMetricsInput
    date: MetricsDateCreateNestedOneWithoutRequestTestimonialMetricsInput
  }

  export type RequestTestimonialMetricsUncheckedCreateInput = {
    id?: string
    spaceId: string
    dateId: string
    pageViews?: number
    visitors?: number
    completedActions?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RequestTestimonialMetricsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    pageViews?: IntFieldUpdateOperationsInput | number
    visitors?: IntFieldUpdateOperationsInput | number
    completedActions?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    space?: SpaceUpdateOneRequiredWithoutRequestTestimonialMetricsNestedInput
    date?: MetricsDateUpdateOneRequiredWithoutRequestTestimonialMetricsNestedInput
  }

  export type RequestTestimonialMetricsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    spaceId?: StringFieldUpdateOperationsInput | string
    dateId?: StringFieldUpdateOperationsInput | string
    pageViews?: IntFieldUpdateOperationsInput | number
    visitors?: IntFieldUpdateOperationsInput | number
    completedActions?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestTestimonialMetricsCreateManyInput = {
    id?: string
    spaceId: string
    dateId: string
    pageViews?: number
    visitors?: number
    completedActions?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RequestTestimonialMetricsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    pageViews?: IntFieldUpdateOperationsInput | number
    visitors?: IntFieldUpdateOperationsInput | number
    completedActions?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestTestimonialMetricsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    spaceId?: StringFieldUpdateOperationsInput | string
    dateId?: StringFieldUpdateOperationsInput | string
    pageViews?: IntFieldUpdateOperationsInput | number
    visitors?: IntFieldUpdateOperationsInput | number
    completedActions?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WallOfLoveMetricsCreateInput = {
    id?: string
    pageViews?: number
    visitors?: number
    timeSpentOnWallOfLove?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    space: SpaceCreateNestedOneWithoutWallOfLoveMetricsInput
    date: MetricsDateCreateNestedOneWithoutWallOfLoveMetricsInput
  }

  export type WallOfLoveMetricsUncheckedCreateInput = {
    id?: string
    spaceId: string
    dateId: string
    pageViews?: number
    visitors?: number
    timeSpentOnWallOfLove?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WallOfLoveMetricsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    pageViews?: IntFieldUpdateOperationsInput | number
    visitors?: IntFieldUpdateOperationsInput | number
    timeSpentOnWallOfLove?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    space?: SpaceUpdateOneRequiredWithoutWallOfLoveMetricsNestedInput
    date?: MetricsDateUpdateOneRequiredWithoutWallOfLoveMetricsNestedInput
  }

  export type WallOfLoveMetricsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    spaceId?: StringFieldUpdateOperationsInput | string
    dateId?: StringFieldUpdateOperationsInput | string
    pageViews?: IntFieldUpdateOperationsInput | number
    visitors?: IntFieldUpdateOperationsInput | number
    timeSpentOnWallOfLove?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WallOfLoveMetricsCreateManyInput = {
    id?: string
    spaceId: string
    dateId: string
    pageViews?: number
    visitors?: number
    timeSpentOnWallOfLove?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WallOfLoveMetricsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    pageViews?: IntFieldUpdateOperationsInput | number
    visitors?: IntFieldUpdateOperationsInput | number
    timeSpentOnWallOfLove?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WallOfLoveMetricsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    spaceId?: StringFieldUpdateOperationsInput | string
    dateId?: StringFieldUpdateOperationsInput | string
    pageViews?: IntFieldUpdateOperationsInput | number
    visitors?: IntFieldUpdateOperationsInput | number
    timeSpentOnWallOfLove?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DailyMetricsCreateInput = {
    id?: string
    date: Date | string
    pageViews?: number
    visitors?: number
    completedActions?: number
    timeSpentOnWallOfLove?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    space: SpaceCreateNestedOneWithoutDailyMetricsInput
  }

  export type DailyMetricsUncheckedCreateInput = {
    id?: string
    spaceId: string
    date: Date | string
    pageViews?: number
    visitors?: number
    completedActions?: number
    timeSpentOnWallOfLove?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DailyMetricsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    pageViews?: IntFieldUpdateOperationsInput | number
    visitors?: IntFieldUpdateOperationsInput | number
    completedActions?: IntFieldUpdateOperationsInput | number
    timeSpentOnWallOfLove?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    space?: SpaceUpdateOneRequiredWithoutDailyMetricsNestedInput
  }

  export type DailyMetricsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    spaceId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    pageViews?: IntFieldUpdateOperationsInput | number
    visitors?: IntFieldUpdateOperationsInput | number
    completedActions?: IntFieldUpdateOperationsInput | number
    timeSpentOnWallOfLove?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DailyMetricsCreateManyInput = {
    id?: string
    spaceId: string
    date: Date | string
    pageViews?: number
    visitors?: number
    completedActions?: number
    timeSpentOnWallOfLove?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DailyMetricsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    pageViews?: IntFieldUpdateOperationsInput | number
    visitors?: IntFieldUpdateOperationsInput | number
    completedActions?: IntFieldUpdateOperationsInput | number
    timeSpentOnWallOfLove?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DailyMetricsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    spaceId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    pageViews?: IntFieldUpdateOperationsInput | number
    visitors?: IntFieldUpdateOperationsInput | number
    completedActions?: IntFieldUpdateOperationsInput | number
    timeSpentOnWallOfLove?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type SpaceListRelationFilter = {
    every?: SpaceWhereInput
    some?: SpaceWhereInput
    none?: SpaceWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SpaceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type AccountProviderProviderAccountIdCompoundUniqueInput = {
    provider: string
    providerAccountId: string
  }

  export type AccountCountOrderByAggregateInput = {
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountAvgOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountSumOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type VerificationTokenEmailTokenCompoundUniqueInput = {
    email: string
    token: string
  }

  export type VerificationTokenCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
  }

  export type VerificationTokenMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
  }

  export type VerificationTokenMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
  }

  export type PasswordResetTokenEmailTokenCompoundUniqueInput = {
    email: string
    token: string
  }

  export type PasswordResetTokenCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type PasswordResetTokenMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type PasswordResetTokenMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type EnumCollectionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CollectionType | EnumCollectionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CollectionType[] | ListEnumCollectionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CollectionType[] | ListEnumCollectionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCollectionTypeFilter<$PrismaModel> | $Enums.CollectionType
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type QuestionListRelationFilter = {
    every?: QuestionWhereInput
    some?: QuestionWhereInput
    none?: QuestionWhereInput
  }

  export type ThankYouSpaceNullableScalarRelationFilter = {
    is?: ThankYouSpaceWhereInput | null
    isNot?: ThankYouSpaceWhereInput | null
  }

  export type FeedbackListRelationFilter = {
    every?: FeedbackWhereInput
    some?: FeedbackWhereInput
    none?: FeedbackWhereInput
  }

  export type DailyMetricsListRelationFilter = {
    every?: DailyMetricsWhereInput
    some?: DailyMetricsWhereInput
    none?: DailyMetricsWhereInput
  }

  export type RequestTestimonialMetricsListRelationFilter = {
    every?: RequestTestimonialMetricsWhereInput
    some?: RequestTestimonialMetricsWhereInput
    none?: RequestTestimonialMetricsWhereInput
  }

  export type WallOfLoveMetricsListRelationFilter = {
    every?: WallOfLoveMetricsWhereInput
    some?: WallOfLoveMetricsWhereInput
    none?: WallOfLoveMetricsWhereInput
  }

  export type QuestionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FeedbackOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DailyMetricsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RequestTestimonialMetricsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WallOfLoveMetricsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SpaceCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    logo?: SortOrder
    headerTitle?: SortOrder
    headerSubtitle?: SortOrder
    collectionType?: SortOrder
    collectStar?: SortOrder
    isAnalysisEnabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    isPublished?: SortOrder
  }

  export type SpaceMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    logo?: SortOrder
    headerTitle?: SortOrder
    headerSubtitle?: SortOrder
    collectionType?: SortOrder
    collectStar?: SortOrder
    isAnalysisEnabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    isPublished?: SortOrder
  }

  export type SpaceMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    logo?: SortOrder
    headerTitle?: SortOrder
    headerSubtitle?: SortOrder
    collectionType?: SortOrder
    collectStar?: SortOrder
    isAnalysisEnabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    isPublished?: SortOrder
  }

  export type EnumCollectionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CollectionType | EnumCollectionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CollectionType[] | ListEnumCollectionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CollectionType[] | ListEnumCollectionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCollectionTypeWithAggregatesFilter<$PrismaModel> | $Enums.CollectionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCollectionTypeFilter<$PrismaModel>
    _max?: NestedEnumCollectionTypeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type SpaceScalarRelationFilter = {
    is?: SpaceWhereInput
    isNot?: SpaceWhereInput
  }

  export type QuestionCountOrderByAggregateInput = {
    id?: SortOrder
    spaceId?: SortOrder
    title?: SortOrder
    order?: SortOrder
  }

  export type QuestionAvgOrderByAggregateInput = {
    order?: SortOrder
  }

  export type QuestionMaxOrderByAggregateInput = {
    id?: SortOrder
    spaceId?: SortOrder
    title?: SortOrder
    order?: SortOrder
  }

  export type QuestionMinOrderByAggregateInput = {
    id?: SortOrder
    spaceId?: SortOrder
    title?: SortOrder
    order?: SortOrder
  }

  export type QuestionSumOrderByAggregateInput = {
    order?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type ThemeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    primaryColor?: SortOrder
    secondaryColor?: SortOrder
    tertiaryColor?: SortOrder
    quaternaryColor?: SortOrder
    quinaryColor?: SortOrder
    senaryColor?: SortOrder
    septenaryColor?: SortOrder
    octonaryColor?: SortOrder
    nonaryColor?: SortOrder
    denaryColor?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ThemeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    primaryColor?: SortOrder
    secondaryColor?: SortOrder
    tertiaryColor?: SortOrder
    quaternaryColor?: SortOrder
    quinaryColor?: SortOrder
    senaryColor?: SortOrder
    septenaryColor?: SortOrder
    octonaryColor?: SortOrder
    nonaryColor?: SortOrder
    denaryColor?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ThemeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    primaryColor?: SortOrder
    secondaryColor?: SortOrder
    tertiaryColor?: SortOrder
    quaternaryColor?: SortOrder
    quinaryColor?: SortOrder
    senaryColor?: SortOrder
    septenaryColor?: SortOrder
    octonaryColor?: SortOrder
    nonaryColor?: SortOrder
    denaryColor?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ThankYouSpaceCountOrderByAggregateInput = {
    id?: SortOrder
    spaceId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ThankYouSpaceMaxOrderByAggregateInput = {
    id?: SortOrder
    spaceId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ThankYouSpaceMinOrderByAggregateInput = {
    id?: SortOrder
    spaceId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumFeedbackTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.FeedbackType | EnumFeedbackTypeFieldRefInput<$PrismaModel>
    in?: $Enums.FeedbackType[] | ListEnumFeedbackTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.FeedbackType[] | ListEnumFeedbackTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumFeedbackTypeFilter<$PrismaModel> | $Enums.FeedbackType
  }

  export type EnumSentimentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.SentimentType | EnumSentimentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SentimentType[] | ListEnumSentimentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SentimentType[] | ListEnumSentimentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSentimentTypeFilter<$PrismaModel> | $Enums.SentimentType
  }

  export type EnumAnalysisStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AnalysisStatus | EnumAnalysisStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AnalysisStatus[] | ListEnumAnalysisStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AnalysisStatus[] | ListEnumAnalysisStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAnalysisStatusFilter<$PrismaModel> | $Enums.AnalysisStatus
  }

  export type FeedbackCountOrderByAggregateInput = {
    id?: SortOrder
    answer?: SortOrder
    name?: SortOrder
    email?: SortOrder
    rating?: SortOrder
    permission?: SortOrder
    spaceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    feedbackType?: SortOrder
    addToWallOfLove?: SortOrder
    videoUrl?: SortOrder
    imageUrl?: SortOrder
    isSpam?: SortOrder
    sentiment?: SortOrder
    analysisStatus?: SortOrder
  }

  export type FeedbackAvgOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type FeedbackMaxOrderByAggregateInput = {
    id?: SortOrder
    answer?: SortOrder
    name?: SortOrder
    email?: SortOrder
    rating?: SortOrder
    permission?: SortOrder
    spaceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    feedbackType?: SortOrder
    addToWallOfLove?: SortOrder
    videoUrl?: SortOrder
    imageUrl?: SortOrder
    isSpam?: SortOrder
    sentiment?: SortOrder
    analysisStatus?: SortOrder
  }

  export type FeedbackMinOrderByAggregateInput = {
    id?: SortOrder
    answer?: SortOrder
    name?: SortOrder
    email?: SortOrder
    rating?: SortOrder
    permission?: SortOrder
    spaceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    feedbackType?: SortOrder
    addToWallOfLove?: SortOrder
    videoUrl?: SortOrder
    imageUrl?: SortOrder
    isSpam?: SortOrder
    sentiment?: SortOrder
    analysisStatus?: SortOrder
  }

  export type FeedbackSumOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type EnumFeedbackTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FeedbackType | EnumFeedbackTypeFieldRefInput<$PrismaModel>
    in?: $Enums.FeedbackType[] | ListEnumFeedbackTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.FeedbackType[] | ListEnumFeedbackTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumFeedbackTypeWithAggregatesFilter<$PrismaModel> | $Enums.FeedbackType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFeedbackTypeFilter<$PrismaModel>
    _max?: NestedEnumFeedbackTypeFilter<$PrismaModel>
  }

  export type EnumSentimentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SentimentType | EnumSentimentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SentimentType[] | ListEnumSentimentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SentimentType[] | ListEnumSentimentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSentimentTypeWithAggregatesFilter<$PrismaModel> | $Enums.SentimentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSentimentTypeFilter<$PrismaModel>
    _max?: NestedEnumSentimentTypeFilter<$PrismaModel>
  }

  export type EnumAnalysisStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AnalysisStatus | EnumAnalysisStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AnalysisStatus[] | ListEnumAnalysisStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AnalysisStatus[] | ListEnumAnalysisStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAnalysisStatusWithAggregatesFilter<$PrismaModel> | $Enums.AnalysisStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAnalysisStatusFilter<$PrismaModel>
    _max?: NestedEnumAnalysisStatusFilter<$PrismaModel>
  }

  export type MetricsDateCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MetricsDateMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MetricsDateMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MetricsDateScalarRelationFilter = {
    is?: MetricsDateWhereInput
    isNot?: MetricsDateWhereInput
  }

  export type RequestTestimonialMetricsSpaceIdDateIdCompoundUniqueInput = {
    spaceId: string
    dateId: string
  }

  export type RequestTestimonialMetricsCountOrderByAggregateInput = {
    id?: SortOrder
    spaceId?: SortOrder
    dateId?: SortOrder
    pageViews?: SortOrder
    visitors?: SortOrder
    completedActions?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RequestTestimonialMetricsAvgOrderByAggregateInput = {
    pageViews?: SortOrder
    visitors?: SortOrder
    completedActions?: SortOrder
  }

  export type RequestTestimonialMetricsMaxOrderByAggregateInput = {
    id?: SortOrder
    spaceId?: SortOrder
    dateId?: SortOrder
    pageViews?: SortOrder
    visitors?: SortOrder
    completedActions?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RequestTestimonialMetricsMinOrderByAggregateInput = {
    id?: SortOrder
    spaceId?: SortOrder
    dateId?: SortOrder
    pageViews?: SortOrder
    visitors?: SortOrder
    completedActions?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RequestTestimonialMetricsSumOrderByAggregateInput = {
    pageViews?: SortOrder
    visitors?: SortOrder
    completedActions?: SortOrder
  }

  export type WallOfLoveMetricsSpaceIdDateIdCompoundUniqueInput = {
    spaceId: string
    dateId: string
  }

  export type WallOfLoveMetricsCountOrderByAggregateInput = {
    id?: SortOrder
    spaceId?: SortOrder
    dateId?: SortOrder
    pageViews?: SortOrder
    visitors?: SortOrder
    timeSpentOnWallOfLove?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WallOfLoveMetricsAvgOrderByAggregateInput = {
    pageViews?: SortOrder
    visitors?: SortOrder
    timeSpentOnWallOfLove?: SortOrder
  }

  export type WallOfLoveMetricsMaxOrderByAggregateInput = {
    id?: SortOrder
    spaceId?: SortOrder
    dateId?: SortOrder
    pageViews?: SortOrder
    visitors?: SortOrder
    timeSpentOnWallOfLove?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WallOfLoveMetricsMinOrderByAggregateInput = {
    id?: SortOrder
    spaceId?: SortOrder
    dateId?: SortOrder
    pageViews?: SortOrder
    visitors?: SortOrder
    timeSpentOnWallOfLove?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WallOfLoveMetricsSumOrderByAggregateInput = {
    pageViews?: SortOrder
    visitors?: SortOrder
    timeSpentOnWallOfLove?: SortOrder
  }

  export type DailyMetricsSpaceIdDateCompoundUniqueInput = {
    spaceId: string
    date: Date | string
  }

  export type DailyMetricsCountOrderByAggregateInput = {
    id?: SortOrder
    spaceId?: SortOrder
    date?: SortOrder
    pageViews?: SortOrder
    visitors?: SortOrder
    completedActions?: SortOrder
    timeSpentOnWallOfLove?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DailyMetricsAvgOrderByAggregateInput = {
    pageViews?: SortOrder
    visitors?: SortOrder
    completedActions?: SortOrder
    timeSpentOnWallOfLove?: SortOrder
  }

  export type DailyMetricsMaxOrderByAggregateInput = {
    id?: SortOrder
    spaceId?: SortOrder
    date?: SortOrder
    pageViews?: SortOrder
    visitors?: SortOrder
    completedActions?: SortOrder
    timeSpentOnWallOfLove?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DailyMetricsMinOrderByAggregateInput = {
    id?: SortOrder
    spaceId?: SortOrder
    date?: SortOrder
    pageViews?: SortOrder
    visitors?: SortOrder
    completedActions?: SortOrder
    timeSpentOnWallOfLove?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DailyMetricsSumOrderByAggregateInput = {
    pageViews?: SortOrder
    visitors?: SortOrder
    completedActions?: SortOrder
    timeSpentOnWallOfLove?: SortOrder
  }

  export type AccountCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type SpaceCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<SpaceCreateWithoutCreatedByInput, SpaceUncheckedCreateWithoutCreatedByInput> | SpaceCreateWithoutCreatedByInput[] | SpaceUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: SpaceCreateOrConnectWithoutCreatedByInput | SpaceCreateOrConnectWithoutCreatedByInput[]
    createMany?: SpaceCreateManyCreatedByInputEnvelope
    connect?: SpaceWhereUniqueInput | SpaceWhereUniqueInput[]
  }

  export type AccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type SpaceUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<SpaceCreateWithoutCreatedByInput, SpaceUncheckedCreateWithoutCreatedByInput> | SpaceCreateWithoutCreatedByInput[] | SpaceUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: SpaceCreateOrConnectWithoutCreatedByInput | SpaceCreateOrConnectWithoutCreatedByInput[]
    createMany?: SpaceCreateManyCreatedByInputEnvelope
    connect?: SpaceWhereUniqueInput | SpaceWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type AccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type SpaceUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<SpaceCreateWithoutCreatedByInput, SpaceUncheckedCreateWithoutCreatedByInput> | SpaceCreateWithoutCreatedByInput[] | SpaceUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: SpaceCreateOrConnectWithoutCreatedByInput | SpaceCreateOrConnectWithoutCreatedByInput[]
    upsert?: SpaceUpsertWithWhereUniqueWithoutCreatedByInput | SpaceUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: SpaceCreateManyCreatedByInputEnvelope
    set?: SpaceWhereUniqueInput | SpaceWhereUniqueInput[]
    disconnect?: SpaceWhereUniqueInput | SpaceWhereUniqueInput[]
    delete?: SpaceWhereUniqueInput | SpaceWhereUniqueInput[]
    connect?: SpaceWhereUniqueInput | SpaceWhereUniqueInput[]
    update?: SpaceUpdateWithWhereUniqueWithoutCreatedByInput | SpaceUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: SpaceUpdateManyWithWhereWithoutCreatedByInput | SpaceUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: SpaceScalarWhereInput | SpaceScalarWhereInput[]
  }

  export type AccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type SpaceUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<SpaceCreateWithoutCreatedByInput, SpaceUncheckedCreateWithoutCreatedByInput> | SpaceCreateWithoutCreatedByInput[] | SpaceUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: SpaceCreateOrConnectWithoutCreatedByInput | SpaceCreateOrConnectWithoutCreatedByInput[]
    upsert?: SpaceUpsertWithWhereUniqueWithoutCreatedByInput | SpaceUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: SpaceCreateManyCreatedByInputEnvelope
    set?: SpaceWhereUniqueInput | SpaceWhereUniqueInput[]
    disconnect?: SpaceWhereUniqueInput | SpaceWhereUniqueInput[]
    delete?: SpaceWhereUniqueInput | SpaceWhereUniqueInput[]
    connect?: SpaceWhereUniqueInput | SpaceWhereUniqueInput[]
    update?: SpaceUpdateWithWhereUniqueWithoutCreatedByInput | SpaceUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: SpaceUpdateManyWithWhereWithoutCreatedByInput | SpaceUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: SpaceScalarWhereInput | SpaceScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAccountsInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    upsert?: UserUpsertWithoutAccountsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountsInput, UserUpdateWithoutAccountsInput>, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type QuestionCreateNestedManyWithoutSpaceInput = {
    create?: XOR<QuestionCreateWithoutSpaceInput, QuestionUncheckedCreateWithoutSpaceInput> | QuestionCreateWithoutSpaceInput[] | QuestionUncheckedCreateWithoutSpaceInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutSpaceInput | QuestionCreateOrConnectWithoutSpaceInput[]
    createMany?: QuestionCreateManySpaceInputEnvelope
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutSpacesInput = {
    create?: XOR<UserCreateWithoutSpacesInput, UserUncheckedCreateWithoutSpacesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSpacesInput
    connect?: UserWhereUniqueInput
  }

  export type ThankYouSpaceCreateNestedOneWithoutSpaceInput = {
    create?: XOR<ThankYouSpaceCreateWithoutSpaceInput, ThankYouSpaceUncheckedCreateWithoutSpaceInput>
    connectOrCreate?: ThankYouSpaceCreateOrConnectWithoutSpaceInput
    connect?: ThankYouSpaceWhereUniqueInput
  }

  export type FeedbackCreateNestedManyWithoutSpaceInput = {
    create?: XOR<FeedbackCreateWithoutSpaceInput, FeedbackUncheckedCreateWithoutSpaceInput> | FeedbackCreateWithoutSpaceInput[] | FeedbackUncheckedCreateWithoutSpaceInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutSpaceInput | FeedbackCreateOrConnectWithoutSpaceInput[]
    createMany?: FeedbackCreateManySpaceInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type DailyMetricsCreateNestedManyWithoutSpaceInput = {
    create?: XOR<DailyMetricsCreateWithoutSpaceInput, DailyMetricsUncheckedCreateWithoutSpaceInput> | DailyMetricsCreateWithoutSpaceInput[] | DailyMetricsUncheckedCreateWithoutSpaceInput[]
    connectOrCreate?: DailyMetricsCreateOrConnectWithoutSpaceInput | DailyMetricsCreateOrConnectWithoutSpaceInput[]
    createMany?: DailyMetricsCreateManySpaceInputEnvelope
    connect?: DailyMetricsWhereUniqueInput | DailyMetricsWhereUniqueInput[]
  }

  export type RequestTestimonialMetricsCreateNestedManyWithoutSpaceInput = {
    create?: XOR<RequestTestimonialMetricsCreateWithoutSpaceInput, RequestTestimonialMetricsUncheckedCreateWithoutSpaceInput> | RequestTestimonialMetricsCreateWithoutSpaceInput[] | RequestTestimonialMetricsUncheckedCreateWithoutSpaceInput[]
    connectOrCreate?: RequestTestimonialMetricsCreateOrConnectWithoutSpaceInput | RequestTestimonialMetricsCreateOrConnectWithoutSpaceInput[]
    createMany?: RequestTestimonialMetricsCreateManySpaceInputEnvelope
    connect?: RequestTestimonialMetricsWhereUniqueInput | RequestTestimonialMetricsWhereUniqueInput[]
  }

  export type WallOfLoveMetricsCreateNestedManyWithoutSpaceInput = {
    create?: XOR<WallOfLoveMetricsCreateWithoutSpaceInput, WallOfLoveMetricsUncheckedCreateWithoutSpaceInput> | WallOfLoveMetricsCreateWithoutSpaceInput[] | WallOfLoveMetricsUncheckedCreateWithoutSpaceInput[]
    connectOrCreate?: WallOfLoveMetricsCreateOrConnectWithoutSpaceInput | WallOfLoveMetricsCreateOrConnectWithoutSpaceInput[]
    createMany?: WallOfLoveMetricsCreateManySpaceInputEnvelope
    connect?: WallOfLoveMetricsWhereUniqueInput | WallOfLoveMetricsWhereUniqueInput[]
  }

  export type QuestionUncheckedCreateNestedManyWithoutSpaceInput = {
    create?: XOR<QuestionCreateWithoutSpaceInput, QuestionUncheckedCreateWithoutSpaceInput> | QuestionCreateWithoutSpaceInput[] | QuestionUncheckedCreateWithoutSpaceInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutSpaceInput | QuestionCreateOrConnectWithoutSpaceInput[]
    createMany?: QuestionCreateManySpaceInputEnvelope
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
  }

  export type ThankYouSpaceUncheckedCreateNestedOneWithoutSpaceInput = {
    create?: XOR<ThankYouSpaceCreateWithoutSpaceInput, ThankYouSpaceUncheckedCreateWithoutSpaceInput>
    connectOrCreate?: ThankYouSpaceCreateOrConnectWithoutSpaceInput
    connect?: ThankYouSpaceWhereUniqueInput
  }

  export type FeedbackUncheckedCreateNestedManyWithoutSpaceInput = {
    create?: XOR<FeedbackCreateWithoutSpaceInput, FeedbackUncheckedCreateWithoutSpaceInput> | FeedbackCreateWithoutSpaceInput[] | FeedbackUncheckedCreateWithoutSpaceInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutSpaceInput | FeedbackCreateOrConnectWithoutSpaceInput[]
    createMany?: FeedbackCreateManySpaceInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type DailyMetricsUncheckedCreateNestedManyWithoutSpaceInput = {
    create?: XOR<DailyMetricsCreateWithoutSpaceInput, DailyMetricsUncheckedCreateWithoutSpaceInput> | DailyMetricsCreateWithoutSpaceInput[] | DailyMetricsUncheckedCreateWithoutSpaceInput[]
    connectOrCreate?: DailyMetricsCreateOrConnectWithoutSpaceInput | DailyMetricsCreateOrConnectWithoutSpaceInput[]
    createMany?: DailyMetricsCreateManySpaceInputEnvelope
    connect?: DailyMetricsWhereUniqueInput | DailyMetricsWhereUniqueInput[]
  }

  export type RequestTestimonialMetricsUncheckedCreateNestedManyWithoutSpaceInput = {
    create?: XOR<RequestTestimonialMetricsCreateWithoutSpaceInput, RequestTestimonialMetricsUncheckedCreateWithoutSpaceInput> | RequestTestimonialMetricsCreateWithoutSpaceInput[] | RequestTestimonialMetricsUncheckedCreateWithoutSpaceInput[]
    connectOrCreate?: RequestTestimonialMetricsCreateOrConnectWithoutSpaceInput | RequestTestimonialMetricsCreateOrConnectWithoutSpaceInput[]
    createMany?: RequestTestimonialMetricsCreateManySpaceInputEnvelope
    connect?: RequestTestimonialMetricsWhereUniqueInput | RequestTestimonialMetricsWhereUniqueInput[]
  }

  export type WallOfLoveMetricsUncheckedCreateNestedManyWithoutSpaceInput = {
    create?: XOR<WallOfLoveMetricsCreateWithoutSpaceInput, WallOfLoveMetricsUncheckedCreateWithoutSpaceInput> | WallOfLoveMetricsCreateWithoutSpaceInput[] | WallOfLoveMetricsUncheckedCreateWithoutSpaceInput[]
    connectOrCreate?: WallOfLoveMetricsCreateOrConnectWithoutSpaceInput | WallOfLoveMetricsCreateOrConnectWithoutSpaceInput[]
    createMany?: WallOfLoveMetricsCreateManySpaceInputEnvelope
    connect?: WallOfLoveMetricsWhereUniqueInput | WallOfLoveMetricsWhereUniqueInput[]
  }

  export type EnumCollectionTypeFieldUpdateOperationsInput = {
    set?: $Enums.CollectionType
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type QuestionUpdateManyWithoutSpaceNestedInput = {
    create?: XOR<QuestionCreateWithoutSpaceInput, QuestionUncheckedCreateWithoutSpaceInput> | QuestionCreateWithoutSpaceInput[] | QuestionUncheckedCreateWithoutSpaceInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutSpaceInput | QuestionCreateOrConnectWithoutSpaceInput[]
    upsert?: QuestionUpsertWithWhereUniqueWithoutSpaceInput | QuestionUpsertWithWhereUniqueWithoutSpaceInput[]
    createMany?: QuestionCreateManySpaceInputEnvelope
    set?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    disconnect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    delete?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    update?: QuestionUpdateWithWhereUniqueWithoutSpaceInput | QuestionUpdateWithWhereUniqueWithoutSpaceInput[]
    updateMany?: QuestionUpdateManyWithWhereWithoutSpaceInput | QuestionUpdateManyWithWhereWithoutSpaceInput[]
    deleteMany?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutSpacesNestedInput = {
    create?: XOR<UserCreateWithoutSpacesInput, UserUncheckedCreateWithoutSpacesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSpacesInput
    upsert?: UserUpsertWithoutSpacesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSpacesInput, UserUpdateWithoutSpacesInput>, UserUncheckedUpdateWithoutSpacesInput>
  }

  export type ThankYouSpaceUpdateOneWithoutSpaceNestedInput = {
    create?: XOR<ThankYouSpaceCreateWithoutSpaceInput, ThankYouSpaceUncheckedCreateWithoutSpaceInput>
    connectOrCreate?: ThankYouSpaceCreateOrConnectWithoutSpaceInput
    upsert?: ThankYouSpaceUpsertWithoutSpaceInput
    disconnect?: ThankYouSpaceWhereInput | boolean
    delete?: ThankYouSpaceWhereInput | boolean
    connect?: ThankYouSpaceWhereUniqueInput
    update?: XOR<XOR<ThankYouSpaceUpdateToOneWithWhereWithoutSpaceInput, ThankYouSpaceUpdateWithoutSpaceInput>, ThankYouSpaceUncheckedUpdateWithoutSpaceInput>
  }

  export type FeedbackUpdateManyWithoutSpaceNestedInput = {
    create?: XOR<FeedbackCreateWithoutSpaceInput, FeedbackUncheckedCreateWithoutSpaceInput> | FeedbackCreateWithoutSpaceInput[] | FeedbackUncheckedCreateWithoutSpaceInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutSpaceInput | FeedbackCreateOrConnectWithoutSpaceInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutSpaceInput | FeedbackUpsertWithWhereUniqueWithoutSpaceInput[]
    createMany?: FeedbackCreateManySpaceInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutSpaceInput | FeedbackUpdateWithWhereUniqueWithoutSpaceInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutSpaceInput | FeedbackUpdateManyWithWhereWithoutSpaceInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type DailyMetricsUpdateManyWithoutSpaceNestedInput = {
    create?: XOR<DailyMetricsCreateWithoutSpaceInput, DailyMetricsUncheckedCreateWithoutSpaceInput> | DailyMetricsCreateWithoutSpaceInput[] | DailyMetricsUncheckedCreateWithoutSpaceInput[]
    connectOrCreate?: DailyMetricsCreateOrConnectWithoutSpaceInput | DailyMetricsCreateOrConnectWithoutSpaceInput[]
    upsert?: DailyMetricsUpsertWithWhereUniqueWithoutSpaceInput | DailyMetricsUpsertWithWhereUniqueWithoutSpaceInput[]
    createMany?: DailyMetricsCreateManySpaceInputEnvelope
    set?: DailyMetricsWhereUniqueInput | DailyMetricsWhereUniqueInput[]
    disconnect?: DailyMetricsWhereUniqueInput | DailyMetricsWhereUniqueInput[]
    delete?: DailyMetricsWhereUniqueInput | DailyMetricsWhereUniqueInput[]
    connect?: DailyMetricsWhereUniqueInput | DailyMetricsWhereUniqueInput[]
    update?: DailyMetricsUpdateWithWhereUniqueWithoutSpaceInput | DailyMetricsUpdateWithWhereUniqueWithoutSpaceInput[]
    updateMany?: DailyMetricsUpdateManyWithWhereWithoutSpaceInput | DailyMetricsUpdateManyWithWhereWithoutSpaceInput[]
    deleteMany?: DailyMetricsScalarWhereInput | DailyMetricsScalarWhereInput[]
  }

  export type RequestTestimonialMetricsUpdateManyWithoutSpaceNestedInput = {
    create?: XOR<RequestTestimonialMetricsCreateWithoutSpaceInput, RequestTestimonialMetricsUncheckedCreateWithoutSpaceInput> | RequestTestimonialMetricsCreateWithoutSpaceInput[] | RequestTestimonialMetricsUncheckedCreateWithoutSpaceInput[]
    connectOrCreate?: RequestTestimonialMetricsCreateOrConnectWithoutSpaceInput | RequestTestimonialMetricsCreateOrConnectWithoutSpaceInput[]
    upsert?: RequestTestimonialMetricsUpsertWithWhereUniqueWithoutSpaceInput | RequestTestimonialMetricsUpsertWithWhereUniqueWithoutSpaceInput[]
    createMany?: RequestTestimonialMetricsCreateManySpaceInputEnvelope
    set?: RequestTestimonialMetricsWhereUniqueInput | RequestTestimonialMetricsWhereUniqueInput[]
    disconnect?: RequestTestimonialMetricsWhereUniqueInput | RequestTestimonialMetricsWhereUniqueInput[]
    delete?: RequestTestimonialMetricsWhereUniqueInput | RequestTestimonialMetricsWhereUniqueInput[]
    connect?: RequestTestimonialMetricsWhereUniqueInput | RequestTestimonialMetricsWhereUniqueInput[]
    update?: RequestTestimonialMetricsUpdateWithWhereUniqueWithoutSpaceInput | RequestTestimonialMetricsUpdateWithWhereUniqueWithoutSpaceInput[]
    updateMany?: RequestTestimonialMetricsUpdateManyWithWhereWithoutSpaceInput | RequestTestimonialMetricsUpdateManyWithWhereWithoutSpaceInput[]
    deleteMany?: RequestTestimonialMetricsScalarWhereInput | RequestTestimonialMetricsScalarWhereInput[]
  }

  export type WallOfLoveMetricsUpdateManyWithoutSpaceNestedInput = {
    create?: XOR<WallOfLoveMetricsCreateWithoutSpaceInput, WallOfLoveMetricsUncheckedCreateWithoutSpaceInput> | WallOfLoveMetricsCreateWithoutSpaceInput[] | WallOfLoveMetricsUncheckedCreateWithoutSpaceInput[]
    connectOrCreate?: WallOfLoveMetricsCreateOrConnectWithoutSpaceInput | WallOfLoveMetricsCreateOrConnectWithoutSpaceInput[]
    upsert?: WallOfLoveMetricsUpsertWithWhereUniqueWithoutSpaceInput | WallOfLoveMetricsUpsertWithWhereUniqueWithoutSpaceInput[]
    createMany?: WallOfLoveMetricsCreateManySpaceInputEnvelope
    set?: WallOfLoveMetricsWhereUniqueInput | WallOfLoveMetricsWhereUniqueInput[]
    disconnect?: WallOfLoveMetricsWhereUniqueInput | WallOfLoveMetricsWhereUniqueInput[]
    delete?: WallOfLoveMetricsWhereUniqueInput | WallOfLoveMetricsWhereUniqueInput[]
    connect?: WallOfLoveMetricsWhereUniqueInput | WallOfLoveMetricsWhereUniqueInput[]
    update?: WallOfLoveMetricsUpdateWithWhereUniqueWithoutSpaceInput | WallOfLoveMetricsUpdateWithWhereUniqueWithoutSpaceInput[]
    updateMany?: WallOfLoveMetricsUpdateManyWithWhereWithoutSpaceInput | WallOfLoveMetricsUpdateManyWithWhereWithoutSpaceInput[]
    deleteMany?: WallOfLoveMetricsScalarWhereInput | WallOfLoveMetricsScalarWhereInput[]
  }

  export type QuestionUncheckedUpdateManyWithoutSpaceNestedInput = {
    create?: XOR<QuestionCreateWithoutSpaceInput, QuestionUncheckedCreateWithoutSpaceInput> | QuestionCreateWithoutSpaceInput[] | QuestionUncheckedCreateWithoutSpaceInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutSpaceInput | QuestionCreateOrConnectWithoutSpaceInput[]
    upsert?: QuestionUpsertWithWhereUniqueWithoutSpaceInput | QuestionUpsertWithWhereUniqueWithoutSpaceInput[]
    createMany?: QuestionCreateManySpaceInputEnvelope
    set?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    disconnect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    delete?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    update?: QuestionUpdateWithWhereUniqueWithoutSpaceInput | QuestionUpdateWithWhereUniqueWithoutSpaceInput[]
    updateMany?: QuestionUpdateManyWithWhereWithoutSpaceInput | QuestionUpdateManyWithWhereWithoutSpaceInput[]
    deleteMany?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
  }

  export type ThankYouSpaceUncheckedUpdateOneWithoutSpaceNestedInput = {
    create?: XOR<ThankYouSpaceCreateWithoutSpaceInput, ThankYouSpaceUncheckedCreateWithoutSpaceInput>
    connectOrCreate?: ThankYouSpaceCreateOrConnectWithoutSpaceInput
    upsert?: ThankYouSpaceUpsertWithoutSpaceInput
    disconnect?: ThankYouSpaceWhereInput | boolean
    delete?: ThankYouSpaceWhereInput | boolean
    connect?: ThankYouSpaceWhereUniqueInput
    update?: XOR<XOR<ThankYouSpaceUpdateToOneWithWhereWithoutSpaceInput, ThankYouSpaceUpdateWithoutSpaceInput>, ThankYouSpaceUncheckedUpdateWithoutSpaceInput>
  }

  export type FeedbackUncheckedUpdateManyWithoutSpaceNestedInput = {
    create?: XOR<FeedbackCreateWithoutSpaceInput, FeedbackUncheckedCreateWithoutSpaceInput> | FeedbackCreateWithoutSpaceInput[] | FeedbackUncheckedCreateWithoutSpaceInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutSpaceInput | FeedbackCreateOrConnectWithoutSpaceInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutSpaceInput | FeedbackUpsertWithWhereUniqueWithoutSpaceInput[]
    createMany?: FeedbackCreateManySpaceInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutSpaceInput | FeedbackUpdateWithWhereUniqueWithoutSpaceInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutSpaceInput | FeedbackUpdateManyWithWhereWithoutSpaceInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type DailyMetricsUncheckedUpdateManyWithoutSpaceNestedInput = {
    create?: XOR<DailyMetricsCreateWithoutSpaceInput, DailyMetricsUncheckedCreateWithoutSpaceInput> | DailyMetricsCreateWithoutSpaceInput[] | DailyMetricsUncheckedCreateWithoutSpaceInput[]
    connectOrCreate?: DailyMetricsCreateOrConnectWithoutSpaceInput | DailyMetricsCreateOrConnectWithoutSpaceInput[]
    upsert?: DailyMetricsUpsertWithWhereUniqueWithoutSpaceInput | DailyMetricsUpsertWithWhereUniqueWithoutSpaceInput[]
    createMany?: DailyMetricsCreateManySpaceInputEnvelope
    set?: DailyMetricsWhereUniqueInput | DailyMetricsWhereUniqueInput[]
    disconnect?: DailyMetricsWhereUniqueInput | DailyMetricsWhereUniqueInput[]
    delete?: DailyMetricsWhereUniqueInput | DailyMetricsWhereUniqueInput[]
    connect?: DailyMetricsWhereUniqueInput | DailyMetricsWhereUniqueInput[]
    update?: DailyMetricsUpdateWithWhereUniqueWithoutSpaceInput | DailyMetricsUpdateWithWhereUniqueWithoutSpaceInput[]
    updateMany?: DailyMetricsUpdateManyWithWhereWithoutSpaceInput | DailyMetricsUpdateManyWithWhereWithoutSpaceInput[]
    deleteMany?: DailyMetricsScalarWhereInput | DailyMetricsScalarWhereInput[]
  }

  export type RequestTestimonialMetricsUncheckedUpdateManyWithoutSpaceNestedInput = {
    create?: XOR<RequestTestimonialMetricsCreateWithoutSpaceInput, RequestTestimonialMetricsUncheckedCreateWithoutSpaceInput> | RequestTestimonialMetricsCreateWithoutSpaceInput[] | RequestTestimonialMetricsUncheckedCreateWithoutSpaceInput[]
    connectOrCreate?: RequestTestimonialMetricsCreateOrConnectWithoutSpaceInput | RequestTestimonialMetricsCreateOrConnectWithoutSpaceInput[]
    upsert?: RequestTestimonialMetricsUpsertWithWhereUniqueWithoutSpaceInput | RequestTestimonialMetricsUpsertWithWhereUniqueWithoutSpaceInput[]
    createMany?: RequestTestimonialMetricsCreateManySpaceInputEnvelope
    set?: RequestTestimonialMetricsWhereUniqueInput | RequestTestimonialMetricsWhereUniqueInput[]
    disconnect?: RequestTestimonialMetricsWhereUniqueInput | RequestTestimonialMetricsWhereUniqueInput[]
    delete?: RequestTestimonialMetricsWhereUniqueInput | RequestTestimonialMetricsWhereUniqueInput[]
    connect?: RequestTestimonialMetricsWhereUniqueInput | RequestTestimonialMetricsWhereUniqueInput[]
    update?: RequestTestimonialMetricsUpdateWithWhereUniqueWithoutSpaceInput | RequestTestimonialMetricsUpdateWithWhereUniqueWithoutSpaceInput[]
    updateMany?: RequestTestimonialMetricsUpdateManyWithWhereWithoutSpaceInput | RequestTestimonialMetricsUpdateManyWithWhereWithoutSpaceInput[]
    deleteMany?: RequestTestimonialMetricsScalarWhereInput | RequestTestimonialMetricsScalarWhereInput[]
  }

  export type WallOfLoveMetricsUncheckedUpdateManyWithoutSpaceNestedInput = {
    create?: XOR<WallOfLoveMetricsCreateWithoutSpaceInput, WallOfLoveMetricsUncheckedCreateWithoutSpaceInput> | WallOfLoveMetricsCreateWithoutSpaceInput[] | WallOfLoveMetricsUncheckedCreateWithoutSpaceInput[]
    connectOrCreate?: WallOfLoveMetricsCreateOrConnectWithoutSpaceInput | WallOfLoveMetricsCreateOrConnectWithoutSpaceInput[]
    upsert?: WallOfLoveMetricsUpsertWithWhereUniqueWithoutSpaceInput | WallOfLoveMetricsUpsertWithWhereUniqueWithoutSpaceInput[]
    createMany?: WallOfLoveMetricsCreateManySpaceInputEnvelope
    set?: WallOfLoveMetricsWhereUniqueInput | WallOfLoveMetricsWhereUniqueInput[]
    disconnect?: WallOfLoveMetricsWhereUniqueInput | WallOfLoveMetricsWhereUniqueInput[]
    delete?: WallOfLoveMetricsWhereUniqueInput | WallOfLoveMetricsWhereUniqueInput[]
    connect?: WallOfLoveMetricsWhereUniqueInput | WallOfLoveMetricsWhereUniqueInput[]
    update?: WallOfLoveMetricsUpdateWithWhereUniqueWithoutSpaceInput | WallOfLoveMetricsUpdateWithWhereUniqueWithoutSpaceInput[]
    updateMany?: WallOfLoveMetricsUpdateManyWithWhereWithoutSpaceInput | WallOfLoveMetricsUpdateManyWithWhereWithoutSpaceInput[]
    deleteMany?: WallOfLoveMetricsScalarWhereInput | WallOfLoveMetricsScalarWhereInput[]
  }

  export type SpaceCreateNestedOneWithoutQuestionsInput = {
    create?: XOR<SpaceCreateWithoutQuestionsInput, SpaceUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: SpaceCreateOrConnectWithoutQuestionsInput
    connect?: SpaceWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SpaceUpdateOneRequiredWithoutQuestionsNestedInput = {
    create?: XOR<SpaceCreateWithoutQuestionsInput, SpaceUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: SpaceCreateOrConnectWithoutQuestionsInput
    upsert?: SpaceUpsertWithoutQuestionsInput
    connect?: SpaceWhereUniqueInput
    update?: XOR<XOR<SpaceUpdateToOneWithWhereWithoutQuestionsInput, SpaceUpdateWithoutQuestionsInput>, SpaceUncheckedUpdateWithoutQuestionsInput>
  }

  export type SpaceCreateNestedOneWithoutThankyouSpaceInput = {
    create?: XOR<SpaceCreateWithoutThankyouSpaceInput, SpaceUncheckedCreateWithoutThankyouSpaceInput>
    connectOrCreate?: SpaceCreateOrConnectWithoutThankyouSpaceInput
    connect?: SpaceWhereUniqueInput
  }

  export type SpaceUpdateOneRequiredWithoutThankyouSpaceNestedInput = {
    create?: XOR<SpaceCreateWithoutThankyouSpaceInput, SpaceUncheckedCreateWithoutThankyouSpaceInput>
    connectOrCreate?: SpaceCreateOrConnectWithoutThankyouSpaceInput
    upsert?: SpaceUpsertWithoutThankyouSpaceInput
    connect?: SpaceWhereUniqueInput
    update?: XOR<XOR<SpaceUpdateToOneWithWhereWithoutThankyouSpaceInput, SpaceUpdateWithoutThankyouSpaceInput>, SpaceUncheckedUpdateWithoutThankyouSpaceInput>
  }

  export type SpaceCreateNestedOneWithoutFeedbacksInput = {
    create?: XOR<SpaceCreateWithoutFeedbacksInput, SpaceUncheckedCreateWithoutFeedbacksInput>
    connectOrCreate?: SpaceCreateOrConnectWithoutFeedbacksInput
    connect?: SpaceWhereUniqueInput
  }

  export type EnumFeedbackTypeFieldUpdateOperationsInput = {
    set?: $Enums.FeedbackType
  }

  export type EnumSentimentTypeFieldUpdateOperationsInput = {
    set?: $Enums.SentimentType
  }

  export type EnumAnalysisStatusFieldUpdateOperationsInput = {
    set?: $Enums.AnalysisStatus
  }

  export type SpaceUpdateOneRequiredWithoutFeedbacksNestedInput = {
    create?: XOR<SpaceCreateWithoutFeedbacksInput, SpaceUncheckedCreateWithoutFeedbacksInput>
    connectOrCreate?: SpaceCreateOrConnectWithoutFeedbacksInput
    upsert?: SpaceUpsertWithoutFeedbacksInput
    connect?: SpaceWhereUniqueInput
    update?: XOR<XOR<SpaceUpdateToOneWithWhereWithoutFeedbacksInput, SpaceUpdateWithoutFeedbacksInput>, SpaceUncheckedUpdateWithoutFeedbacksInput>
  }

  export type RequestTestimonialMetricsCreateNestedManyWithoutDateInput = {
    create?: XOR<RequestTestimonialMetricsCreateWithoutDateInput, RequestTestimonialMetricsUncheckedCreateWithoutDateInput> | RequestTestimonialMetricsCreateWithoutDateInput[] | RequestTestimonialMetricsUncheckedCreateWithoutDateInput[]
    connectOrCreate?: RequestTestimonialMetricsCreateOrConnectWithoutDateInput | RequestTestimonialMetricsCreateOrConnectWithoutDateInput[]
    createMany?: RequestTestimonialMetricsCreateManyDateInputEnvelope
    connect?: RequestTestimonialMetricsWhereUniqueInput | RequestTestimonialMetricsWhereUniqueInput[]
  }

  export type WallOfLoveMetricsCreateNestedManyWithoutDateInput = {
    create?: XOR<WallOfLoveMetricsCreateWithoutDateInput, WallOfLoveMetricsUncheckedCreateWithoutDateInput> | WallOfLoveMetricsCreateWithoutDateInput[] | WallOfLoveMetricsUncheckedCreateWithoutDateInput[]
    connectOrCreate?: WallOfLoveMetricsCreateOrConnectWithoutDateInput | WallOfLoveMetricsCreateOrConnectWithoutDateInput[]
    createMany?: WallOfLoveMetricsCreateManyDateInputEnvelope
    connect?: WallOfLoveMetricsWhereUniqueInput | WallOfLoveMetricsWhereUniqueInput[]
  }

  export type RequestTestimonialMetricsUncheckedCreateNestedManyWithoutDateInput = {
    create?: XOR<RequestTestimonialMetricsCreateWithoutDateInput, RequestTestimonialMetricsUncheckedCreateWithoutDateInput> | RequestTestimonialMetricsCreateWithoutDateInput[] | RequestTestimonialMetricsUncheckedCreateWithoutDateInput[]
    connectOrCreate?: RequestTestimonialMetricsCreateOrConnectWithoutDateInput | RequestTestimonialMetricsCreateOrConnectWithoutDateInput[]
    createMany?: RequestTestimonialMetricsCreateManyDateInputEnvelope
    connect?: RequestTestimonialMetricsWhereUniqueInput | RequestTestimonialMetricsWhereUniqueInput[]
  }

  export type WallOfLoveMetricsUncheckedCreateNestedManyWithoutDateInput = {
    create?: XOR<WallOfLoveMetricsCreateWithoutDateInput, WallOfLoveMetricsUncheckedCreateWithoutDateInput> | WallOfLoveMetricsCreateWithoutDateInput[] | WallOfLoveMetricsUncheckedCreateWithoutDateInput[]
    connectOrCreate?: WallOfLoveMetricsCreateOrConnectWithoutDateInput | WallOfLoveMetricsCreateOrConnectWithoutDateInput[]
    createMany?: WallOfLoveMetricsCreateManyDateInputEnvelope
    connect?: WallOfLoveMetricsWhereUniqueInput | WallOfLoveMetricsWhereUniqueInput[]
  }

  export type RequestTestimonialMetricsUpdateManyWithoutDateNestedInput = {
    create?: XOR<RequestTestimonialMetricsCreateWithoutDateInput, RequestTestimonialMetricsUncheckedCreateWithoutDateInput> | RequestTestimonialMetricsCreateWithoutDateInput[] | RequestTestimonialMetricsUncheckedCreateWithoutDateInput[]
    connectOrCreate?: RequestTestimonialMetricsCreateOrConnectWithoutDateInput | RequestTestimonialMetricsCreateOrConnectWithoutDateInput[]
    upsert?: RequestTestimonialMetricsUpsertWithWhereUniqueWithoutDateInput | RequestTestimonialMetricsUpsertWithWhereUniqueWithoutDateInput[]
    createMany?: RequestTestimonialMetricsCreateManyDateInputEnvelope
    set?: RequestTestimonialMetricsWhereUniqueInput | RequestTestimonialMetricsWhereUniqueInput[]
    disconnect?: RequestTestimonialMetricsWhereUniqueInput | RequestTestimonialMetricsWhereUniqueInput[]
    delete?: RequestTestimonialMetricsWhereUniqueInput | RequestTestimonialMetricsWhereUniqueInput[]
    connect?: RequestTestimonialMetricsWhereUniqueInput | RequestTestimonialMetricsWhereUniqueInput[]
    update?: RequestTestimonialMetricsUpdateWithWhereUniqueWithoutDateInput | RequestTestimonialMetricsUpdateWithWhereUniqueWithoutDateInput[]
    updateMany?: RequestTestimonialMetricsUpdateManyWithWhereWithoutDateInput | RequestTestimonialMetricsUpdateManyWithWhereWithoutDateInput[]
    deleteMany?: RequestTestimonialMetricsScalarWhereInput | RequestTestimonialMetricsScalarWhereInput[]
  }

  export type WallOfLoveMetricsUpdateManyWithoutDateNestedInput = {
    create?: XOR<WallOfLoveMetricsCreateWithoutDateInput, WallOfLoveMetricsUncheckedCreateWithoutDateInput> | WallOfLoveMetricsCreateWithoutDateInput[] | WallOfLoveMetricsUncheckedCreateWithoutDateInput[]
    connectOrCreate?: WallOfLoveMetricsCreateOrConnectWithoutDateInput | WallOfLoveMetricsCreateOrConnectWithoutDateInput[]
    upsert?: WallOfLoveMetricsUpsertWithWhereUniqueWithoutDateInput | WallOfLoveMetricsUpsertWithWhereUniqueWithoutDateInput[]
    createMany?: WallOfLoveMetricsCreateManyDateInputEnvelope
    set?: WallOfLoveMetricsWhereUniqueInput | WallOfLoveMetricsWhereUniqueInput[]
    disconnect?: WallOfLoveMetricsWhereUniqueInput | WallOfLoveMetricsWhereUniqueInput[]
    delete?: WallOfLoveMetricsWhereUniqueInput | WallOfLoveMetricsWhereUniqueInput[]
    connect?: WallOfLoveMetricsWhereUniqueInput | WallOfLoveMetricsWhereUniqueInput[]
    update?: WallOfLoveMetricsUpdateWithWhereUniqueWithoutDateInput | WallOfLoveMetricsUpdateWithWhereUniqueWithoutDateInput[]
    updateMany?: WallOfLoveMetricsUpdateManyWithWhereWithoutDateInput | WallOfLoveMetricsUpdateManyWithWhereWithoutDateInput[]
    deleteMany?: WallOfLoveMetricsScalarWhereInput | WallOfLoveMetricsScalarWhereInput[]
  }

  export type RequestTestimonialMetricsUncheckedUpdateManyWithoutDateNestedInput = {
    create?: XOR<RequestTestimonialMetricsCreateWithoutDateInput, RequestTestimonialMetricsUncheckedCreateWithoutDateInput> | RequestTestimonialMetricsCreateWithoutDateInput[] | RequestTestimonialMetricsUncheckedCreateWithoutDateInput[]
    connectOrCreate?: RequestTestimonialMetricsCreateOrConnectWithoutDateInput | RequestTestimonialMetricsCreateOrConnectWithoutDateInput[]
    upsert?: RequestTestimonialMetricsUpsertWithWhereUniqueWithoutDateInput | RequestTestimonialMetricsUpsertWithWhereUniqueWithoutDateInput[]
    createMany?: RequestTestimonialMetricsCreateManyDateInputEnvelope
    set?: RequestTestimonialMetricsWhereUniqueInput | RequestTestimonialMetricsWhereUniqueInput[]
    disconnect?: RequestTestimonialMetricsWhereUniqueInput | RequestTestimonialMetricsWhereUniqueInput[]
    delete?: RequestTestimonialMetricsWhereUniqueInput | RequestTestimonialMetricsWhereUniqueInput[]
    connect?: RequestTestimonialMetricsWhereUniqueInput | RequestTestimonialMetricsWhereUniqueInput[]
    update?: RequestTestimonialMetricsUpdateWithWhereUniqueWithoutDateInput | RequestTestimonialMetricsUpdateWithWhereUniqueWithoutDateInput[]
    updateMany?: RequestTestimonialMetricsUpdateManyWithWhereWithoutDateInput | RequestTestimonialMetricsUpdateManyWithWhereWithoutDateInput[]
    deleteMany?: RequestTestimonialMetricsScalarWhereInput | RequestTestimonialMetricsScalarWhereInput[]
  }

  export type WallOfLoveMetricsUncheckedUpdateManyWithoutDateNestedInput = {
    create?: XOR<WallOfLoveMetricsCreateWithoutDateInput, WallOfLoveMetricsUncheckedCreateWithoutDateInput> | WallOfLoveMetricsCreateWithoutDateInput[] | WallOfLoveMetricsUncheckedCreateWithoutDateInput[]
    connectOrCreate?: WallOfLoveMetricsCreateOrConnectWithoutDateInput | WallOfLoveMetricsCreateOrConnectWithoutDateInput[]
    upsert?: WallOfLoveMetricsUpsertWithWhereUniqueWithoutDateInput | WallOfLoveMetricsUpsertWithWhereUniqueWithoutDateInput[]
    createMany?: WallOfLoveMetricsCreateManyDateInputEnvelope
    set?: WallOfLoveMetricsWhereUniqueInput | WallOfLoveMetricsWhereUniqueInput[]
    disconnect?: WallOfLoveMetricsWhereUniqueInput | WallOfLoveMetricsWhereUniqueInput[]
    delete?: WallOfLoveMetricsWhereUniqueInput | WallOfLoveMetricsWhereUniqueInput[]
    connect?: WallOfLoveMetricsWhereUniqueInput | WallOfLoveMetricsWhereUniqueInput[]
    update?: WallOfLoveMetricsUpdateWithWhereUniqueWithoutDateInput | WallOfLoveMetricsUpdateWithWhereUniqueWithoutDateInput[]
    updateMany?: WallOfLoveMetricsUpdateManyWithWhereWithoutDateInput | WallOfLoveMetricsUpdateManyWithWhereWithoutDateInput[]
    deleteMany?: WallOfLoveMetricsScalarWhereInput | WallOfLoveMetricsScalarWhereInput[]
  }

  export type SpaceCreateNestedOneWithoutRequestTestimonialMetricsInput = {
    create?: XOR<SpaceCreateWithoutRequestTestimonialMetricsInput, SpaceUncheckedCreateWithoutRequestTestimonialMetricsInput>
    connectOrCreate?: SpaceCreateOrConnectWithoutRequestTestimonialMetricsInput
    connect?: SpaceWhereUniqueInput
  }

  export type MetricsDateCreateNestedOneWithoutRequestTestimonialMetricsInput = {
    create?: XOR<MetricsDateCreateWithoutRequestTestimonialMetricsInput, MetricsDateUncheckedCreateWithoutRequestTestimonialMetricsInput>
    connectOrCreate?: MetricsDateCreateOrConnectWithoutRequestTestimonialMetricsInput
    connect?: MetricsDateWhereUniqueInput
  }

  export type SpaceUpdateOneRequiredWithoutRequestTestimonialMetricsNestedInput = {
    create?: XOR<SpaceCreateWithoutRequestTestimonialMetricsInput, SpaceUncheckedCreateWithoutRequestTestimonialMetricsInput>
    connectOrCreate?: SpaceCreateOrConnectWithoutRequestTestimonialMetricsInput
    upsert?: SpaceUpsertWithoutRequestTestimonialMetricsInput
    connect?: SpaceWhereUniqueInput
    update?: XOR<XOR<SpaceUpdateToOneWithWhereWithoutRequestTestimonialMetricsInput, SpaceUpdateWithoutRequestTestimonialMetricsInput>, SpaceUncheckedUpdateWithoutRequestTestimonialMetricsInput>
  }

  export type MetricsDateUpdateOneRequiredWithoutRequestTestimonialMetricsNestedInput = {
    create?: XOR<MetricsDateCreateWithoutRequestTestimonialMetricsInput, MetricsDateUncheckedCreateWithoutRequestTestimonialMetricsInput>
    connectOrCreate?: MetricsDateCreateOrConnectWithoutRequestTestimonialMetricsInput
    upsert?: MetricsDateUpsertWithoutRequestTestimonialMetricsInput
    connect?: MetricsDateWhereUniqueInput
    update?: XOR<XOR<MetricsDateUpdateToOneWithWhereWithoutRequestTestimonialMetricsInput, MetricsDateUpdateWithoutRequestTestimonialMetricsInput>, MetricsDateUncheckedUpdateWithoutRequestTestimonialMetricsInput>
  }

  export type SpaceCreateNestedOneWithoutWallOfLoveMetricsInput = {
    create?: XOR<SpaceCreateWithoutWallOfLoveMetricsInput, SpaceUncheckedCreateWithoutWallOfLoveMetricsInput>
    connectOrCreate?: SpaceCreateOrConnectWithoutWallOfLoveMetricsInput
    connect?: SpaceWhereUniqueInput
  }

  export type MetricsDateCreateNestedOneWithoutWallOfLoveMetricsInput = {
    create?: XOR<MetricsDateCreateWithoutWallOfLoveMetricsInput, MetricsDateUncheckedCreateWithoutWallOfLoveMetricsInput>
    connectOrCreate?: MetricsDateCreateOrConnectWithoutWallOfLoveMetricsInput
    connect?: MetricsDateWhereUniqueInput
  }

  export type SpaceUpdateOneRequiredWithoutWallOfLoveMetricsNestedInput = {
    create?: XOR<SpaceCreateWithoutWallOfLoveMetricsInput, SpaceUncheckedCreateWithoutWallOfLoveMetricsInput>
    connectOrCreate?: SpaceCreateOrConnectWithoutWallOfLoveMetricsInput
    upsert?: SpaceUpsertWithoutWallOfLoveMetricsInput
    connect?: SpaceWhereUniqueInput
    update?: XOR<XOR<SpaceUpdateToOneWithWhereWithoutWallOfLoveMetricsInput, SpaceUpdateWithoutWallOfLoveMetricsInput>, SpaceUncheckedUpdateWithoutWallOfLoveMetricsInput>
  }

  export type MetricsDateUpdateOneRequiredWithoutWallOfLoveMetricsNestedInput = {
    create?: XOR<MetricsDateCreateWithoutWallOfLoveMetricsInput, MetricsDateUncheckedCreateWithoutWallOfLoveMetricsInput>
    connectOrCreate?: MetricsDateCreateOrConnectWithoutWallOfLoveMetricsInput
    upsert?: MetricsDateUpsertWithoutWallOfLoveMetricsInput
    connect?: MetricsDateWhereUniqueInput
    update?: XOR<XOR<MetricsDateUpdateToOneWithWhereWithoutWallOfLoveMetricsInput, MetricsDateUpdateWithoutWallOfLoveMetricsInput>, MetricsDateUncheckedUpdateWithoutWallOfLoveMetricsInput>
  }

  export type SpaceCreateNestedOneWithoutDailyMetricsInput = {
    create?: XOR<SpaceCreateWithoutDailyMetricsInput, SpaceUncheckedCreateWithoutDailyMetricsInput>
    connectOrCreate?: SpaceCreateOrConnectWithoutDailyMetricsInput
    connect?: SpaceWhereUniqueInput
  }

  export type SpaceUpdateOneRequiredWithoutDailyMetricsNestedInput = {
    create?: XOR<SpaceCreateWithoutDailyMetricsInput, SpaceUncheckedCreateWithoutDailyMetricsInput>
    connectOrCreate?: SpaceCreateOrConnectWithoutDailyMetricsInput
    upsert?: SpaceUpsertWithoutDailyMetricsInput
    connect?: SpaceWhereUniqueInput
    update?: XOR<XOR<SpaceUpdateToOneWithWhereWithoutDailyMetricsInput, SpaceUpdateWithoutDailyMetricsInput>, SpaceUncheckedUpdateWithoutDailyMetricsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumCollectionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CollectionType | EnumCollectionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CollectionType[] | ListEnumCollectionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CollectionType[] | ListEnumCollectionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCollectionTypeFilter<$PrismaModel> | $Enums.CollectionType
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumCollectionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CollectionType | EnumCollectionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CollectionType[] | ListEnumCollectionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CollectionType[] | ListEnumCollectionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCollectionTypeWithAggregatesFilter<$PrismaModel> | $Enums.CollectionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCollectionTypeFilter<$PrismaModel>
    _max?: NestedEnumCollectionTypeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumFeedbackTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.FeedbackType | EnumFeedbackTypeFieldRefInput<$PrismaModel>
    in?: $Enums.FeedbackType[] | ListEnumFeedbackTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.FeedbackType[] | ListEnumFeedbackTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumFeedbackTypeFilter<$PrismaModel> | $Enums.FeedbackType
  }

  export type NestedEnumSentimentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.SentimentType | EnumSentimentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SentimentType[] | ListEnumSentimentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SentimentType[] | ListEnumSentimentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSentimentTypeFilter<$PrismaModel> | $Enums.SentimentType
  }

  export type NestedEnumAnalysisStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AnalysisStatus | EnumAnalysisStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AnalysisStatus[] | ListEnumAnalysisStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AnalysisStatus[] | ListEnumAnalysisStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAnalysisStatusFilter<$PrismaModel> | $Enums.AnalysisStatus
  }

  export type NestedEnumFeedbackTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FeedbackType | EnumFeedbackTypeFieldRefInput<$PrismaModel>
    in?: $Enums.FeedbackType[] | ListEnumFeedbackTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.FeedbackType[] | ListEnumFeedbackTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumFeedbackTypeWithAggregatesFilter<$PrismaModel> | $Enums.FeedbackType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFeedbackTypeFilter<$PrismaModel>
    _max?: NestedEnumFeedbackTypeFilter<$PrismaModel>
  }

  export type NestedEnumSentimentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SentimentType | EnumSentimentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SentimentType[] | ListEnumSentimentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SentimentType[] | ListEnumSentimentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSentimentTypeWithAggregatesFilter<$PrismaModel> | $Enums.SentimentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSentimentTypeFilter<$PrismaModel>
    _max?: NestedEnumSentimentTypeFilter<$PrismaModel>
  }

  export type NestedEnumAnalysisStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AnalysisStatus | EnumAnalysisStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AnalysisStatus[] | ListEnumAnalysisStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AnalysisStatus[] | ListEnumAnalysisStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAnalysisStatusWithAggregatesFilter<$PrismaModel> | $Enums.AnalysisStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAnalysisStatusFilter<$PrismaModel>
    _max?: NestedEnumAnalysisStatusFilter<$PrismaModel>
  }

  export type AccountCreateWithoutUserInput = {
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountUncheckedCreateWithoutUserInput = {
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountCreateManyUserInputEnvelope = {
    data: AccountCreateManyUserInput | AccountCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SpaceCreateWithoutCreatedByInput = {
    id?: string
    name: string
    logo?: string | null
    headerTitle: string
    headerSubtitle: string
    collectionType: $Enums.CollectionType
    collectStar: boolean
    isAnalysisEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isPublished?: boolean
    questions?: QuestionCreateNestedManyWithoutSpaceInput
    thankyouSpace?: ThankYouSpaceCreateNestedOneWithoutSpaceInput
    feedbacks?: FeedbackCreateNestedManyWithoutSpaceInput
    DailyMetrics?: DailyMetricsCreateNestedManyWithoutSpaceInput
    RequestTestimonialMetrics?: RequestTestimonialMetricsCreateNestedManyWithoutSpaceInput
    WallOfLoveMetrics?: WallOfLoveMetricsCreateNestedManyWithoutSpaceInput
  }

  export type SpaceUncheckedCreateWithoutCreatedByInput = {
    id?: string
    name: string
    logo?: string | null
    headerTitle: string
    headerSubtitle: string
    collectionType: $Enums.CollectionType
    collectStar: boolean
    isAnalysisEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isPublished?: boolean
    questions?: QuestionUncheckedCreateNestedManyWithoutSpaceInput
    thankyouSpace?: ThankYouSpaceUncheckedCreateNestedOneWithoutSpaceInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutSpaceInput
    DailyMetrics?: DailyMetricsUncheckedCreateNestedManyWithoutSpaceInput
    RequestTestimonialMetrics?: RequestTestimonialMetricsUncheckedCreateNestedManyWithoutSpaceInput
    WallOfLoveMetrics?: WallOfLoveMetricsUncheckedCreateNestedManyWithoutSpaceInput
  }

  export type SpaceCreateOrConnectWithoutCreatedByInput = {
    where: SpaceWhereUniqueInput
    create: XOR<SpaceCreateWithoutCreatedByInput, SpaceUncheckedCreateWithoutCreatedByInput>
  }

  export type SpaceCreateManyCreatedByInputEnvelope = {
    data: SpaceCreateManyCreatedByInput | SpaceCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type AccountUpsertWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
  }

  export type AccountUpdateManyWithWhereWithoutUserInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutUserInput>
  }

  export type AccountScalarWhereInput = {
    AND?: AccountScalarWhereInput | AccountScalarWhereInput[]
    OR?: AccountScalarWhereInput[]
    NOT?: AccountScalarWhereInput | AccountScalarWhereInput[]
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
  }

  export type SpaceUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: SpaceWhereUniqueInput
    update: XOR<SpaceUpdateWithoutCreatedByInput, SpaceUncheckedUpdateWithoutCreatedByInput>
    create: XOR<SpaceCreateWithoutCreatedByInput, SpaceUncheckedCreateWithoutCreatedByInput>
  }

  export type SpaceUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: SpaceWhereUniqueInput
    data: XOR<SpaceUpdateWithoutCreatedByInput, SpaceUncheckedUpdateWithoutCreatedByInput>
  }

  export type SpaceUpdateManyWithWhereWithoutCreatedByInput = {
    where: SpaceScalarWhereInput
    data: XOR<SpaceUpdateManyMutationInput, SpaceUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type SpaceScalarWhereInput = {
    AND?: SpaceScalarWhereInput | SpaceScalarWhereInput[]
    OR?: SpaceScalarWhereInput[]
    NOT?: SpaceScalarWhereInput | SpaceScalarWhereInput[]
    id?: StringFilter<"Space"> | string
    name?: StringFilter<"Space"> | string
    logo?: StringNullableFilter<"Space"> | string | null
    headerTitle?: StringFilter<"Space"> | string
    headerSubtitle?: StringFilter<"Space"> | string
    collectionType?: EnumCollectionTypeFilter<"Space"> | $Enums.CollectionType
    collectStar?: BoolFilter<"Space"> | boolean
    isAnalysisEnabled?: BoolFilter<"Space"> | boolean
    createdAt?: DateTimeFilter<"Space"> | Date | string
    updatedAt?: DateTimeFilter<"Space"> | Date | string
    createdById?: StringFilter<"Space"> | string
    isPublished?: BoolFilter<"Space"> | boolean
  }

  export type UserCreateWithoutAccountsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    spaces?: SpaceCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutAccountsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    spaces?: SpaceUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
  }

  export type UserUpsertWithoutAccountsInput = {
    update: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccountsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spaces?: SpaceUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spaces?: SpaceUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type QuestionCreateWithoutSpaceInput = {
    id?: string
    title: string
    order: number
  }

  export type QuestionUncheckedCreateWithoutSpaceInput = {
    id?: string
    title: string
    order: number
  }

  export type QuestionCreateOrConnectWithoutSpaceInput = {
    where: QuestionWhereUniqueInput
    create: XOR<QuestionCreateWithoutSpaceInput, QuestionUncheckedCreateWithoutSpaceInput>
  }

  export type QuestionCreateManySpaceInputEnvelope = {
    data: QuestionCreateManySpaceInput | QuestionCreateManySpaceInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutSpacesInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSpacesInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSpacesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSpacesInput, UserUncheckedCreateWithoutSpacesInput>
  }

  export type ThankYouSpaceCreateWithoutSpaceInput = {
    id?: string
    title: string
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ThankYouSpaceUncheckedCreateWithoutSpaceInput = {
    id?: string
    title: string
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ThankYouSpaceCreateOrConnectWithoutSpaceInput = {
    where: ThankYouSpaceWhereUniqueInput
    create: XOR<ThankYouSpaceCreateWithoutSpaceInput, ThankYouSpaceUncheckedCreateWithoutSpaceInput>
  }

  export type FeedbackCreateWithoutSpaceInput = {
    id?: string
    answer?: string | null
    name: string
    email: string
    rating: number
    permission: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    feedbackType: $Enums.FeedbackType
    addToWallOfLove?: boolean
    videoUrl?: string | null
    imageUrl?: string | null
    isSpam?: boolean
    sentiment?: $Enums.SentimentType
    analysisStatus?: $Enums.AnalysisStatus
  }

  export type FeedbackUncheckedCreateWithoutSpaceInput = {
    id?: string
    answer?: string | null
    name: string
    email: string
    rating: number
    permission: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    feedbackType: $Enums.FeedbackType
    addToWallOfLove?: boolean
    videoUrl?: string | null
    imageUrl?: string | null
    isSpam?: boolean
    sentiment?: $Enums.SentimentType
    analysisStatus?: $Enums.AnalysisStatus
  }

  export type FeedbackCreateOrConnectWithoutSpaceInput = {
    where: FeedbackWhereUniqueInput
    create: XOR<FeedbackCreateWithoutSpaceInput, FeedbackUncheckedCreateWithoutSpaceInput>
  }

  export type FeedbackCreateManySpaceInputEnvelope = {
    data: FeedbackCreateManySpaceInput | FeedbackCreateManySpaceInput[]
    skipDuplicates?: boolean
  }

  export type DailyMetricsCreateWithoutSpaceInput = {
    id?: string
    date: Date | string
    pageViews?: number
    visitors?: number
    completedActions?: number
    timeSpentOnWallOfLove?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DailyMetricsUncheckedCreateWithoutSpaceInput = {
    id?: string
    date: Date | string
    pageViews?: number
    visitors?: number
    completedActions?: number
    timeSpentOnWallOfLove?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DailyMetricsCreateOrConnectWithoutSpaceInput = {
    where: DailyMetricsWhereUniqueInput
    create: XOR<DailyMetricsCreateWithoutSpaceInput, DailyMetricsUncheckedCreateWithoutSpaceInput>
  }

  export type DailyMetricsCreateManySpaceInputEnvelope = {
    data: DailyMetricsCreateManySpaceInput | DailyMetricsCreateManySpaceInput[]
    skipDuplicates?: boolean
  }

  export type RequestTestimonialMetricsCreateWithoutSpaceInput = {
    id?: string
    pageViews?: number
    visitors?: number
    completedActions?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    date: MetricsDateCreateNestedOneWithoutRequestTestimonialMetricsInput
  }

  export type RequestTestimonialMetricsUncheckedCreateWithoutSpaceInput = {
    id?: string
    dateId: string
    pageViews?: number
    visitors?: number
    completedActions?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RequestTestimonialMetricsCreateOrConnectWithoutSpaceInput = {
    where: RequestTestimonialMetricsWhereUniqueInput
    create: XOR<RequestTestimonialMetricsCreateWithoutSpaceInput, RequestTestimonialMetricsUncheckedCreateWithoutSpaceInput>
  }

  export type RequestTestimonialMetricsCreateManySpaceInputEnvelope = {
    data: RequestTestimonialMetricsCreateManySpaceInput | RequestTestimonialMetricsCreateManySpaceInput[]
    skipDuplicates?: boolean
  }

  export type WallOfLoveMetricsCreateWithoutSpaceInput = {
    id?: string
    pageViews?: number
    visitors?: number
    timeSpentOnWallOfLove?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    date: MetricsDateCreateNestedOneWithoutWallOfLoveMetricsInput
  }

  export type WallOfLoveMetricsUncheckedCreateWithoutSpaceInput = {
    id?: string
    dateId: string
    pageViews?: number
    visitors?: number
    timeSpentOnWallOfLove?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WallOfLoveMetricsCreateOrConnectWithoutSpaceInput = {
    where: WallOfLoveMetricsWhereUniqueInput
    create: XOR<WallOfLoveMetricsCreateWithoutSpaceInput, WallOfLoveMetricsUncheckedCreateWithoutSpaceInput>
  }

  export type WallOfLoveMetricsCreateManySpaceInputEnvelope = {
    data: WallOfLoveMetricsCreateManySpaceInput | WallOfLoveMetricsCreateManySpaceInput[]
    skipDuplicates?: boolean
  }

  export type QuestionUpsertWithWhereUniqueWithoutSpaceInput = {
    where: QuestionWhereUniqueInput
    update: XOR<QuestionUpdateWithoutSpaceInput, QuestionUncheckedUpdateWithoutSpaceInput>
    create: XOR<QuestionCreateWithoutSpaceInput, QuestionUncheckedCreateWithoutSpaceInput>
  }

  export type QuestionUpdateWithWhereUniqueWithoutSpaceInput = {
    where: QuestionWhereUniqueInput
    data: XOR<QuestionUpdateWithoutSpaceInput, QuestionUncheckedUpdateWithoutSpaceInput>
  }

  export type QuestionUpdateManyWithWhereWithoutSpaceInput = {
    where: QuestionScalarWhereInput
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyWithoutSpaceInput>
  }

  export type QuestionScalarWhereInput = {
    AND?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
    OR?: QuestionScalarWhereInput[]
    NOT?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
    id?: StringFilter<"Question"> | string
    spaceId?: StringFilter<"Question"> | string
    title?: StringFilter<"Question"> | string
    order?: IntFilter<"Question"> | number
  }

  export type UserUpsertWithoutSpacesInput = {
    update: XOR<UserUpdateWithoutSpacesInput, UserUncheckedUpdateWithoutSpacesInput>
    create: XOR<UserCreateWithoutSpacesInput, UserUncheckedCreateWithoutSpacesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSpacesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSpacesInput, UserUncheckedUpdateWithoutSpacesInput>
  }

  export type UserUpdateWithoutSpacesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSpacesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ThankYouSpaceUpsertWithoutSpaceInput = {
    update: XOR<ThankYouSpaceUpdateWithoutSpaceInput, ThankYouSpaceUncheckedUpdateWithoutSpaceInput>
    create: XOR<ThankYouSpaceCreateWithoutSpaceInput, ThankYouSpaceUncheckedCreateWithoutSpaceInput>
    where?: ThankYouSpaceWhereInput
  }

  export type ThankYouSpaceUpdateToOneWithWhereWithoutSpaceInput = {
    where?: ThankYouSpaceWhereInput
    data: XOR<ThankYouSpaceUpdateWithoutSpaceInput, ThankYouSpaceUncheckedUpdateWithoutSpaceInput>
  }

  export type ThankYouSpaceUpdateWithoutSpaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ThankYouSpaceUncheckedUpdateWithoutSpaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackUpsertWithWhereUniqueWithoutSpaceInput = {
    where: FeedbackWhereUniqueInput
    update: XOR<FeedbackUpdateWithoutSpaceInput, FeedbackUncheckedUpdateWithoutSpaceInput>
    create: XOR<FeedbackCreateWithoutSpaceInput, FeedbackUncheckedCreateWithoutSpaceInput>
  }

  export type FeedbackUpdateWithWhereUniqueWithoutSpaceInput = {
    where: FeedbackWhereUniqueInput
    data: XOR<FeedbackUpdateWithoutSpaceInput, FeedbackUncheckedUpdateWithoutSpaceInput>
  }

  export type FeedbackUpdateManyWithWhereWithoutSpaceInput = {
    where: FeedbackScalarWhereInput
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyWithoutSpaceInput>
  }

  export type FeedbackScalarWhereInput = {
    AND?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
    OR?: FeedbackScalarWhereInput[]
    NOT?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
    id?: StringFilter<"Feedback"> | string
    answer?: StringNullableFilter<"Feedback"> | string | null
    name?: StringFilter<"Feedback"> | string
    email?: StringFilter<"Feedback"> | string
    rating?: IntFilter<"Feedback"> | number
    permission?: BoolFilter<"Feedback"> | boolean
    spaceId?: StringFilter<"Feedback"> | string
    createdAt?: DateTimeFilter<"Feedback"> | Date | string
    updatedAt?: DateTimeFilter<"Feedback"> | Date | string
    feedbackType?: EnumFeedbackTypeFilter<"Feedback"> | $Enums.FeedbackType
    addToWallOfLove?: BoolFilter<"Feedback"> | boolean
    videoUrl?: StringNullableFilter<"Feedback"> | string | null
    imageUrl?: StringNullableFilter<"Feedback"> | string | null
    isSpam?: BoolFilter<"Feedback"> | boolean
    sentiment?: EnumSentimentTypeFilter<"Feedback"> | $Enums.SentimentType
    analysisStatus?: EnumAnalysisStatusFilter<"Feedback"> | $Enums.AnalysisStatus
  }

  export type DailyMetricsUpsertWithWhereUniqueWithoutSpaceInput = {
    where: DailyMetricsWhereUniqueInput
    update: XOR<DailyMetricsUpdateWithoutSpaceInput, DailyMetricsUncheckedUpdateWithoutSpaceInput>
    create: XOR<DailyMetricsCreateWithoutSpaceInput, DailyMetricsUncheckedCreateWithoutSpaceInput>
  }

  export type DailyMetricsUpdateWithWhereUniqueWithoutSpaceInput = {
    where: DailyMetricsWhereUniqueInput
    data: XOR<DailyMetricsUpdateWithoutSpaceInput, DailyMetricsUncheckedUpdateWithoutSpaceInput>
  }

  export type DailyMetricsUpdateManyWithWhereWithoutSpaceInput = {
    where: DailyMetricsScalarWhereInput
    data: XOR<DailyMetricsUpdateManyMutationInput, DailyMetricsUncheckedUpdateManyWithoutSpaceInput>
  }

  export type DailyMetricsScalarWhereInput = {
    AND?: DailyMetricsScalarWhereInput | DailyMetricsScalarWhereInput[]
    OR?: DailyMetricsScalarWhereInput[]
    NOT?: DailyMetricsScalarWhereInput | DailyMetricsScalarWhereInput[]
    id?: StringFilter<"DailyMetrics"> | string
    spaceId?: StringFilter<"DailyMetrics"> | string
    date?: DateTimeFilter<"DailyMetrics"> | Date | string
    pageViews?: IntFilter<"DailyMetrics"> | number
    visitors?: IntFilter<"DailyMetrics"> | number
    completedActions?: IntFilter<"DailyMetrics"> | number
    timeSpentOnWallOfLove?: IntFilter<"DailyMetrics"> | number
    createdAt?: DateTimeFilter<"DailyMetrics"> | Date | string
    updatedAt?: DateTimeFilter<"DailyMetrics"> | Date | string
  }

  export type RequestTestimonialMetricsUpsertWithWhereUniqueWithoutSpaceInput = {
    where: RequestTestimonialMetricsWhereUniqueInput
    update: XOR<RequestTestimonialMetricsUpdateWithoutSpaceInput, RequestTestimonialMetricsUncheckedUpdateWithoutSpaceInput>
    create: XOR<RequestTestimonialMetricsCreateWithoutSpaceInput, RequestTestimonialMetricsUncheckedCreateWithoutSpaceInput>
  }

  export type RequestTestimonialMetricsUpdateWithWhereUniqueWithoutSpaceInput = {
    where: RequestTestimonialMetricsWhereUniqueInput
    data: XOR<RequestTestimonialMetricsUpdateWithoutSpaceInput, RequestTestimonialMetricsUncheckedUpdateWithoutSpaceInput>
  }

  export type RequestTestimonialMetricsUpdateManyWithWhereWithoutSpaceInput = {
    where: RequestTestimonialMetricsScalarWhereInput
    data: XOR<RequestTestimonialMetricsUpdateManyMutationInput, RequestTestimonialMetricsUncheckedUpdateManyWithoutSpaceInput>
  }

  export type RequestTestimonialMetricsScalarWhereInput = {
    AND?: RequestTestimonialMetricsScalarWhereInput | RequestTestimonialMetricsScalarWhereInput[]
    OR?: RequestTestimonialMetricsScalarWhereInput[]
    NOT?: RequestTestimonialMetricsScalarWhereInput | RequestTestimonialMetricsScalarWhereInput[]
    id?: StringFilter<"RequestTestimonialMetrics"> | string
    spaceId?: StringFilter<"RequestTestimonialMetrics"> | string
    dateId?: StringFilter<"RequestTestimonialMetrics"> | string
    pageViews?: IntFilter<"RequestTestimonialMetrics"> | number
    visitors?: IntFilter<"RequestTestimonialMetrics"> | number
    completedActions?: IntFilter<"RequestTestimonialMetrics"> | number
    createdAt?: DateTimeFilter<"RequestTestimonialMetrics"> | Date | string
    updatedAt?: DateTimeFilter<"RequestTestimonialMetrics"> | Date | string
  }

  export type WallOfLoveMetricsUpsertWithWhereUniqueWithoutSpaceInput = {
    where: WallOfLoveMetricsWhereUniqueInput
    update: XOR<WallOfLoveMetricsUpdateWithoutSpaceInput, WallOfLoveMetricsUncheckedUpdateWithoutSpaceInput>
    create: XOR<WallOfLoveMetricsCreateWithoutSpaceInput, WallOfLoveMetricsUncheckedCreateWithoutSpaceInput>
  }

  export type WallOfLoveMetricsUpdateWithWhereUniqueWithoutSpaceInput = {
    where: WallOfLoveMetricsWhereUniqueInput
    data: XOR<WallOfLoveMetricsUpdateWithoutSpaceInput, WallOfLoveMetricsUncheckedUpdateWithoutSpaceInput>
  }

  export type WallOfLoveMetricsUpdateManyWithWhereWithoutSpaceInput = {
    where: WallOfLoveMetricsScalarWhereInput
    data: XOR<WallOfLoveMetricsUpdateManyMutationInput, WallOfLoveMetricsUncheckedUpdateManyWithoutSpaceInput>
  }

  export type WallOfLoveMetricsScalarWhereInput = {
    AND?: WallOfLoveMetricsScalarWhereInput | WallOfLoveMetricsScalarWhereInput[]
    OR?: WallOfLoveMetricsScalarWhereInput[]
    NOT?: WallOfLoveMetricsScalarWhereInput | WallOfLoveMetricsScalarWhereInput[]
    id?: StringFilter<"WallOfLoveMetrics"> | string
    spaceId?: StringFilter<"WallOfLoveMetrics"> | string
    dateId?: StringFilter<"WallOfLoveMetrics"> | string
    pageViews?: IntFilter<"WallOfLoveMetrics"> | number
    visitors?: IntFilter<"WallOfLoveMetrics"> | number
    timeSpentOnWallOfLove?: IntFilter<"WallOfLoveMetrics"> | number
    createdAt?: DateTimeFilter<"WallOfLoveMetrics"> | Date | string
    updatedAt?: DateTimeFilter<"WallOfLoveMetrics"> | Date | string
  }

  export type SpaceCreateWithoutQuestionsInput = {
    id?: string
    name: string
    logo?: string | null
    headerTitle: string
    headerSubtitle: string
    collectionType: $Enums.CollectionType
    collectStar: boolean
    isAnalysisEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isPublished?: boolean
    createdBy: UserCreateNestedOneWithoutSpacesInput
    thankyouSpace?: ThankYouSpaceCreateNestedOneWithoutSpaceInput
    feedbacks?: FeedbackCreateNestedManyWithoutSpaceInput
    DailyMetrics?: DailyMetricsCreateNestedManyWithoutSpaceInput
    RequestTestimonialMetrics?: RequestTestimonialMetricsCreateNestedManyWithoutSpaceInput
    WallOfLoveMetrics?: WallOfLoveMetricsCreateNestedManyWithoutSpaceInput
  }

  export type SpaceUncheckedCreateWithoutQuestionsInput = {
    id?: string
    name: string
    logo?: string | null
    headerTitle: string
    headerSubtitle: string
    collectionType: $Enums.CollectionType
    collectStar: boolean
    isAnalysisEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    isPublished?: boolean
    thankyouSpace?: ThankYouSpaceUncheckedCreateNestedOneWithoutSpaceInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutSpaceInput
    DailyMetrics?: DailyMetricsUncheckedCreateNestedManyWithoutSpaceInput
    RequestTestimonialMetrics?: RequestTestimonialMetricsUncheckedCreateNestedManyWithoutSpaceInput
    WallOfLoveMetrics?: WallOfLoveMetricsUncheckedCreateNestedManyWithoutSpaceInput
  }

  export type SpaceCreateOrConnectWithoutQuestionsInput = {
    where: SpaceWhereUniqueInput
    create: XOR<SpaceCreateWithoutQuestionsInput, SpaceUncheckedCreateWithoutQuestionsInput>
  }

  export type SpaceUpsertWithoutQuestionsInput = {
    update: XOR<SpaceUpdateWithoutQuestionsInput, SpaceUncheckedUpdateWithoutQuestionsInput>
    create: XOR<SpaceCreateWithoutQuestionsInput, SpaceUncheckedCreateWithoutQuestionsInput>
    where?: SpaceWhereInput
  }

  export type SpaceUpdateToOneWithWhereWithoutQuestionsInput = {
    where?: SpaceWhereInput
    data: XOR<SpaceUpdateWithoutQuestionsInput, SpaceUncheckedUpdateWithoutQuestionsInput>
  }

  export type SpaceUpdateWithoutQuestionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    headerTitle?: StringFieldUpdateOperationsInput | string
    headerSubtitle?: StringFieldUpdateOperationsInput | string
    collectionType?: EnumCollectionTypeFieldUpdateOperationsInput | $Enums.CollectionType
    collectStar?: BoolFieldUpdateOperationsInput | boolean
    isAnalysisEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: UserUpdateOneRequiredWithoutSpacesNestedInput
    thankyouSpace?: ThankYouSpaceUpdateOneWithoutSpaceNestedInput
    feedbacks?: FeedbackUpdateManyWithoutSpaceNestedInput
    DailyMetrics?: DailyMetricsUpdateManyWithoutSpaceNestedInput
    RequestTestimonialMetrics?: RequestTestimonialMetricsUpdateManyWithoutSpaceNestedInput
    WallOfLoveMetrics?: WallOfLoveMetricsUpdateManyWithoutSpaceNestedInput
  }

  export type SpaceUncheckedUpdateWithoutQuestionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    headerTitle?: StringFieldUpdateOperationsInput | string
    headerSubtitle?: StringFieldUpdateOperationsInput | string
    collectionType?: EnumCollectionTypeFieldUpdateOperationsInput | $Enums.CollectionType
    collectStar?: BoolFieldUpdateOperationsInput | boolean
    isAnalysisEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    thankyouSpace?: ThankYouSpaceUncheckedUpdateOneWithoutSpaceNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutSpaceNestedInput
    DailyMetrics?: DailyMetricsUncheckedUpdateManyWithoutSpaceNestedInput
    RequestTestimonialMetrics?: RequestTestimonialMetricsUncheckedUpdateManyWithoutSpaceNestedInput
    WallOfLoveMetrics?: WallOfLoveMetricsUncheckedUpdateManyWithoutSpaceNestedInput
  }

  export type SpaceCreateWithoutThankyouSpaceInput = {
    id?: string
    name: string
    logo?: string | null
    headerTitle: string
    headerSubtitle: string
    collectionType: $Enums.CollectionType
    collectStar: boolean
    isAnalysisEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isPublished?: boolean
    questions?: QuestionCreateNestedManyWithoutSpaceInput
    createdBy: UserCreateNestedOneWithoutSpacesInput
    feedbacks?: FeedbackCreateNestedManyWithoutSpaceInput
    DailyMetrics?: DailyMetricsCreateNestedManyWithoutSpaceInput
    RequestTestimonialMetrics?: RequestTestimonialMetricsCreateNestedManyWithoutSpaceInput
    WallOfLoveMetrics?: WallOfLoveMetricsCreateNestedManyWithoutSpaceInput
  }

  export type SpaceUncheckedCreateWithoutThankyouSpaceInput = {
    id?: string
    name: string
    logo?: string | null
    headerTitle: string
    headerSubtitle: string
    collectionType: $Enums.CollectionType
    collectStar: boolean
    isAnalysisEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    isPublished?: boolean
    questions?: QuestionUncheckedCreateNestedManyWithoutSpaceInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutSpaceInput
    DailyMetrics?: DailyMetricsUncheckedCreateNestedManyWithoutSpaceInput
    RequestTestimonialMetrics?: RequestTestimonialMetricsUncheckedCreateNestedManyWithoutSpaceInput
    WallOfLoveMetrics?: WallOfLoveMetricsUncheckedCreateNestedManyWithoutSpaceInput
  }

  export type SpaceCreateOrConnectWithoutThankyouSpaceInput = {
    where: SpaceWhereUniqueInput
    create: XOR<SpaceCreateWithoutThankyouSpaceInput, SpaceUncheckedCreateWithoutThankyouSpaceInput>
  }

  export type SpaceUpsertWithoutThankyouSpaceInput = {
    update: XOR<SpaceUpdateWithoutThankyouSpaceInput, SpaceUncheckedUpdateWithoutThankyouSpaceInput>
    create: XOR<SpaceCreateWithoutThankyouSpaceInput, SpaceUncheckedCreateWithoutThankyouSpaceInput>
    where?: SpaceWhereInput
  }

  export type SpaceUpdateToOneWithWhereWithoutThankyouSpaceInput = {
    where?: SpaceWhereInput
    data: XOR<SpaceUpdateWithoutThankyouSpaceInput, SpaceUncheckedUpdateWithoutThankyouSpaceInput>
  }

  export type SpaceUpdateWithoutThankyouSpaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    headerTitle?: StringFieldUpdateOperationsInput | string
    headerSubtitle?: StringFieldUpdateOperationsInput | string
    collectionType?: EnumCollectionTypeFieldUpdateOperationsInput | $Enums.CollectionType
    collectStar?: BoolFieldUpdateOperationsInput | boolean
    isAnalysisEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    questions?: QuestionUpdateManyWithoutSpaceNestedInput
    createdBy?: UserUpdateOneRequiredWithoutSpacesNestedInput
    feedbacks?: FeedbackUpdateManyWithoutSpaceNestedInput
    DailyMetrics?: DailyMetricsUpdateManyWithoutSpaceNestedInput
    RequestTestimonialMetrics?: RequestTestimonialMetricsUpdateManyWithoutSpaceNestedInput
    WallOfLoveMetrics?: WallOfLoveMetricsUpdateManyWithoutSpaceNestedInput
  }

  export type SpaceUncheckedUpdateWithoutThankyouSpaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    headerTitle?: StringFieldUpdateOperationsInput | string
    headerSubtitle?: StringFieldUpdateOperationsInput | string
    collectionType?: EnumCollectionTypeFieldUpdateOperationsInput | $Enums.CollectionType
    collectStar?: BoolFieldUpdateOperationsInput | boolean
    isAnalysisEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    questions?: QuestionUncheckedUpdateManyWithoutSpaceNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutSpaceNestedInput
    DailyMetrics?: DailyMetricsUncheckedUpdateManyWithoutSpaceNestedInput
    RequestTestimonialMetrics?: RequestTestimonialMetricsUncheckedUpdateManyWithoutSpaceNestedInput
    WallOfLoveMetrics?: WallOfLoveMetricsUncheckedUpdateManyWithoutSpaceNestedInput
  }

  export type SpaceCreateWithoutFeedbacksInput = {
    id?: string
    name: string
    logo?: string | null
    headerTitle: string
    headerSubtitle: string
    collectionType: $Enums.CollectionType
    collectStar: boolean
    isAnalysisEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isPublished?: boolean
    questions?: QuestionCreateNestedManyWithoutSpaceInput
    createdBy: UserCreateNestedOneWithoutSpacesInput
    thankyouSpace?: ThankYouSpaceCreateNestedOneWithoutSpaceInput
    DailyMetrics?: DailyMetricsCreateNestedManyWithoutSpaceInput
    RequestTestimonialMetrics?: RequestTestimonialMetricsCreateNestedManyWithoutSpaceInput
    WallOfLoveMetrics?: WallOfLoveMetricsCreateNestedManyWithoutSpaceInput
  }

  export type SpaceUncheckedCreateWithoutFeedbacksInput = {
    id?: string
    name: string
    logo?: string | null
    headerTitle: string
    headerSubtitle: string
    collectionType: $Enums.CollectionType
    collectStar: boolean
    isAnalysisEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    isPublished?: boolean
    questions?: QuestionUncheckedCreateNestedManyWithoutSpaceInput
    thankyouSpace?: ThankYouSpaceUncheckedCreateNestedOneWithoutSpaceInput
    DailyMetrics?: DailyMetricsUncheckedCreateNestedManyWithoutSpaceInput
    RequestTestimonialMetrics?: RequestTestimonialMetricsUncheckedCreateNestedManyWithoutSpaceInput
    WallOfLoveMetrics?: WallOfLoveMetricsUncheckedCreateNestedManyWithoutSpaceInput
  }

  export type SpaceCreateOrConnectWithoutFeedbacksInput = {
    where: SpaceWhereUniqueInput
    create: XOR<SpaceCreateWithoutFeedbacksInput, SpaceUncheckedCreateWithoutFeedbacksInput>
  }

  export type SpaceUpsertWithoutFeedbacksInput = {
    update: XOR<SpaceUpdateWithoutFeedbacksInput, SpaceUncheckedUpdateWithoutFeedbacksInput>
    create: XOR<SpaceCreateWithoutFeedbacksInput, SpaceUncheckedCreateWithoutFeedbacksInput>
    where?: SpaceWhereInput
  }

  export type SpaceUpdateToOneWithWhereWithoutFeedbacksInput = {
    where?: SpaceWhereInput
    data: XOR<SpaceUpdateWithoutFeedbacksInput, SpaceUncheckedUpdateWithoutFeedbacksInput>
  }

  export type SpaceUpdateWithoutFeedbacksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    headerTitle?: StringFieldUpdateOperationsInput | string
    headerSubtitle?: StringFieldUpdateOperationsInput | string
    collectionType?: EnumCollectionTypeFieldUpdateOperationsInput | $Enums.CollectionType
    collectStar?: BoolFieldUpdateOperationsInput | boolean
    isAnalysisEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    questions?: QuestionUpdateManyWithoutSpaceNestedInput
    createdBy?: UserUpdateOneRequiredWithoutSpacesNestedInput
    thankyouSpace?: ThankYouSpaceUpdateOneWithoutSpaceNestedInput
    DailyMetrics?: DailyMetricsUpdateManyWithoutSpaceNestedInput
    RequestTestimonialMetrics?: RequestTestimonialMetricsUpdateManyWithoutSpaceNestedInput
    WallOfLoveMetrics?: WallOfLoveMetricsUpdateManyWithoutSpaceNestedInput
  }

  export type SpaceUncheckedUpdateWithoutFeedbacksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    headerTitle?: StringFieldUpdateOperationsInput | string
    headerSubtitle?: StringFieldUpdateOperationsInput | string
    collectionType?: EnumCollectionTypeFieldUpdateOperationsInput | $Enums.CollectionType
    collectStar?: BoolFieldUpdateOperationsInput | boolean
    isAnalysisEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    questions?: QuestionUncheckedUpdateManyWithoutSpaceNestedInput
    thankyouSpace?: ThankYouSpaceUncheckedUpdateOneWithoutSpaceNestedInput
    DailyMetrics?: DailyMetricsUncheckedUpdateManyWithoutSpaceNestedInput
    RequestTestimonialMetrics?: RequestTestimonialMetricsUncheckedUpdateManyWithoutSpaceNestedInput
    WallOfLoveMetrics?: WallOfLoveMetricsUncheckedUpdateManyWithoutSpaceNestedInput
  }

  export type RequestTestimonialMetricsCreateWithoutDateInput = {
    id?: string
    pageViews?: number
    visitors?: number
    completedActions?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    space: SpaceCreateNestedOneWithoutRequestTestimonialMetricsInput
  }

  export type RequestTestimonialMetricsUncheckedCreateWithoutDateInput = {
    id?: string
    spaceId: string
    pageViews?: number
    visitors?: number
    completedActions?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RequestTestimonialMetricsCreateOrConnectWithoutDateInput = {
    where: RequestTestimonialMetricsWhereUniqueInput
    create: XOR<RequestTestimonialMetricsCreateWithoutDateInput, RequestTestimonialMetricsUncheckedCreateWithoutDateInput>
  }

  export type RequestTestimonialMetricsCreateManyDateInputEnvelope = {
    data: RequestTestimonialMetricsCreateManyDateInput | RequestTestimonialMetricsCreateManyDateInput[]
    skipDuplicates?: boolean
  }

  export type WallOfLoveMetricsCreateWithoutDateInput = {
    id?: string
    pageViews?: number
    visitors?: number
    timeSpentOnWallOfLove?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    space: SpaceCreateNestedOneWithoutWallOfLoveMetricsInput
  }

  export type WallOfLoveMetricsUncheckedCreateWithoutDateInput = {
    id?: string
    spaceId: string
    pageViews?: number
    visitors?: number
    timeSpentOnWallOfLove?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WallOfLoveMetricsCreateOrConnectWithoutDateInput = {
    where: WallOfLoveMetricsWhereUniqueInput
    create: XOR<WallOfLoveMetricsCreateWithoutDateInput, WallOfLoveMetricsUncheckedCreateWithoutDateInput>
  }

  export type WallOfLoveMetricsCreateManyDateInputEnvelope = {
    data: WallOfLoveMetricsCreateManyDateInput | WallOfLoveMetricsCreateManyDateInput[]
    skipDuplicates?: boolean
  }

  export type RequestTestimonialMetricsUpsertWithWhereUniqueWithoutDateInput = {
    where: RequestTestimonialMetricsWhereUniqueInput
    update: XOR<RequestTestimonialMetricsUpdateWithoutDateInput, RequestTestimonialMetricsUncheckedUpdateWithoutDateInput>
    create: XOR<RequestTestimonialMetricsCreateWithoutDateInput, RequestTestimonialMetricsUncheckedCreateWithoutDateInput>
  }

  export type RequestTestimonialMetricsUpdateWithWhereUniqueWithoutDateInput = {
    where: RequestTestimonialMetricsWhereUniqueInput
    data: XOR<RequestTestimonialMetricsUpdateWithoutDateInput, RequestTestimonialMetricsUncheckedUpdateWithoutDateInput>
  }

  export type RequestTestimonialMetricsUpdateManyWithWhereWithoutDateInput = {
    where: RequestTestimonialMetricsScalarWhereInput
    data: XOR<RequestTestimonialMetricsUpdateManyMutationInput, RequestTestimonialMetricsUncheckedUpdateManyWithoutDateInput>
  }

  export type WallOfLoveMetricsUpsertWithWhereUniqueWithoutDateInput = {
    where: WallOfLoveMetricsWhereUniqueInput
    update: XOR<WallOfLoveMetricsUpdateWithoutDateInput, WallOfLoveMetricsUncheckedUpdateWithoutDateInput>
    create: XOR<WallOfLoveMetricsCreateWithoutDateInput, WallOfLoveMetricsUncheckedCreateWithoutDateInput>
  }

  export type WallOfLoveMetricsUpdateWithWhereUniqueWithoutDateInput = {
    where: WallOfLoveMetricsWhereUniqueInput
    data: XOR<WallOfLoveMetricsUpdateWithoutDateInput, WallOfLoveMetricsUncheckedUpdateWithoutDateInput>
  }

  export type WallOfLoveMetricsUpdateManyWithWhereWithoutDateInput = {
    where: WallOfLoveMetricsScalarWhereInput
    data: XOR<WallOfLoveMetricsUpdateManyMutationInput, WallOfLoveMetricsUncheckedUpdateManyWithoutDateInput>
  }

  export type SpaceCreateWithoutRequestTestimonialMetricsInput = {
    id?: string
    name: string
    logo?: string | null
    headerTitle: string
    headerSubtitle: string
    collectionType: $Enums.CollectionType
    collectStar: boolean
    isAnalysisEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isPublished?: boolean
    questions?: QuestionCreateNestedManyWithoutSpaceInput
    createdBy: UserCreateNestedOneWithoutSpacesInput
    thankyouSpace?: ThankYouSpaceCreateNestedOneWithoutSpaceInput
    feedbacks?: FeedbackCreateNestedManyWithoutSpaceInput
    DailyMetrics?: DailyMetricsCreateNestedManyWithoutSpaceInput
    WallOfLoveMetrics?: WallOfLoveMetricsCreateNestedManyWithoutSpaceInput
  }

  export type SpaceUncheckedCreateWithoutRequestTestimonialMetricsInput = {
    id?: string
    name: string
    logo?: string | null
    headerTitle: string
    headerSubtitle: string
    collectionType: $Enums.CollectionType
    collectStar: boolean
    isAnalysisEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    isPublished?: boolean
    questions?: QuestionUncheckedCreateNestedManyWithoutSpaceInput
    thankyouSpace?: ThankYouSpaceUncheckedCreateNestedOneWithoutSpaceInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutSpaceInput
    DailyMetrics?: DailyMetricsUncheckedCreateNestedManyWithoutSpaceInput
    WallOfLoveMetrics?: WallOfLoveMetricsUncheckedCreateNestedManyWithoutSpaceInput
  }

  export type SpaceCreateOrConnectWithoutRequestTestimonialMetricsInput = {
    where: SpaceWhereUniqueInput
    create: XOR<SpaceCreateWithoutRequestTestimonialMetricsInput, SpaceUncheckedCreateWithoutRequestTestimonialMetricsInput>
  }

  export type MetricsDateCreateWithoutRequestTestimonialMetricsInput = {
    id?: string
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    wallOfLoveMetrics?: WallOfLoveMetricsCreateNestedManyWithoutDateInput
  }

  export type MetricsDateUncheckedCreateWithoutRequestTestimonialMetricsInput = {
    id?: string
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    wallOfLoveMetrics?: WallOfLoveMetricsUncheckedCreateNestedManyWithoutDateInput
  }

  export type MetricsDateCreateOrConnectWithoutRequestTestimonialMetricsInput = {
    where: MetricsDateWhereUniqueInput
    create: XOR<MetricsDateCreateWithoutRequestTestimonialMetricsInput, MetricsDateUncheckedCreateWithoutRequestTestimonialMetricsInput>
  }

  export type SpaceUpsertWithoutRequestTestimonialMetricsInput = {
    update: XOR<SpaceUpdateWithoutRequestTestimonialMetricsInput, SpaceUncheckedUpdateWithoutRequestTestimonialMetricsInput>
    create: XOR<SpaceCreateWithoutRequestTestimonialMetricsInput, SpaceUncheckedCreateWithoutRequestTestimonialMetricsInput>
    where?: SpaceWhereInput
  }

  export type SpaceUpdateToOneWithWhereWithoutRequestTestimonialMetricsInput = {
    where?: SpaceWhereInput
    data: XOR<SpaceUpdateWithoutRequestTestimonialMetricsInput, SpaceUncheckedUpdateWithoutRequestTestimonialMetricsInput>
  }

  export type SpaceUpdateWithoutRequestTestimonialMetricsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    headerTitle?: StringFieldUpdateOperationsInput | string
    headerSubtitle?: StringFieldUpdateOperationsInput | string
    collectionType?: EnumCollectionTypeFieldUpdateOperationsInput | $Enums.CollectionType
    collectStar?: BoolFieldUpdateOperationsInput | boolean
    isAnalysisEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    questions?: QuestionUpdateManyWithoutSpaceNestedInput
    createdBy?: UserUpdateOneRequiredWithoutSpacesNestedInput
    thankyouSpace?: ThankYouSpaceUpdateOneWithoutSpaceNestedInput
    feedbacks?: FeedbackUpdateManyWithoutSpaceNestedInput
    DailyMetrics?: DailyMetricsUpdateManyWithoutSpaceNestedInput
    WallOfLoveMetrics?: WallOfLoveMetricsUpdateManyWithoutSpaceNestedInput
  }

  export type SpaceUncheckedUpdateWithoutRequestTestimonialMetricsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    headerTitle?: StringFieldUpdateOperationsInput | string
    headerSubtitle?: StringFieldUpdateOperationsInput | string
    collectionType?: EnumCollectionTypeFieldUpdateOperationsInput | $Enums.CollectionType
    collectStar?: BoolFieldUpdateOperationsInput | boolean
    isAnalysisEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    questions?: QuestionUncheckedUpdateManyWithoutSpaceNestedInput
    thankyouSpace?: ThankYouSpaceUncheckedUpdateOneWithoutSpaceNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutSpaceNestedInput
    DailyMetrics?: DailyMetricsUncheckedUpdateManyWithoutSpaceNestedInput
    WallOfLoveMetrics?: WallOfLoveMetricsUncheckedUpdateManyWithoutSpaceNestedInput
  }

  export type MetricsDateUpsertWithoutRequestTestimonialMetricsInput = {
    update: XOR<MetricsDateUpdateWithoutRequestTestimonialMetricsInput, MetricsDateUncheckedUpdateWithoutRequestTestimonialMetricsInput>
    create: XOR<MetricsDateCreateWithoutRequestTestimonialMetricsInput, MetricsDateUncheckedCreateWithoutRequestTestimonialMetricsInput>
    where?: MetricsDateWhereInput
  }

  export type MetricsDateUpdateToOneWithWhereWithoutRequestTestimonialMetricsInput = {
    where?: MetricsDateWhereInput
    data: XOR<MetricsDateUpdateWithoutRequestTestimonialMetricsInput, MetricsDateUncheckedUpdateWithoutRequestTestimonialMetricsInput>
  }

  export type MetricsDateUpdateWithoutRequestTestimonialMetricsInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    wallOfLoveMetrics?: WallOfLoveMetricsUpdateManyWithoutDateNestedInput
  }

  export type MetricsDateUncheckedUpdateWithoutRequestTestimonialMetricsInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    wallOfLoveMetrics?: WallOfLoveMetricsUncheckedUpdateManyWithoutDateNestedInput
  }

  export type SpaceCreateWithoutWallOfLoveMetricsInput = {
    id?: string
    name: string
    logo?: string | null
    headerTitle: string
    headerSubtitle: string
    collectionType: $Enums.CollectionType
    collectStar: boolean
    isAnalysisEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isPublished?: boolean
    questions?: QuestionCreateNestedManyWithoutSpaceInput
    createdBy: UserCreateNestedOneWithoutSpacesInput
    thankyouSpace?: ThankYouSpaceCreateNestedOneWithoutSpaceInput
    feedbacks?: FeedbackCreateNestedManyWithoutSpaceInput
    DailyMetrics?: DailyMetricsCreateNestedManyWithoutSpaceInput
    RequestTestimonialMetrics?: RequestTestimonialMetricsCreateNestedManyWithoutSpaceInput
  }

  export type SpaceUncheckedCreateWithoutWallOfLoveMetricsInput = {
    id?: string
    name: string
    logo?: string | null
    headerTitle: string
    headerSubtitle: string
    collectionType: $Enums.CollectionType
    collectStar: boolean
    isAnalysisEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    isPublished?: boolean
    questions?: QuestionUncheckedCreateNestedManyWithoutSpaceInput
    thankyouSpace?: ThankYouSpaceUncheckedCreateNestedOneWithoutSpaceInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutSpaceInput
    DailyMetrics?: DailyMetricsUncheckedCreateNestedManyWithoutSpaceInput
    RequestTestimonialMetrics?: RequestTestimonialMetricsUncheckedCreateNestedManyWithoutSpaceInput
  }

  export type SpaceCreateOrConnectWithoutWallOfLoveMetricsInput = {
    where: SpaceWhereUniqueInput
    create: XOR<SpaceCreateWithoutWallOfLoveMetricsInput, SpaceUncheckedCreateWithoutWallOfLoveMetricsInput>
  }

  export type MetricsDateCreateWithoutWallOfLoveMetricsInput = {
    id?: string
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    requestTestimonialMetrics?: RequestTestimonialMetricsCreateNestedManyWithoutDateInput
  }

  export type MetricsDateUncheckedCreateWithoutWallOfLoveMetricsInput = {
    id?: string
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    requestTestimonialMetrics?: RequestTestimonialMetricsUncheckedCreateNestedManyWithoutDateInput
  }

  export type MetricsDateCreateOrConnectWithoutWallOfLoveMetricsInput = {
    where: MetricsDateWhereUniqueInput
    create: XOR<MetricsDateCreateWithoutWallOfLoveMetricsInput, MetricsDateUncheckedCreateWithoutWallOfLoveMetricsInput>
  }

  export type SpaceUpsertWithoutWallOfLoveMetricsInput = {
    update: XOR<SpaceUpdateWithoutWallOfLoveMetricsInput, SpaceUncheckedUpdateWithoutWallOfLoveMetricsInput>
    create: XOR<SpaceCreateWithoutWallOfLoveMetricsInput, SpaceUncheckedCreateWithoutWallOfLoveMetricsInput>
    where?: SpaceWhereInput
  }

  export type SpaceUpdateToOneWithWhereWithoutWallOfLoveMetricsInput = {
    where?: SpaceWhereInput
    data: XOR<SpaceUpdateWithoutWallOfLoveMetricsInput, SpaceUncheckedUpdateWithoutWallOfLoveMetricsInput>
  }

  export type SpaceUpdateWithoutWallOfLoveMetricsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    headerTitle?: StringFieldUpdateOperationsInput | string
    headerSubtitle?: StringFieldUpdateOperationsInput | string
    collectionType?: EnumCollectionTypeFieldUpdateOperationsInput | $Enums.CollectionType
    collectStar?: BoolFieldUpdateOperationsInput | boolean
    isAnalysisEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    questions?: QuestionUpdateManyWithoutSpaceNestedInput
    createdBy?: UserUpdateOneRequiredWithoutSpacesNestedInput
    thankyouSpace?: ThankYouSpaceUpdateOneWithoutSpaceNestedInput
    feedbacks?: FeedbackUpdateManyWithoutSpaceNestedInput
    DailyMetrics?: DailyMetricsUpdateManyWithoutSpaceNestedInput
    RequestTestimonialMetrics?: RequestTestimonialMetricsUpdateManyWithoutSpaceNestedInput
  }

  export type SpaceUncheckedUpdateWithoutWallOfLoveMetricsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    headerTitle?: StringFieldUpdateOperationsInput | string
    headerSubtitle?: StringFieldUpdateOperationsInput | string
    collectionType?: EnumCollectionTypeFieldUpdateOperationsInput | $Enums.CollectionType
    collectStar?: BoolFieldUpdateOperationsInput | boolean
    isAnalysisEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    questions?: QuestionUncheckedUpdateManyWithoutSpaceNestedInput
    thankyouSpace?: ThankYouSpaceUncheckedUpdateOneWithoutSpaceNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutSpaceNestedInput
    DailyMetrics?: DailyMetricsUncheckedUpdateManyWithoutSpaceNestedInput
    RequestTestimonialMetrics?: RequestTestimonialMetricsUncheckedUpdateManyWithoutSpaceNestedInput
  }

  export type MetricsDateUpsertWithoutWallOfLoveMetricsInput = {
    update: XOR<MetricsDateUpdateWithoutWallOfLoveMetricsInput, MetricsDateUncheckedUpdateWithoutWallOfLoveMetricsInput>
    create: XOR<MetricsDateCreateWithoutWallOfLoveMetricsInput, MetricsDateUncheckedCreateWithoutWallOfLoveMetricsInput>
    where?: MetricsDateWhereInput
  }

  export type MetricsDateUpdateToOneWithWhereWithoutWallOfLoveMetricsInput = {
    where?: MetricsDateWhereInput
    data: XOR<MetricsDateUpdateWithoutWallOfLoveMetricsInput, MetricsDateUncheckedUpdateWithoutWallOfLoveMetricsInput>
  }

  export type MetricsDateUpdateWithoutWallOfLoveMetricsInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requestTestimonialMetrics?: RequestTestimonialMetricsUpdateManyWithoutDateNestedInput
  }

  export type MetricsDateUncheckedUpdateWithoutWallOfLoveMetricsInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requestTestimonialMetrics?: RequestTestimonialMetricsUncheckedUpdateManyWithoutDateNestedInput
  }

  export type SpaceCreateWithoutDailyMetricsInput = {
    id?: string
    name: string
    logo?: string | null
    headerTitle: string
    headerSubtitle: string
    collectionType: $Enums.CollectionType
    collectStar: boolean
    isAnalysisEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isPublished?: boolean
    questions?: QuestionCreateNestedManyWithoutSpaceInput
    createdBy: UserCreateNestedOneWithoutSpacesInput
    thankyouSpace?: ThankYouSpaceCreateNestedOneWithoutSpaceInput
    feedbacks?: FeedbackCreateNestedManyWithoutSpaceInput
    RequestTestimonialMetrics?: RequestTestimonialMetricsCreateNestedManyWithoutSpaceInput
    WallOfLoveMetrics?: WallOfLoveMetricsCreateNestedManyWithoutSpaceInput
  }

  export type SpaceUncheckedCreateWithoutDailyMetricsInput = {
    id?: string
    name: string
    logo?: string | null
    headerTitle: string
    headerSubtitle: string
    collectionType: $Enums.CollectionType
    collectStar: boolean
    isAnalysisEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    isPublished?: boolean
    questions?: QuestionUncheckedCreateNestedManyWithoutSpaceInput
    thankyouSpace?: ThankYouSpaceUncheckedCreateNestedOneWithoutSpaceInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutSpaceInput
    RequestTestimonialMetrics?: RequestTestimonialMetricsUncheckedCreateNestedManyWithoutSpaceInput
    WallOfLoveMetrics?: WallOfLoveMetricsUncheckedCreateNestedManyWithoutSpaceInput
  }

  export type SpaceCreateOrConnectWithoutDailyMetricsInput = {
    where: SpaceWhereUniqueInput
    create: XOR<SpaceCreateWithoutDailyMetricsInput, SpaceUncheckedCreateWithoutDailyMetricsInput>
  }

  export type SpaceUpsertWithoutDailyMetricsInput = {
    update: XOR<SpaceUpdateWithoutDailyMetricsInput, SpaceUncheckedUpdateWithoutDailyMetricsInput>
    create: XOR<SpaceCreateWithoutDailyMetricsInput, SpaceUncheckedCreateWithoutDailyMetricsInput>
    where?: SpaceWhereInput
  }

  export type SpaceUpdateToOneWithWhereWithoutDailyMetricsInput = {
    where?: SpaceWhereInput
    data: XOR<SpaceUpdateWithoutDailyMetricsInput, SpaceUncheckedUpdateWithoutDailyMetricsInput>
  }

  export type SpaceUpdateWithoutDailyMetricsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    headerTitle?: StringFieldUpdateOperationsInput | string
    headerSubtitle?: StringFieldUpdateOperationsInput | string
    collectionType?: EnumCollectionTypeFieldUpdateOperationsInput | $Enums.CollectionType
    collectStar?: BoolFieldUpdateOperationsInput | boolean
    isAnalysisEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    questions?: QuestionUpdateManyWithoutSpaceNestedInput
    createdBy?: UserUpdateOneRequiredWithoutSpacesNestedInput
    thankyouSpace?: ThankYouSpaceUpdateOneWithoutSpaceNestedInput
    feedbacks?: FeedbackUpdateManyWithoutSpaceNestedInput
    RequestTestimonialMetrics?: RequestTestimonialMetricsUpdateManyWithoutSpaceNestedInput
    WallOfLoveMetrics?: WallOfLoveMetricsUpdateManyWithoutSpaceNestedInput
  }

  export type SpaceUncheckedUpdateWithoutDailyMetricsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    headerTitle?: StringFieldUpdateOperationsInput | string
    headerSubtitle?: StringFieldUpdateOperationsInput | string
    collectionType?: EnumCollectionTypeFieldUpdateOperationsInput | $Enums.CollectionType
    collectStar?: BoolFieldUpdateOperationsInput | boolean
    isAnalysisEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    questions?: QuestionUncheckedUpdateManyWithoutSpaceNestedInput
    thankyouSpace?: ThankYouSpaceUncheckedUpdateOneWithoutSpaceNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutSpaceNestedInput
    RequestTestimonialMetrics?: RequestTestimonialMetricsUncheckedUpdateManyWithoutSpaceNestedInput
    WallOfLoveMetrics?: WallOfLoveMetricsUncheckedUpdateManyWithoutSpaceNestedInput
  }

  export type AccountCreateManyUserInput = {
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SpaceCreateManyCreatedByInput = {
    id?: string
    name: string
    logo?: string | null
    headerTitle: string
    headerSubtitle: string
    collectionType: $Enums.CollectionType
    collectStar: boolean
    isAnalysisEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isPublished?: boolean
  }

  export type AccountUpdateWithoutUserInput = {
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateWithoutUserInput = {
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateManyWithoutUserInput = {
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SpaceUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    headerTitle?: StringFieldUpdateOperationsInput | string
    headerSubtitle?: StringFieldUpdateOperationsInput | string
    collectionType?: EnumCollectionTypeFieldUpdateOperationsInput | $Enums.CollectionType
    collectStar?: BoolFieldUpdateOperationsInput | boolean
    isAnalysisEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    questions?: QuestionUpdateManyWithoutSpaceNestedInput
    thankyouSpace?: ThankYouSpaceUpdateOneWithoutSpaceNestedInput
    feedbacks?: FeedbackUpdateManyWithoutSpaceNestedInput
    DailyMetrics?: DailyMetricsUpdateManyWithoutSpaceNestedInput
    RequestTestimonialMetrics?: RequestTestimonialMetricsUpdateManyWithoutSpaceNestedInput
    WallOfLoveMetrics?: WallOfLoveMetricsUpdateManyWithoutSpaceNestedInput
  }

  export type SpaceUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    headerTitle?: StringFieldUpdateOperationsInput | string
    headerSubtitle?: StringFieldUpdateOperationsInput | string
    collectionType?: EnumCollectionTypeFieldUpdateOperationsInput | $Enums.CollectionType
    collectStar?: BoolFieldUpdateOperationsInput | boolean
    isAnalysisEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    questions?: QuestionUncheckedUpdateManyWithoutSpaceNestedInput
    thankyouSpace?: ThankYouSpaceUncheckedUpdateOneWithoutSpaceNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutSpaceNestedInput
    DailyMetrics?: DailyMetricsUncheckedUpdateManyWithoutSpaceNestedInput
    RequestTestimonialMetrics?: RequestTestimonialMetricsUncheckedUpdateManyWithoutSpaceNestedInput
    WallOfLoveMetrics?: WallOfLoveMetricsUncheckedUpdateManyWithoutSpaceNestedInput
  }

  export type SpaceUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    headerTitle?: StringFieldUpdateOperationsInput | string
    headerSubtitle?: StringFieldUpdateOperationsInput | string
    collectionType?: EnumCollectionTypeFieldUpdateOperationsInput | $Enums.CollectionType
    collectStar?: BoolFieldUpdateOperationsInput | boolean
    isAnalysisEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPublished?: BoolFieldUpdateOperationsInput | boolean
  }

  export type QuestionCreateManySpaceInput = {
    id?: string
    title: string
    order: number
  }

  export type FeedbackCreateManySpaceInput = {
    id?: string
    answer?: string | null
    name: string
    email: string
    rating: number
    permission: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    feedbackType: $Enums.FeedbackType
    addToWallOfLove?: boolean
    videoUrl?: string | null
    imageUrl?: string | null
    isSpam?: boolean
    sentiment?: $Enums.SentimentType
    analysisStatus?: $Enums.AnalysisStatus
  }

  export type DailyMetricsCreateManySpaceInput = {
    id?: string
    date: Date | string
    pageViews?: number
    visitors?: number
    completedActions?: number
    timeSpentOnWallOfLove?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RequestTestimonialMetricsCreateManySpaceInput = {
    id?: string
    dateId: string
    pageViews?: number
    visitors?: number
    completedActions?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WallOfLoveMetricsCreateManySpaceInput = {
    id?: string
    dateId: string
    pageViews?: number
    visitors?: number
    timeSpentOnWallOfLove?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuestionUpdateWithoutSpaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
  }

  export type QuestionUncheckedUpdateWithoutSpaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
  }

  export type QuestionUncheckedUpdateManyWithoutSpaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
  }

  export type FeedbackUpdateWithoutSpaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    answer?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    permission?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feedbackType?: EnumFeedbackTypeFieldUpdateOperationsInput | $Enums.FeedbackType
    addToWallOfLove?: BoolFieldUpdateOperationsInput | boolean
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isSpam?: BoolFieldUpdateOperationsInput | boolean
    sentiment?: EnumSentimentTypeFieldUpdateOperationsInput | $Enums.SentimentType
    analysisStatus?: EnumAnalysisStatusFieldUpdateOperationsInput | $Enums.AnalysisStatus
  }

  export type FeedbackUncheckedUpdateWithoutSpaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    answer?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    permission?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feedbackType?: EnumFeedbackTypeFieldUpdateOperationsInput | $Enums.FeedbackType
    addToWallOfLove?: BoolFieldUpdateOperationsInput | boolean
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isSpam?: BoolFieldUpdateOperationsInput | boolean
    sentiment?: EnumSentimentTypeFieldUpdateOperationsInput | $Enums.SentimentType
    analysisStatus?: EnumAnalysisStatusFieldUpdateOperationsInput | $Enums.AnalysisStatus
  }

  export type FeedbackUncheckedUpdateManyWithoutSpaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    answer?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    permission?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feedbackType?: EnumFeedbackTypeFieldUpdateOperationsInput | $Enums.FeedbackType
    addToWallOfLove?: BoolFieldUpdateOperationsInput | boolean
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isSpam?: BoolFieldUpdateOperationsInput | boolean
    sentiment?: EnumSentimentTypeFieldUpdateOperationsInput | $Enums.SentimentType
    analysisStatus?: EnumAnalysisStatusFieldUpdateOperationsInput | $Enums.AnalysisStatus
  }

  export type DailyMetricsUpdateWithoutSpaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    pageViews?: IntFieldUpdateOperationsInput | number
    visitors?: IntFieldUpdateOperationsInput | number
    completedActions?: IntFieldUpdateOperationsInput | number
    timeSpentOnWallOfLove?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DailyMetricsUncheckedUpdateWithoutSpaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    pageViews?: IntFieldUpdateOperationsInput | number
    visitors?: IntFieldUpdateOperationsInput | number
    completedActions?: IntFieldUpdateOperationsInput | number
    timeSpentOnWallOfLove?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DailyMetricsUncheckedUpdateManyWithoutSpaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    pageViews?: IntFieldUpdateOperationsInput | number
    visitors?: IntFieldUpdateOperationsInput | number
    completedActions?: IntFieldUpdateOperationsInput | number
    timeSpentOnWallOfLove?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestTestimonialMetricsUpdateWithoutSpaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    pageViews?: IntFieldUpdateOperationsInput | number
    visitors?: IntFieldUpdateOperationsInput | number
    completedActions?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date?: MetricsDateUpdateOneRequiredWithoutRequestTestimonialMetricsNestedInput
  }

  export type RequestTestimonialMetricsUncheckedUpdateWithoutSpaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateId?: StringFieldUpdateOperationsInput | string
    pageViews?: IntFieldUpdateOperationsInput | number
    visitors?: IntFieldUpdateOperationsInput | number
    completedActions?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestTestimonialMetricsUncheckedUpdateManyWithoutSpaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateId?: StringFieldUpdateOperationsInput | string
    pageViews?: IntFieldUpdateOperationsInput | number
    visitors?: IntFieldUpdateOperationsInput | number
    completedActions?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WallOfLoveMetricsUpdateWithoutSpaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    pageViews?: IntFieldUpdateOperationsInput | number
    visitors?: IntFieldUpdateOperationsInput | number
    timeSpentOnWallOfLove?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date?: MetricsDateUpdateOneRequiredWithoutWallOfLoveMetricsNestedInput
  }

  export type WallOfLoveMetricsUncheckedUpdateWithoutSpaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateId?: StringFieldUpdateOperationsInput | string
    pageViews?: IntFieldUpdateOperationsInput | number
    visitors?: IntFieldUpdateOperationsInput | number
    timeSpentOnWallOfLove?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WallOfLoveMetricsUncheckedUpdateManyWithoutSpaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateId?: StringFieldUpdateOperationsInput | string
    pageViews?: IntFieldUpdateOperationsInput | number
    visitors?: IntFieldUpdateOperationsInput | number
    timeSpentOnWallOfLove?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestTestimonialMetricsCreateManyDateInput = {
    id?: string
    spaceId: string
    pageViews?: number
    visitors?: number
    completedActions?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WallOfLoveMetricsCreateManyDateInput = {
    id?: string
    spaceId: string
    pageViews?: number
    visitors?: number
    timeSpentOnWallOfLove?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RequestTestimonialMetricsUpdateWithoutDateInput = {
    id?: StringFieldUpdateOperationsInput | string
    pageViews?: IntFieldUpdateOperationsInput | number
    visitors?: IntFieldUpdateOperationsInput | number
    completedActions?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    space?: SpaceUpdateOneRequiredWithoutRequestTestimonialMetricsNestedInput
  }

  export type RequestTestimonialMetricsUncheckedUpdateWithoutDateInput = {
    id?: StringFieldUpdateOperationsInput | string
    spaceId?: StringFieldUpdateOperationsInput | string
    pageViews?: IntFieldUpdateOperationsInput | number
    visitors?: IntFieldUpdateOperationsInput | number
    completedActions?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestTestimonialMetricsUncheckedUpdateManyWithoutDateInput = {
    id?: StringFieldUpdateOperationsInput | string
    spaceId?: StringFieldUpdateOperationsInput | string
    pageViews?: IntFieldUpdateOperationsInput | number
    visitors?: IntFieldUpdateOperationsInput | number
    completedActions?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WallOfLoveMetricsUpdateWithoutDateInput = {
    id?: StringFieldUpdateOperationsInput | string
    pageViews?: IntFieldUpdateOperationsInput | number
    visitors?: IntFieldUpdateOperationsInput | number
    timeSpentOnWallOfLove?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    space?: SpaceUpdateOneRequiredWithoutWallOfLoveMetricsNestedInput
  }

  export type WallOfLoveMetricsUncheckedUpdateWithoutDateInput = {
    id?: StringFieldUpdateOperationsInput | string
    spaceId?: StringFieldUpdateOperationsInput | string
    pageViews?: IntFieldUpdateOperationsInput | number
    visitors?: IntFieldUpdateOperationsInput | number
    timeSpentOnWallOfLove?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WallOfLoveMetricsUncheckedUpdateManyWithoutDateInput = {
    id?: StringFieldUpdateOperationsInput | string
    spaceId?: StringFieldUpdateOperationsInput | string
    pageViews?: IntFieldUpdateOperationsInput | number
    visitors?: IntFieldUpdateOperationsInput | number
    timeSpentOnWallOfLove?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}