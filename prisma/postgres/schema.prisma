generator client {
  provider = "prisma-client-js"
  output   = "../../node_modules/@prisma-db-postgres/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

enum Role {
  ADMIN
  SUPERADMIN
  MEMBER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  password      String?
  role          Role      @default(ADMIN)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  spaces        Space[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  @@unique([email, token])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("password_reset_tokens")
}

enum CollectionType {
  TEXT
  VIDEO
  TEXT_AND_VIDEO
}

model Space {
  id             String         @id @default(cuid())
  name           String
  logo           String?
  headerTitle    String
  headerSubtitle String
  questions      Question[]
  collectionType CollectionType
  collectStar    Boolean
  // themeId        String         @unique
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  createdById    String
  createdBy      User           @relation(fields: [createdById], references: [id])
  thankyouSpace  ThankYouSpace?
  isPublished    Boolean        @default(false)
  feedbacks      Feedback[]
  // theme          Theme          @relation(fields: [themeId], references: [id])
}

model Question {
  id      String @id @default(cuid())
  spaceId String
  title   String
  order   Int

  space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)
}

model Theme {
  id              String   @id @default(cuid())
  name            String
  primaryColor    String
  secondaryColor  String
  tertiaryColor   String
  quaternaryColor String
  quinaryColor    String
  senaryColor     String
  septenaryColor  String
  octonaryColor   String
  nonaryColor     String
  denaryColor     String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  // space           Space?
}

model ThankYouSpace {
  id        String   @id @default(cuid())
  spaceId   String   @unique
  title     String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)
}

model Feedback {
  id         String   @id @default(cuid())
  answer     String
  name       String
  email      String
  rating     Int
  permission Boolean
  spaceId    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)
}
